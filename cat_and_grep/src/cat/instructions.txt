Cat: 

Считывать посимвольно
int main(int argc, char ** argv) - так принимает аргументы.
Для того, чтобы cat начал работу, нам нужно чтобы аргументов было больше одного if (argc < 1).

Для работы можно объявить структуру (или как вариант массив, в который класть флаги - тема для сокращения кода).

Парсер: 
Самое главное в конце затереть нулями наши опции - memset(argv[count]; '\0'; strlen[argcount])
count = 1 // Счетчик аргументов
while (argv) {
    for (int i = 0; i < strlen(argv[count])); ++i)
    if (argv[count][0] = '-')

        argv[count][1] смотрим чему равен аргумент
        Если аргумент неизвестный, кидаем ошибку

        Если идет два тире подряд, используем ctrcmp(argv[count], --non-blank) = 0;
        Если это не равно нулю, значит ввод неверный, выходим с ошибкой
}

В конце мейна кат возвращает 0, если все успешно. Если больше нуля, то ошибкаj

Если у нас не возникло никаких ошибок после парсера, мы открываем файл
if (error == 0) {
    while(atgvcount[1] != '\0')
        openfile(fopen)
        print
        Для принта используем два чара:
        1. print_char = f_getc или getc (file)
        2. futute_char = '\0'
        if(print_char != EOF)
            number_flag = printf("Цифра с шириной (число с пробелами, чтобы не сьезжало, как в спринтф)) и после нее табуляция");
            while((futute_char = getc(file)) != EOF) {
                flag s - squeeze
                print = print_char
                flag n - номер строки (если есть флаг b, он привалирует над n). В этом случае флаг n игнорируется
                flag e - end 
                print_char = put_char для повторения цикла, так как мы его уже напечатали 
            }
            if (print_char != EOF) {
                print print_char
            }
            squeeze: 
                if (print_char == '\n' && future_char == '\n') {
                    while(future_char = '\n') {
                        put_char = getc(file);
                    }
                }
            непечатаемые символы: 
            if (0, 32) {
                printf("^%c", print_char + 64);
            }
            if (opt_t) {
                printf("^I");
            }
}
Если файл null, мы возвращаем ошибку, но продолжаем парсить
Если мы хотим обрабатывать ошибки, то выводим ошибку не в stdout, а в stderr https://www.delftstack.com/howto/c/c-print-to-stderr/