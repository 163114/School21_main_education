
#include <string.h>
#include <stdio.h>
//#include "s21_string.h"
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_hdi_0
    const short input_int = 12;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_1
    const short int input_int = -12;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_2
    const short int input_int = 12345;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_3
    const short int input_int = -12345;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_4
    const short int input_int = 12;
    const char *format = "%.0hd!%.0hd DA FUCK %.0hd!%.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_5
    const short int input_int = 1234;
    const char *format = "%.1hd!%.2hd DA FUCK %.1hd!%.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_6
    const short int input_int = -1234;
    const char *format = "%.1hd!%.2hd DA FUCK %.1hd!%.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_hdi_7
    const short int input_int = 1234;
    const char *format = "%.5hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_8
    const short int input_int = -1234;
    const char *format = "%.13hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_8_1
    const short int input_int = -1234;
    const char *format = "%.5hd!%.5hd DA FUCK %.5hd!%.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_9
    const short int input_int = 12345;
    const char *format = "%.5hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_10
    const short int input_int = -12345;
    const char *format = "%.5hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_hdi_width_0
    const short int input_int = 12;
    const char *format = "%0hd!%0hd DA FUCK %0hd!%0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_1
    const short int input_int = -12;
    const char *format = "%0hd!%0hd DA FUCK %0hd!%0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_2
    const short int input_int = 12;
    const char *format = "%1hd!%2hd DA FUCK %1hd!%2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_3
    const short int input_int = -12;
    const char *format = "%1hd!%2hd DA FUCK %1hd!%2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_4
    const short int input_int = 12;
    const char *format = "%10hd!%12hd DA FUCK %11hd!%13hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_5
    const short int input_int = -12;
    const char *format = "%10hd!%12hd DA FUCK %11hd!%13hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_hdi_precision_width_0
    const short int input_int = 12;
    const char *format = "%3.0hd!%4.0hd DA FUCK %4.0hd!%5.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_precision_width_1
    const short int input_int = 12;
    const char *format = "%3.1hd!%4.2hd DA FUCK %4.1hd!%5.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_precision_width_2
    const short int input_int = -12;
    const char *format = "%5.3hd!%6.4hd DA FUCK %6.4hd!%7.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_hdi_width_left_justify_0
    const short int input_int = 12;
    const char *format = "%-0hd!%-0hd DA FUCK %-0hd!%-0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_1
    const short int input_int = 12;
    const char *format = "%-1hd!%-2hd DA FUCK %-1hd!%-2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_2
    const short int input_int = -12;
    const char *format = "%-0hd!%-0hd DA FUCK %-0hd!%-0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_3
    const short int input_int = -12;
    const char *format = "%-1hd!%-2hd DA FUCK %-1hd!%-2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_4
    const short int input_int = 12;
    const char *format = "%-3hd!%-4hd DA FUCK %-5hd!%-6hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_5
    const short int input_int = -12;
    const char *format = "%-3hd!%-4hd DA FUCK %-5hd!%-2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_6
    const short int input_int = 12;
    const char *format = "%-3.0hd!%-4.0hd DA FUCK %-5.0hd!%-2.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_7
    const short int input_int = 12;
    const char *format = "%-4.1hd!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_8
    const short int input_int = 12;
    const char *format = "!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_9
    const short int input_int = -12;
    const char *format = "%-4.1hd!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_10
    const short int input_int = -12;
    const char *format = "!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_hdi_plus_0
    const short int input_int = 12;
    const char *format = "%+hd!%+hd DA FUCK %+hd!%+hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_1
    const short int input_int = -12;
    const char *format = "%+hd!%+hd DA FUCK %+hd!%+hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_2
    const short int input_int = -12;
    const char *format = "%+0.0hd!%+0.0hd DA FUCK %+0.0hd!%+0.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_3
    const short int input_int = 12;
    const char *format = "%+0.0hd!%+0.0hd DA FUCK %+0.0hd!%+0.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_4
    const short int input_int = 12;
    const char *format = "%+1.0hd!%+2.0hd DA FUCK %+1.0hd!%+2.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_5
    const short int input_int = 12;
    const char *format = "%+0.1hd!%+0.2hd DA FUCK %+0.1hd!%+0.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_6
    const short int input_int = -12;
    const char *format = "%+0.1hd!%+0.2hd DA FUCK %+0.1hd!%+0.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_7
    const short int input_int = 12;
    const char *format = "%+6.1hd!%+7.2hd DA FUCK %+8.1hd!%+9.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_8
    const short int input_int = -12;
    const char *format = "%+6.1hd!%+7.2hd DA FUCK %+8.1hd!%+9.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_9
    const short int input_int = 12;
    const char *format = "%+8.6hd!%+9.7hd DA FUCK %+10.8hd!%+11.9hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_9_1
    const short int input_int = -12;
    const char *format = "%8.6hd!%9.7hd DA FUCK %10.8hd!%11.9hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_10
    const short int input_int = 12;
    const char *format = "%+6.8hd!%+7.9hd DA FUCK %+8.10hd!%+9.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_11
    const short int input_int = -12;
    const char *format = "%+6.8hd!%+7.9hd DA FUCK %+8.10hd!%+9.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_12
    const short int input_int = 7890;
    const char *format = "%+6.8hd!%+7.9hd DA FUCK %+8.10hd!%+9.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_13
    const short int input_int = -7890;
    const char *format = "%+6.2hd!%+7.2hd DA FUCK %+8.1hd!%+9.3hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_14
    const short int input_int = 7890;
    const char *format = "%+16.3hd!%+107.3hd DA FUCK %+18.2hd!%+19.1hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_15
    const short int input_int = -1890;
    const char *format = "%+16.3hd!%+17.2hd DA FUCK %+18.3hd!%+19.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_16
    const short int input_int = 7890;
    const char *format = "%+16.2hd!%+107.3hd DA FUCK %+18.1hd!%+19.3hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_17
    const short int input_int = -7890;
    const char *format = "%+6.2hd!%+7.1hd DA FUCK %+8.2hd!%+9.1hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_18
    const short int input_int = 7890;
    const char *format = "%+16.2hd!%+107.1hd DA FUCK %+18.1hd!%+19.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_19
    const short int input_int = -123;
    const char *format = "%+16.2hd!%+17.3hd DA FUCK %+18.1hd!%+19.1hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_20
    const short int input_int = 7890;
    const char *format = "%+160.80hd!%+170.90hd DA FUCK %+180.100hd!%+190.110hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_21
    const short int input_int = -12345;
    const char *format = "%+160.180hd!%+170.190hd DA FUCK %+180.200hd!%+190.210hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_left_justify_0
    const short int input_int = -12345;
    const char *format = "%-+160.180hd!%-+170.190hd DA FUCK %-+180.200hd!%-+190.210hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_1
    const short int input_int = -12345;
    const char *format = "%+-160.180hd!%+-170.190hd DA FUCK %+-180.200hd!%+-190.210hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_2
    const short int input_int = -12345;
    const char *format = "%+-16hd!%+-17hd DA FUCK %+-18hd!%+-19hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_3
    const short int input_int = 1234;
    const char *format = "%-+16hd!%-+17hd DA FUCK %+-18hd!%+-19hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_left_justify_4
    const short int input_int = -1234;
    const char *format = "%-+16hd!%-+17hd DA FUCK %+-18hd!%+-19hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_5
    const short int input_int = 1234;
    const char *format = "%-16.10hd!%-17.10hd DA FUCK %-18.8hd!%-19.8hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_6
    const short int input_int = 1234;
    const char *format = "%-+16.10hd!%-+17.10hd DA FUCK %-+18.8hd!%-+19.8hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_7
    const short int input_int = 12;
    const char *format = "%-6.4hd!%-7.5hd DA FUCK %-8.4hd!%-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_8
    const short int input_int = -12;
    const char *format = "%-6.4hd!%-7.5hd DA FUCK %-8.4hd!%-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_9
    const short int input_int = 12;
    const char *format = "%-+6.4hd!%-+7.5hd DA FUCK %-+8.4hd!%-+9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_10
    const short int input_int = -12;
    const char *format = "%-+6.4hd!%-+7.5hd DA FUCK %-+8.4hd!%-+9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_11
    const short int input_int = 123;
    const char *format = "%+-6.4hd!%+-7.5hd DA FUCK %+-8.4hd!%+-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_12
    const short int input_int = -123;
    const char *format = "%+-6.4hd!%+-7.5hd DA FUCK %+-8.4hd!%+-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test10
    const short int input_int = 0x7FFF;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test11
    const short int input_int = 0x7231;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test12
    const short int input_int = -0x7FFF;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test13
    const short int input_int = 017777;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test14
    const short int input_int = 03443;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test15
    const short int input_int = -017777;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular value - right-justify flag test
#test s21_sprintf_hdi_specifier_test16
   const short int input_int = 12;
   const char *format = "%5hi%5hi Hello, World %5hi%5hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_hdi_specifier_test17
   const short int input_int = -12;
   const char *format = "%5hi%5hi Hello, World %5hi%5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - right-justify flag test
#test s21_sprintf_hdi_specifier_test18
   const short int input_int = -12349;
   const char *format = "%hi%5hi Hello, World %5hi%5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_hdi_specifier_test19
   const short int input_int = -12349;
   const char *format = "%15hi%5hi Hello, World %51hi%5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test
#test s21_sprintf_hdi_specifier_test20
   const short int input_int = -12;
   const char *format = "%-5hi%-5hi Hello, World %-5hi%-5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test with different width
#test s21_sprintf_hdi_specifier_test21
   const short int input_int = -12;
   const char *format = "%-5hd%-10hd%-15hd Hello, World %-5hd%-10hd%-15hd";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_hdi_specifier_test22
   const short int input_int = -12;
   const char *format = "%-+3hi%-+5hi Hello, World %-+7hi%-+10hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_hdi_specifier_test23
   const short int input_int = -12345;
   const char *format = "%-+5hi%-+5hi Hello, World %-+50hi%-+50hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_hdi_specifier_test24
   const short int input_int = 12345;
   const char *format = "%-+5hi%-+5hi Hello, World %-+50hi%-+50hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test
#test s21_sprintf_hdi_specifier_test25
   const short int input_int = 12;
   const char *format = "%.5hi!%.5hi Hello, World %.5hi!%.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test (two-digit number)
#test s21_sprintf_hdi_specifier_test26
   const short int input_int = 12345;
   const char *format = "%.15hi!%.15hi Hello, World %.15hi!%.15hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test with different precision
#test s21_sprintf_hdi_specifier_test27
   const short int input_int = 12345;
   const char *format = "%.1hi!%.3hi Hello, World %.hi!%.15hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - precision test with same values
#test s21_sprintf_hdi_specifier_test28
   const short int input_int = -12345;
   const char *format = "%.7hi!%.7hi Hello, World %.7hi!%.7hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - precision test with same values
#test s21_sprintf_hdi_specifier_test29
   const short int input_int = -12345;
   const char *format = "%.7hi!%.7hi Hello, World %.7hi!%.7hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - precision test with different values
#test s21_sprintf_hdi_specifier_test30
   const short int input_int = -12345;
   const char *format = "%.7hi!%.17hi Hello, World %.27hi!%.37hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test
#test s21_sprintf_hdi_specifier_test31
   const short int input_int = 12;
   const char *format = "%11.2hi!%9.2hi Hello, World %7.2hi!%5.2hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test
#test s21_sprintf_hdi_specifier_test32
   const short int input_int = -12345;
   const char *format = "%11.2hi!%9.2hi Hello, World %7.2hi!%5.2hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test - zero precision
#test s21_sprintf_hdi_specifier_test33
   const short int input_int = -12345;
   const char *format = "%11.0hi!%9.0hi Hello, World %7.0hi!%5.0hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test - zero precision
#test s21_sprintf_hdi_specifier_test34
   const short int input_int = 123;
   const char *format = "%11.0hi!%9.0hi Hello, World %7.0hi!%5.0hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_hdi_specifier_test35
   const short int input_int = 12;
   const char *format = "%11.12hi!%9.10hi Hello, World %5.10hi!%10.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_hdi_specifier_test36
   const short int input_int = -12;
   const char *format = "%11.12hi!%9.10hi Hello, World %5.10hi!%10.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_hdi_specifier_test37
   const short int input_int = 12345;
   const char *format = "%4.5hi!%7.8hi Hello, World %5.10hi!%10.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Sign with regular int test
#test s21_sprintf_hdi_specifier_test38
   const short int input_int = 12345;
   const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_hdi_specifier_test39
    const short int input_int = 0x7FFF;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_hdi_specifier_test40
    const short int input_int = 0x7231;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_hdi_specifier_test41
    const short int input_int = -0x7FFF;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with maximum value of octal int
#test s21_sprintf_hdi_specifier_test42
    const short int input_int = 017777;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with normal value of octal int
#test s21_sprintf_hdi_specifier_test43
    const short int input_int = 034437;
    const char *format ="%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// %i Sign with minimum value of octal int
#test s21_sprintf_hdi_specifier_test44
    const short int input_int = -017777;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with maximum int test
#test s21_sprintf_hdi_specifier_test45
    const short int input_int = 32767;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with minimum int test
#test s21_sprintf_hdi_specifier_test46
    const short int input_int = -32768;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test47
    const short int input_int = 0x7FFF;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test48
    const short int input_int = 0x7231;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test49
    const short int input_int = -0x7FFF;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test50
    const short int input_int = 017777;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test51
    const short int input_int = 03443;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test52
    const short int input_int = -017777;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum int test - left-justified with no value
#test s21_sprintf_hdi_specifier_test53
    const short int input_int = 32767;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum int test - left-justified with no value
#test s21_sprintf_hdi_specifier_test54
    const short int input_int = -32768;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - left-justified with no value
#test s21_sprintf_hdi_specifier_test55
    const short int input_int = 7487;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_hdi_specifier_test56
    const short int input_int = 7436;
    const char *format = "%+-3hi%-7hi%-10hi Hello, World %+-3.3hi%-7.7hi%-10.10hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_hdi_specifier_test57
    const short int input_int = 7483;
    const char *format = "%+-.3hi%-.7hi%-.10hi Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hd Minimum hd test
#test s21_sprintf_hdi_specifier_test58
    const short int input_int = -32768;
    const char *format = "%+-.3hd%-.7hd%-.10hd Hello, World %+-3.hd%-7.hd%-10.hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hd Maximum hd test
#test s21_sprintf_hdi_specifier_test59
    const short int input_int = 32767;
    const char *format = "%+-.3hd%-.7hd%-.10hd Hello, World %+-3.hd%-7.hd%-10.hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hi Minimum hi test
#test s21_sprintf_hdi_specifier_test60
    const short int input_int = -32768;
    const char *format = "%+-.3hi%-.7hi%-.10hi Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hi Maximum hd test
#test s21_sprintf_hdi_specifier_test61
    const short int input_int = 32767;
    const char *format = "%+-.3hi%-.7hi%-.10hd Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hi Zero hi test
#test s21_sprintf_hdi_specifier_test62
    const short int input_int = 0;
    const char *format = "%+-.3hi%-.7hi%-.10hi Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hd Zero hd test
#test s21_sprintf_hdi_specifier_test63
    const short int input_int = 0;
    const char *format = "%+-.3hd%-.7hd%-.10hd Hello, World %+-3.hd%-7.hd%-10.hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);