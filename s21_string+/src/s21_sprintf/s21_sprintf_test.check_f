#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);



#test s21_sprintf_test_lf_width_default_precision_0
    const double input_double = 123.0123456789;
    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_0
    const double input_double = 12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_1
    const double input_double = -12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2
    const double input_double = -12.0123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2_1
    const double input_double = -12.01234544444449;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_3
    const double input_double = 98765.00123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_4
    const double input_double = 98765.123456789;
    const char *format = "%f!%f Hello, World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_5
    const double input_double = 98765.123456789;
    const char *format = "%.f!%.f Hello, World %.f!%.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_6
    const double input_double = 98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_7
    const double input_double = -98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_8
    const double input_double = -98765.123456789;
    const char *format = "%.6f!%.9f Hello, World %.6f!%.9f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_9
    const double input_double = -98765.123456789;
    const char *format = "%.10f!%.11f Hello, World %.11f!%.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_10
    const double input_double = -12.01234567890123456;
    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//  LONG LONG INT OVERFLAW


//#test s21_sprintf_test_lf_11
//    const double input_double = -9876543210.01234567890123456;
//    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_0
    const double input_double = -12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_1
    const double input_double = 12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_2
    const double input_double = 12.013;
    const char *format = "%2.4f!%1.5f Hello, World %2.6f!%1.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_3
    const double input_double = 12.013;
    const char *format = "%6.4f!%6.5f Hello, World %6.6f!%6.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_4
    const double input_double = 12.013;
    const char *format = "%10.4f!%16.5f Hello, World %26.6f!%36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_5
    const double input_double = 12.013;
    const char *format = "%-10.4f!%-16.5f Hello, World %-26.6f!%-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_0
    const double input_double = 12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_1
    const double input_double = -12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_2
    const double input_double = -12.013;
    const char *format = "%-+10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_3
    const double input_double = -123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_4
    const double input_double = 123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


/////////////////////////////


#test s21_sprintf_test_lf_width_precision_0
    const double input_double = 123.012345;
    const char *format = "%-+5.7f!%+-5.9f Hello, World %+-4.11f!%+-6.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_precision_1
    const double input_double = 123.012345;
    const char *format = "%5.12f!%5.13f Hello, World %4.11f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_1
    const double input_double = 123.0123456789;
    const char *format = "%5.0f!%5.0f Hello, World %4.0f!%6.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_3
    const double input_double = 123.0123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_4
    const double input_double = 123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_5
    const double input_double = 123.0123456789;
    const char *format = "%25.0f!%25.0f Hello, World %24.0f!%26.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_6
    const double input_double = 123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_7
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-10f!%5.-12f Hello, World %4.-15f!%6.-19f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-0f!%5.-0f Hello, World %4.-0f!%6.-0f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8_1
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-f!%5.-f Hello, World %4.-f!%6.-f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);





#test s21_sprintf_test_lf_width_default_precision_9
    const double input_double = -123.0123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_10
    const double input_double = -123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_11
//    const double input_double = 123.012345678901;
//    const char *format = "%25.-0f!%25.-0f Hello, World %24.-0f!%26.-0f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_12
    const double input_double = -123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// !!! Start of the tests with no flags

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -811704183484516925440.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811704183484516925440.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same width
#test s21_sprintf_test_lf_finchren_053_0
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different width
#test s21_sprintf_test_lf_finchren_053_1
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%111f!%222f Hello, %333f%666f%666f World %444f!%333f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_054
    const double input_double = 340282346638528859811704183484516925440.1234567890;
    const char *format = "%0f!%0f Hello, %0f%f0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_055_0
    const double input_double = 1234567.123;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_055_1
    const double input_double = 1234567.123;
    const char *format = "%2f!%5f Hello, %10f%1f%5f World %7f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_56
    const double input_double = 340282346638528859811704183484516925440.1234567890;
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_057
    const double input_double = 340282346638528859811704183484516925440.7234567890;
    const char *format = "%57f!%65f Hello, %78f%55f%54f World %49f!%99f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_058
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%111f!%222f Hello, %633f%444f%666f World %623f!%616f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left-justify
// !!! Left justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_059
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_060_0
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_060_0
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%-3f!%-9f Hello, %-12f%-23f%-33f World %-43f!%-29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_061
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%-47f!%-47f Hello, %-47f%-47f%-47f World %-47f!%-47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_062
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%-55f!%-55f Hello, %-55f%-55f%-55f World %-55f!%-55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_062
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%-55f!%-65f Hello, %-75f%-49f%-59f World %-99f!%-89f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_063_0
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%-666f!%-666f Hello, %-666f%-666f%-666f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_063_1
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%-111f!%-222f Hello, %-333f%-444f%-666f World %-555f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_064
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_065_0
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_065_1
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-3f!%-13f Hello, %-23f%-3f%-28f World %-1f!%-11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_066
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-29f!%-29f Hello, %-29f%-29f%-29f World %-29f!%-29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_067_0
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-55f!%-55f Hello, %-55f%-55f%-55f World %-55f!%-55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_067_1
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-55f!%-65f Hello, %-57f%-77f%-88f World %-89f!%-99f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - sane values
#test s21_sprintf_test_lf_finchren_068_0
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-666f!%-666f Hello, %-666f%-666f%-666f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - sane values
#test s21_sprintf_test_lf_finchren_068_1
    const double input_double = -811704183484516925440.000000;
    const char *format = "%-111f!%-222f Hello, %-624f%-666f%-646f World %-698f!%-678f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_069
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_070_0
    const double input_double = 0.0;
    const char *format = "%-2f!%-2f Hello, %-2f%-2f%-2f World %-2f!%-2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_070_1
    const double input_double = 0.0;
    const char *format = "%-1f!%-2f Hello, %-1f%-2f%-1f World %-1f!%-1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_071
    const double input_double = 0.0;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_072
    const double input_double = 0.0;
    const char *format = "%-5f!%-7f Hello, %-11f%-8f%-22f World %-33f!%-32f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_073
    const double input_double = 0.0;
    const char *format = "%-666f!%-111f Hello, %-222f%-616f%-143f World %-666f!%-612f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_074
    const double input_double = 1234567890.098;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_075
    const double input_double = 1234567890.038;
    const char *format = "%-3f!%-2f Hello, %-11f%-13f%-7f World %-8f!%-9f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_076
    const double input_double = 1234567890.098;
    const char *format = "%-14f!%-14f Hello, %-14f%-14f%-14f World %-14f!%-14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_077
    const double input_double = 1234567890.018;
    const char *format = "%-25f!%-32f Hello, %-24f%-77f%-88f World %-99f!%-25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_078
    const double input_double = 1234567890.098;
    const char *format = "%-111f!%-222f Hello, %-333f%-666f%-666f World %-234f!%-345f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_079
    const double input_double = 1234567890.048765;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_080
    const double input_double = 1234567890.098765;
    const char *format = "%-2f!%-3f Hello, %-15f%-10f%-9f World %-2f!%-10f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_081
    const double input_double = 1234567890.048765;
    const char *format = "%-17f!%-17f Hello, %-17f%-17f%-17f World %-17f!%-17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_082
    const double input_double = 1234567890.098765;
    const char *format = "%-27f!%-25f Hello, %-35f%-42f%-55f World %-66f!%-77f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_083
    const double input_double = 1234567890.038765;
    const char *format = "%-666f!%-456f Hello, %-111f%-777f%-666f World %-785f!%-985f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_084
    const double input_double = 1234567890.0987654321;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_085
    const double input_double = 1234567890.0487654321;
    const char *format = "%-20f!%-2f Hello, %-14f%-15f%-17f World %-18f!%-9f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_086
    const double input_double = 1234567890.0987654321;
    const char *format = "%-21f!%-21f Hello, %-21f%-21f%-21f World %-21f!%-21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_087
    const double input_double = 1234567890.0587654321;
    const char *format = "%-25f!%-34f Hello, %-35f%-37f%-44f World %-55f!%-67f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_088
    const double input_double = 1234567890.0987654321;
    const char *format = "%-222f!%-123f Hello, %-234f%-344f%-777f World %-686f!%-669f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_089
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_090
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%-7f!%-2f Hello, %-11f%-25f%-21f World %-27f!%-33f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_091
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%-46f!%-46f Hello, %-46f%-46f%-46f World %-46f!%-46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_092
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%-56f!%-77f Hello, %-55f%-78f%-87f World %-95f!%-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_093
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%-666f!%-466f Hello, %-111%-666f%-666f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with max value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_094
    const double input_double = 340282346638528859811704183484516925440.1234567890;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_095
    const double input_double = 340282346638528859811704183484516925440.7234567890;
    const char *format = "%-2f!%-12f Hello, %-22f%-2f%-24f World %-42f!%-42f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_096
    const double input_double = 340282346638528859811704183484516925440.1234567890);
    const char *format = "%-46f!%-46f Hello, %-46f%-46f%-46f World %-46f!%-46f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_097
    const double input_double = 340282346638528859811704183484516925440.8234567890);
    const char *format = "%-75f!%-58f Hello, %-85f%-95f%-85f World %-75f!%-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_098
    const double input_double = 340282346638528859811704183484516925440.1234567890);
    const char *format = "%-611f!%-655f Hello, %-777f%-888f%-699f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of tests with width only

// !!! Start precision only
// !!! Precision with max negative value
// Test with precision being zero
// More than max negative value
#test s21_sprintf_test_lf_finchren_099
    const double input_double = -340282346638528859811704183484516925440.9234567890);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max negative value
#test s21_sprintf_test_lf_finchren_100
    const double input_double = -340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_101
    const double input_double = -811704183484516925440.7234567890);
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_102
    const double input_double = 0.0);
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_103
    const double input_double = 1234567890.098765);
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max value
#test s21_sprintf_test_lf_finchren_104
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than max value
#test s21_sprintf_test_lf_finchren_105
    const double input_double = 340282346638528859811704183484516925440123.000000123);
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
    
// Test with precision being less than the amount of digits after the dot
// More than max negative value
#test s21_sprintf_test_lf_finchren_106
    const double input_double = -340282346638528859811704183484516925440.4234567890);
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max negative value
#test s21_sprintf_test_lf_finchren_107
    const double input_double = -340282346638528859811704183484516925440.000000);
    const char *format = "%.4f!%.4f Hello, %.4f%.4f%.4f World %.4f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_108
    const double input_double = -811704183484516925440.4234567890);
    const char *format = "%.5f!%.5f Hello, %.5f%.5f%.5f World %.5f!%.5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_109
    const double input_double = 0.000000);
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_110
    const double input_double = 1234567890.1234567890);
    const char *format = "%.1f!%.1f Hello, %.1f%.1f%.1f World %.1f!%.1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max value
#test s21_sprintf_test_lf_finchren_111
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max negative value
#test s21_sprintf_test_lf_finchren_114
    const double input_double = -340282346638528859811704183484516925440.000000);
    const char *format = "%.6f!%.6f Hello, %.6f%.6f%.6f World %.6f!%.6f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_115
    const double input_double = -811704183484516925440.9234567890);
    const char *format = "%.10f!%.10f Hello, %.10f%.10f%.10f World %.10f!%.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_116
    const double input_double = 0.000);
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_117
    const double input_double = 1234567890.7234567890);
    const char *format = "%.10f!%.10f Hello, %.10f%.10f%.10f World %.10f!%.10f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 50 precision
#test s21_sprintf_test_lf_finchren_118
    const double input_double = 1234567890.12345678901234567890123456789012345678901234567890;
    const char *format = "%.50f!%.50f Hello, %.50f%.50f%3.50f5f World %.50f!%.50f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 50 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_119
    const double input_double = 1.72345678901234567890123456789012345678901234567890;
    const char *format = "%.50f!%.50f Hello, %.50f%.50f%.50f World %.50f!%.50f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max value
#test s21_sprintf_test_lf_finchren_120
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%.6f!%.6f Hello, %.6f%.6f%.6f World %.6f!%.6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
// Max negative value
#test s21_sprintf_test_lf_finchren_123
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%.12f!%.12f Hello, %.12f%.12f%.12f World %.12f!%.12f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_124
    const double input_double = -811704183484516925440.5234567890;
    const char *format = "%.20f!%.20f Hello, %.20f%.20f%.20f World %.20f!%.20f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_125
    const double input_double = 0.000;
    const char *format = "%.6f!%.6f Hello, %.6f%.6f%.6f World %.6f!%.6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_126
    const double input_double = 1234567890.1234567890;
    const char *format = "%.20f!%.20f Hello, %.20f%.20f%.20f World %.20f!%.20f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 50 precision
#test s21_sprintf_test_lf_finchren_127
    const double input_double = 1234567890.52345678901234567890123456789012345678901234567890;
    const char *format = "%.60f!%.60f Hello, %.60f%.60f%.60f World %.60f!%.60f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 50 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_128
    const double input_double = 1.12345678901234567890123456789012345678901234567890;
    const char *format = "%.60f!%.60f Hello, %.60f%.60f%.60f World %.60f!%.60f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 1000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

 // Max value
#test s21_sprintf_test_lf_finchren_129
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%.12f!%.12f Hello, %.12f%.12f%.12f World %.12f!%.12f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End precision only

// !!! Start of sign only
// Max negative value
#test s21_sprintf_test_lf_finchren_132
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_134
    const double input_double = -811704183484516925440.1234567890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_135
    const double input_double = 0.000;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%f+f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_135_0
    const double input_double = 1234567890.1234567890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 50 precision
#test s21_sprintf_test_lf_finchren_136
    const double input_double = 1234567890.12345678901234567890123456789012345678901234567890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 50 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_137
    const double input_double = 1.12345678901234567890123456789012345678901234567890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Max value
#test s21_sprintf_test_lf_finchren_138
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of sign only

// !!! Start of sign and width flags together
// !!! Sign with right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_140
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_141
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_142
    const double input_double = 0.0;
    const char *format = "%+47f!%+47f Hello, %+47f%+47f%+47f World %+47f!%+47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_143
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%+55f!%+55f Hello, %+55f%+55f%+55f World %+55f!%+55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_144
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%+666f!%+666f Hello, %+666f%+666f%+666f World %+666f!%+666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sing right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_145
    const double input_double = -811704183484516925440.000000;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_146
    const double input_double = -811704183484516925440.000000;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_147
    const double input_double = -811704183484516925440.000000;
    const char *format = "%+29f!%+29f Hello, %+29f%+29f%+29f World %+29f!%+29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_148
    const double input_double = -811704183484516925440.000000;
    const char *format = "%+55f!%+55f Hello, %+55f%+55f%+55f World %+55f!%+55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_149
    const double input_double = -811704183484516925440.000000;
    const char *format = "%+666f!%+666f Hello, %+666f%+666f%+666f World %+666f!%+666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_150
    const double input_double = 0.0;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_151
    const double input_double = 0.0;
    const char *format = "%+2f!%+2f Hello, %+2f%+2f%+2f World %+2f!%+2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_152
    const double input_double = 0.0;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_153
    const double input_double = 0.0;
    const char *format = "%+5f!%+5f Hello, %+5f%+5f%+5f World %+5f!%+5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_154
    const double input_double = 0.0;
    const char *format = "%+111f!%+222f Hello, %+333f%+666f%+666f World %+666f!%+444f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_155
    const double input_double = 1234567890.028;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_156
    const double input_double = 1234567890.098;
    const char *format = "%+2f!%+2f Hello, %+2f%+2f%+2f World %+2f!%+2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_157
    const double input_double = 1234567890.028;
    const char *format = "%+14f!%+14f Hello, %+14f%+14f%+14f World %+14f!%+14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_158
    const double input_double = 1234567890.098;
    const char *format = "%+27f!%+25f Hello, %+42f%+25f%+25f World %+67f!%+25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

STOPPED HERE

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_159
    const double input_double = 1234567890.028;
    const char *format = "%+111f!%+613f Hello, %+612f%+666f%+123f World %+444f!%+656f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -811704183484516925440.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811704183484516925440.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -811704183484516925440.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811704183484516925440.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -811704183484516925440.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811704183484516925440.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -811704183484516925440.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811704183484516925440.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -811704183484516925440.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811704183484516925440.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -811704183484516925440.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048);
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098);
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028);
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765);
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 1234567890.098765);
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 1234567890.048765);
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1234567890.048765);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1234567890.048765);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1234567890.0487654321);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234567890.0987654321);
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234567890.0387654321);
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 1234567890.0987654321);
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234567890.0487654321);
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1234567890.0287654321);
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287654321);
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_049
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_050_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_050_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%2f!%9f Hello, %11f%25f%35f World %2f!%1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_051
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%46f!%46f Hello, %46f%46f%46f World %46f!%46f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_052_0
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_052_1
    const double input_double = 340282346638528859811704183484516925440.000000);
    const char *format = "%55f!%65f Hello, %75f%55f%45f World %95f!%59f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
