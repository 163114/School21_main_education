#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);



#test s21_sprintf_test_lf_width_default_precision_0
    const double input_double = 123.0123456789;
    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_0
    const double input_double = 12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_1
    const double input_double = -12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2
    const double input_double = -12.0123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2_1
    const double input_double = -12.01234544444449;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_3
    const double input_double = 98765.00123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_4
    const double input_double = 98765.123456789;
    const char *format = "%f!%f Hello, World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_5
    const double input_double = 98765.123456789;
    const char *format = "%.f!%.f Hello, World %.f!%.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_6
    const double input_double = 98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_7
    const double input_double = -98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_8
    const double input_double = -98765.123456789;
    const char *format = "%.6f!%.9f Hello, World %.6f!%.9f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_9
    const double input_double = -98765.123456789;
    const char *format = "%.10f!%.11f Hello, World %.11f!%.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_10
    const double input_double = -12.01234567890123456;
    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//  LONG LONG INT OVERFLAW


//#test s21_sprintf_test_lf_11
//    const double input_double = -9876543210.01234567890123456;
//    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_0
    const double input_double = -12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_1
    const double input_double = 12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_2
    const double input_double = 12.013;
    const char *format = "%2.4f!%1.5f Hello, World %2.6f!%1.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_3
    const double input_double = 12.013;
    const char *format = "%6.4f!%6.5f Hello, World %6.6f!%6.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_4
    const double input_double = 12.013;
    const char *format = "%10.4f!%16.5f Hello, World %26.6f!%36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_5
    const double input_double = 12.013;
    const char *format = "%-10.4f!%-16.5f Hello, World %-26.6f!%-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_0
    const double input_double = 12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_1
    const double input_double = -12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_2
    const double input_double = -12.013;
    const char *format = "%-+10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_3
    const double input_double = -123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_4
    const double input_double = 123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


/////////////////////////////


#test s21_sprintf_test_lf_width_precision_0
    const double input_double = 123.012345;
    const char *format = "%-+5.7f!%+-5.9f Hello, World %+-4.11f!%+-6.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_precision_1
    const double input_double = 123.012345;
    const char *format = "%5.12f!%5.13f Hello, World %4.11f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_1
    const double input_double = 123.0123456789;
    const char *format = "%5.0f!%5.0f Hello, World %4.0f!%6.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_3
    const double input_double = 123.0123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_4
    const double input_double = 123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_5
    const double input_double = 123.0123456789;
    const char *format = "%25.0f!%25.0f Hello, World %24.0f!%26.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_6
    const double input_double = 123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_7
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-10f!%5.-12f Hello, World %4.-15f!%6.-19f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-0f!%5.-0f Hello, World %4.-0f!%6.-0f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8_1
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-f!%5.-f Hello, World %4.-f!%6.-f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);





#test s21_sprintf_test_lf_width_default_precision_9
    const double input_double = -123.0123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_10
    const double input_double = -123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_11
//    const double input_double = 123.012345678901;
//    const char *format = "%25.-0f!%25.-0f Hello, World %24.-0f!%26.-0f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_12
    const double input_double = -123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// !!! Start of the tests with no flags

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Maximum value, test with no precision set
#test s21_sprintf_test_lf_finchren_006
    const double input_double = 340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_007
    const double input_double = 340282346638528859811704183484516925440.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_008
    const double input_double = 340282346638528859811704183484516925440.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// More than maximum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_009
    const double input_double = 3402823466385288598117041834845169254400008999.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minumim value, test with no precision set
#test s21_sprintf_test_lf_finchren_010
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_011
    const double input_double = -340282346638528859811704183484516925440.723456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_012
    const double input_double = -340282346638528859811704183484516925440.12345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Less than minimum value, 50 digits after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_013
    const double input_double = -3402823466385288598117041834845169254400008999.82345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 50 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.52345678901234567890123456789012345678901234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with max negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_020
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_021
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_022
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%47f!%47f Hello, %47f%47f%47f World %47f!%47f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_023
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_023_00
    const double input_double = -340282346638528859811704183484516925440.000000;
    const char *format = "%%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811704183484516925440.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704183484516925440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
