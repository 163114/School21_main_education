
#include <string.h>
#include <stdio.h>
#include <wchar.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_ls_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%ls!%ls Hello, World %ls!%ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//#test s21_sprintf_test_ls_0_1
//    const wchar_t* input_string = L"漢字";
//    const char *format = "%ls!%ls Hello, World %ls!%ls";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
//    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_ls_1
    const wchar_t* input_string = L"Hey";
    const char *format = "%-ls!%-ls Hello, World %-ls!%-ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_2
    const wchar_t* input_string = L"Hey";
    const char *format = "%-+-ls!%-ls Hello, World %-ls!%-ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_width_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%10ls!%10ls Hello, World %15ls!%20ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%.2ls!%.1ls Hello, World %.2ls!%.1ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_1
    const wchar_t* input_string = L"Hey";
    const char *format = "%.0ls!%.0ls Hello, World %.0ls!%.0ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_2
    const wchar_t* input_string = L"Hey";
    const char *format = "%.3ls!%.3ls Hello, World %.3ls!%.3ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_3
    const wchar_t* input_string = L"Hey";
    const char *format = "%.4ls!%.5ls Hello, World %.8ls!%.12ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%3.2ls!%3.2ls Hello, World %3.1ls!%3.1ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_1
    const wchar_t* input_string = L"Hey";
    const char *format = "%-3.2ls!%-3.2ls Hello, World %-3.1ls!%-3.1ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_2
    const wchar_t* input_string = L"Let me help you tie the rope around your neck!";
    const char *format = "%-3.100ls!%-3.200ls Hello, World %-3.100ls!%-3.100ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_3
    const wchar_t* input_string = L"Let me help you tie a rope around your neck!";
    const char *format = "%-3.10ls!%-3.20ls Hello, World %-3.10ls!%-3.10ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_4
    const wchar_t* input_string = L"Let me help you tie a rope around your neck!";
    const char *format = "%-300.10ls!%-300.20ls Hello, World %-300.10ls!%-300.10ls";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_5
    const wchar_t* input_string = L"Let me help you tie a rope around your neck!";
    const char *format = "%300.10ls!%300.20ls Hello, World %300.10ls!%300.10ls";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
