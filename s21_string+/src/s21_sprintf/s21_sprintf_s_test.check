
#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_s_0
    const char* input_string = "Hey";
    const char *format = "%s!%s Hello, World %s!%s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_1
    const char* input_string = "Hey";
    const char *format = "%-s!%-s Hello, World %-s!%-s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_2
    const char* input_string = "Hey";
    const char *format = "%-+-s!%-s Hello, World %-s!%-s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_width_0
    const char* input_string = "Hey";
    const char *format = "%10s!%10s Hello, World %15s!%20s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_0
    const char* input_string = "Hey";
    const char *format = "%.2s!%.1s Hello, World %.2s!%.1s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_1
    const char* input_string = "Hey";
    const char *format = "%.0s!%.0s Hello, World %.0s!%.0s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_2
    const char* input_string = "Hey";
    const char *format = "%.3s!%.3s Hello, World %.3s!%.3s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_3
    const char* input_string = "Hey";
    const char *format = "%.4s!%.5s Hello, World %.8s!%.12s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_0
    const char* input_string = "Hey";
    const char *format = "%3.2s!%3.2s Hello, World %3.1s!%3.1s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_1
    const char* input_string = "Hey";
    const char *format = "%-3.2s!%-3.2s Hello, World %-3.1s!%-3.1s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_2
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%-3.100s!%-3.200s Hello, World %-3.100s!%-3.100s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_3
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%-3.10s!%-3.20s Hello, World %-3.10s!%-3.10s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_4
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%-300.10s!%-300.20s Hello, World %-300.10s!%-300.10s";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_5
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%300.10s!%300.20s Hello, World %300.10s!%300.10s";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
