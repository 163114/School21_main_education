#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

// %c Regular value test
#test s21_sprintf_test1
   const char input = '!';
   const char *format = "Hello, World%c!%c";

   char s21_buffer[100];
   memset(s21_buffer, 0, 100);
   char buffer[100];
   memset(buffer, 0, 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input, input);
   const int result = sprintf(buffer, format, input, input);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %c Test with a few of char variables
#test s21_sprintf_test2
   const char first_input = '!';
   const char second_input = '?';
   const char *format = "%c%c%cHello, World%c!%c%c";

   char s21_buffer[100];
   memset(s21_buffer, 0, 100);
   char buffer[100];
   memset(buffer, 0, 100);

   const int s21_result = s21_sprintf(s21_buffer, format, first_input, first_input, first_input, second_input, second_input, second_input);
   const int result = sprintf(buffer, format, first_input, first_input, first_input, second_input, second_input, second_input);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %c Try to print out %c as a %d value
#test s21_sprintf_test3
   const char input = '!';
   const char *format = "Hello, World%d%d%d";

   char s21_buffer[100];
   memset(s21_buffer, 0, 100);
   char buffer[100];
   memset(buffer, 0, 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input, input, input);
   const int result = sprintf(buffer, format, input, input, input);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %c %d Try to print both %c and %d
#test s21_sprintf_test4
   const char input_char = '!';
   const int input_int = 15;
   const char *format = "Hello, World%c%c%c %d%d%d";

   char s21_buffer[100];
   memset(s21_buffer, 0, 100);
   char buffer[100];
   memset(buffer, 0, 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Minimum value test
#test s21_sprintf_test5
    const int input_int = 0;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 'a', 100);
    char buffer[100];
    memset(buffer, 'a', 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test5_non_zero
   const int input_int = 1;
   const char *format = "%d%d Hello, World %d%d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test5001
   const int input_int = -12;
   const char *format = "%5d%5d Hello, World %5d%5d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

