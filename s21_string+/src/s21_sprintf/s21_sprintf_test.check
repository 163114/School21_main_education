#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

// %% Single percent sign test
#test s21_sprintf_percent_test01
    const char percent = '%';
    const char *format = "%%c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %% Multiple percent sign test
#test s21_sprintf_percent_test02
    const char percent = '%';
    const char *format = "%%c%%%c%%%%c%%%%%c%%%%%%c";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, percent, percent, percent, percent, percent);
    const int result = sprintf(buffer, format, percent, percent, percent, percent, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %% Multiple percent sign test with string inbetween
#test s21_sprintf_percent_test03
    const char percent = '%';
    const char *format = "%%c%%%c%%%%c%%%%%c%%%%%%c Hello world %%c%%%c%%%%c%%%%%c%%%%%%c Hello world %%c%%%c%%%%c%%%%%c%%%%%%c";

    char s21_buffer[300];
    memset(s21_buffer, 0, 300);
    char buffer[300];
    memset(buffer, 0, 300);

    const int s21_result = s21_sprintf(s21_buffer, format, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent);
    const int result = sprintf(buffer, format, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test04
    const char misc_char = '@';
    const char *format = "%%c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, misc_char);
    const int result = sprintf(buffer, format, misc_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test05
    const char *format = "%@!%(%)%{%}%%==";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test06
    const char *format = "%^%$%^&$#%@%!1234566543%{dfghjdf%±";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test07
    const char *format = "%%%@!12345665()[]{}{{***43dfghjdf";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test08
    const char *format = "р%%о%л%д%%@%!%%2345665()[вавава]{привет мир}{{***43вававаdfghjdf";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Regular value test
#test s21_sprintf_c_specifier_test01
    const char input = '!';
    const char *format = "Hello, World%c!%c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input, input);
    const int result = sprintf(buffer, format, input, input);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
 
// %c Test with a few of char variables
#test s21_sprintf_c_specifier_test02
    const char first_input = '!';
    const char second_input = '?';
    const char *format = "%c%c%cHello, World%c!%c%c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input, first_input, first_input, second_input, second_input, second_input);
    const int result = sprintf(buffer, format, first_input, first_input, first_input, second_input, second_input, second_input);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Try to print out %c as a %d value
#test s21_sprintf_c_specifier_test03
    const char input = '!';
    const char *format = "Hello, World%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input, input, input);
    const int result = sprintf(buffer, format, input, input, input);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c %d Try to print both %c and %d
#test s21_sprintf_c_specifier_test04
    const char input_char = '!';
    const int input_int = 15;
    const char *format = "Hello, World%c%c%c %d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c %d Try to print both %c and %d
#test s21_sprintf_c_specifier_test05
    const char input_char = '!';
    const int input_int = 15;
    const char *format = "Hello, World%c%c%c %d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Right-justify flag test - single value is at the end of the string
#test s21_sprintf_c_specifier_test06
    const char input_char = '!';
    const char *format = "Hello, World%3c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_char);
    const int result = sprintf(buffer, format, input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Right-justify flag test - multiple values is at the end of the string, in the middle and at the start
#test s21_sprintf_c_specifier_test07
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "%3c%3c%3c Hello,%3cWorld%3c%3c%3c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Right-justify flag test - multiple values is at the end of the string, in the middle and at the start with two spaces before and after the variable
#test s21_sprintf_c_specifier_test08
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %3c  %3c  %3c  Hello,  %3c  World  %3c  %3c  %3c  ";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Left-justify flag test - single value is at the end of the string and at the begging
#test s21_sprintf_c_specifier_test09
    const char first_input_char = '>';
    const char second_input_char = '!';
    const char *format = "%-3c Hello, World%-3c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, second_input_char);
    const int result = sprintf(buffer, format, first_input_char, second_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Left-justify flag test - multiple values is at the end of the string, in the middle and at the start
#test s21_sprintf_c_specifier_test10
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "%-3c%-3c%-3c Hello,%-3cWorld%-3c%-3c%-3c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Left-justify flag test - multiple values is at the end of the string, in the middle and at the start with two spaces before and after the variable
#test s21_sprintf_c_specifier_test11
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %-3c  %-3c  %-3c  Hello,  %-3c  World  %-3c  %-3c  %-3c  ";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Right-justify flag test double-digit values - multiple values is at the end of the string, in the middle and at the start with two spaces before and after the variable
#test s21_sprintf_c_specifier_test12
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %11c  %22c  %33c  Hello,  %55c  World  %33c  %22c  %11c  ";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Left-justify flag test double-digit values - multiple values is at the end of the string, in the middle and at the start with two spaces before and after the variable
#test s21_sprintf_cspecifier_test13
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %-11c  %-22c  %-33c  Hello,  %-55c  World  %-33c  %-22c  %-11c  ";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, first_input_char, first_input_char, second_input_char, third_input_char, third_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Right-justify flag minimum value multiple variables
#test s21_sprintf_c_specifier_test14
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %1c Hello,%1cWorld %1c";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, second_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, second_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Left-justify flag minimum value multiple variables
#test s21_sprintf_c_specifier_test15
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %-1c Hello,%-1cWorld %-1c";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, second_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, second_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Right-justify flag big value multiple variables
#test s21_sprintf_c_specifier_test16
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %111c Hello,%111cWorld %111c";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, second_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, second_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c Left-justify flag big value multiple variables
#test s21_sprintf_c_specifier_test17
    const char first_input_char = '>';
    const char second_input_char = '_';
    const char third_input_char = '!';
    const char *format = "  %-111c Hello,%-111cWorld %-111c";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input_char, second_input_char, third_input_char);
    const int result = sprintf(buffer, format, first_input_char, second_input_char, third_input_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Minimum value test
#test s21_sprintf_d_specifier_test01
    const int input_int = 0;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Maximum range of int test
#test s21_sprintf_d_specifier_test02
    const int input_int = 2147483647;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// DECIMAL Maximum negative value test
#test s21_sprintf_d_specifier_test03
    const int input_int = -2147483647;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Normal value test
#test s21_sprintf_d_specifier_test04
    const int input_int = 47483648;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// DECIMAL Normal negative value test
#test s21_sprintf_d_specifier_test05
    const int input_int = -47483648;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Normal value test - a lot of variables
#test s21_sprintf_d_specifier_test06
    const int input_int = 947483648;
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Abnormal value - zero in the begging of the number
#test s21_sprintf_d_specifier_test07
    const int input_int = 012;
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Abnormal value - octal value passed to the function
#test s21_sprintf_d_specifier_test08
    const int input_int = 052; // 42 in decial
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Abnormal value - big octal value passed to the function
#test s21_sprintf_d_specifier_test09
    const int input_int = 02426567; // 666999 in decial
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Abnormal value - hexadecimal value passed to the function
#test s21_sprintf_d_specifier_test10
    const int input_int = 0x2A; // 42 in decial
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Abnormal value - big hexadecimal value passed to the function
#test s21_sprintf_d_specifier_test11
    const int input_int = 0xA2D77; // 666999 in decial
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Regular value - right-justify flag test
#test s21_sprintf_d_specifier_test12
   const int input_int = 12;
   const char *format = "%5d%5d Hello, World %5d%5d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - right-justify flag test
#test s21_sprintf_d_specifier_test13
   const int input_int = -12;
   const char *format = "%5d%5d Hello, World %5d%5d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big negative value - right-justify flag test
#test s21_sprintf_d_specifier_test14
   const int input_int = -1234567;
   const char *format = "%5d%5d Hello, World %5d%5d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big negative value - right-justify flag test with different width
#test s21_sprintf_d_specifier_test15
   const int input_int = -1234567;
   const char *format = "%15d%5d Hello, World %51d%5d";

   char s21_buffer[300];
   memset(s21_buffer, 'a', 300);
   char buffer[300];
   memset(buffer, 'a', 300);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - left-justify flag test
#test s21_sprintf_d_specifier_test16
   const int input_int = -12;
   const char *format = "%-5d%-5d Hello, World %-5d%-5d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - left-justify flag test with different width
#test s21_sprintf_d_specifier_test17
   const int input_int = -12;
   const char *format = "%-5d%-10d%-15d Hello, World %-5d%-10d%-15d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_d_specifier_test18
   const int input_int = -12;
   const char *format = "%-+3d%-+5d Hello, World %-+7d%-+10d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_d_specifier_test19
   const int input_int = -123456789;
   const char *format = "%-+5d%-+5d Hello, World %-+50d%-+50d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_d_specifier_test20
   const int input_int = 123456789;
   const char *format = "%-+5d%-+5d Hello, World %-+50d%-+50d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Normal value - precision test
#test s21_sprintf_d_specifier_test21
   const int input_int = 12;
   const char *format = "%.5d!%.5d Hello, World %.5d!%.5d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Normal value - precision test (two-digit number)
#test s21_sprintf_d_specifier_test22
   const int input_int = 12345;
   const char *format = "%.15d!%.15d Hello, World %.15d!%.15d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Normal value - precision test with different precision
#test s21_sprintf_d_specifier_test23
   const int input_int = 12345;
   const char *format = "%.1d!%.3d Hello, World %.5d!%.15d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - precision test with same values
#test s21_sprintf_d_specifier_test24
   const int input_int = -12345;
   const char *format = "%.7d!%.7d Hello, World %.7d!%.7d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big negative value - precision test with same values
#test s21_sprintf_d_specifier_test25
   const int input_int = -123456789;
   const char *format = "%.7d!%.7d Hello, World %.7d!%.7d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big negative value - precision test with different values
#test s21_sprintf_d_specifier_test26
   const int input_int = -1234567890;
   const char *format = "%.7d!%.17d Hello, World %.27d!%.37d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Regular value - width and precision test
#test s21_sprintf_d_specifier_test27
   const int input_int = 12;
   const char *format = "%11.2d!%9.2d Hello, World %7.2d!%5.2d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - width and precision test
#test s21_sprintf_d_specifier_test28
   const int input_int = -12345;
   const char *format = "%11.2d!%9.2d Hello, World %7.2d!%5.2d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - width and precision test - zero precision
#test s21_sprintf_d_specifier_test29
   const int input_int = -12345;
   const char *format = "%11.0d!%9.0d Hello, World %7.0d!%5.0d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Regular value - width and precision test - zero precision
#test s21_sprintf_d_specifier_test30
   const int input_int = 123;
   const char *format = "%11.0d!%9.0d Hello, World %7.0d!%5.0d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Regular value - width and precision test - different width and different precision
#test s21_sprintf_d_specifier_test31
   const int input_int = 12;
   const char *format = "%11.12d!%9.10d Hello, World %5.10d!%10.5d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Negative value - width and precision test - different width and different precision
#test s21_sprintf_d_specifier_test32
   const int input_int = -12;
   const char *format = "%11.12d!%9.10d Hello, World %5.10d!%10.5d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %d Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_d_specifier_test33
   const int input_int = 123456;
   const char *format = "%4.5d!%7.8d Hello, World %5.10d!%10.5d";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int
#test s21_sprintf_i_specifier_test01
    const int input_int = 0x7FFFFFFF;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int
#test s21_sprintf_i_specifier_test02
    const int input_int = 0x723100;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int
#test s21_sprintf_i_specifier_test03
    const int input_int = -0x7FFFFFFF;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int
#test s21_sprintf_i_specifier_test04
    const int input_int = 017777777777;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int
#test s21_sprintf_i_specifier_test05
    const int input_int = 034430377;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int
#test s21_sprintf_i_specifier_test06
    const int input_int = -017777777777;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test
#test s21_sprintf_i_specifier_test07
    const int input_int = 2147483647;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test
#test s21_sprintf_i_specifier_test08
    const int input_int = -2147483647;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test
#test s21_sprintf_i_specifier_test09
    const int input_int = 7483647;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_i_specifier_test10
    const int input_int = 0x7FFFFFFF;
    const char *format = "+20.30%+9.5i%+-30.15i%-5.10i Hello, World %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 0, 1000);
    char buffer[1000];
    memset(buffer, 0, 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_i_specifier_test11
    const int input_int = 0x723100;
    const char *format = "+20.30%+9.5i%+-30.15i%-5.10i Hello, World %-50.25i%-50.25i%+0.0i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_i_specifier_test12
    const int input_int = -0x7FFFFFFF;
    const char *format = "+20.30%+9.5i%+-30.15i%-5.10i Hello, World %-50.25i%-50.25i%+0.0i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_i_specifier_test13
    const int input_int = 017777777777;
    const char *format = "+20.30%+9.5i%+-30.15i%-5.10i Hello, World %-50.25i%-50.25i%+0.0i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_i_specifier_test14
    const int input_int = 034430377;
    const char *format = "+20.30%+9.5i%+-30.15i%-5.10i Hello, World %-50.25i%-50.25i%+0.0i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_i_specifier_test15
    const int input_int = -017777777777;
    const char *format = "+20.30%+9.5i%+-30.15i%-5.10i Hello, World %-50.25i%-50.25i%+0.0i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular value - right-justify flag test
#test s21_sprintf_i_specifier_test16
   const int input_int = 12;
   const char *format = "%5i%5i Hello, World %5i%5i";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_i_specifier_test17
   const int input_int = -12;
   const char *format = "%5i%5i Hello, World %5i%5i";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test
#test s21_sprintf_i_specifier_test18
   const int input_int = -1234567;
   const char *format = "%i%5i Hello, World %5i%5i";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_i_specifier_test19
   const int input_int = -1234567;
   const char *format = "%15i%5i Hello, World %51i%5i";

   char s21_buffer[300];
   memset(s21_buffer, 'a', 300);
   char buffer[300];
   memset(buffer, 'a', 300);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test
#test s21_sprintf_i_specifier_test20
   const int input_int = -12;
   const char *format = "%-5i%-5i Hello, World %-5i%-5i";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width
#test s21_sprintf_i_specifier_test21
   const int input_int = -12;
   const char *format = "%-5d%-10d%-15d Hello, World %-5d%-10d%-15d";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_i_specifier_test22
   const int input_int = -12;
   const char *format = "%-+3i%-+5i Hello, World %-+7i%-+10i";

   char s21_buffer[100];
   memset(s21_buffer, 'a', 100);
   char buffer[100];
   memset(buffer, 'a', 100);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_i_specifier_test23
   const int input_int = -123456789;
   const char *format = "%-+5i%-+5i Hello, World %-+50i%-+50i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_i_specifier_test24
   const int input_int = 123456789;
   const char *format = "%-+5i%-+5i Hello, World %-+50i%-+50i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test
#test s21_sprintf_i_specifier_test25
   const int input_int = 12;
   const char *format = "%.5i!%.5i Hello, World %.5i!%.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test (two-digit number)
#test s21_sprintf_i_specifier_test26
   const int input_int = 12345;
   const char *format = "%.15i!%.15i Hello, World %.15i!%.15i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test with different precision
#test s21_sprintf_i_specifier_test27
   const int input_int = 12345;
   const char *format = "%.1i!%.3i Hello, World %.id!%.15i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - precision test with same values
#test s21_sprintf_i_specifier_test28
   const int input_int = -12345;
   const char *format = "%.7i!%.7i Hello, World %.7i!%.7i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with same values
#test s21_sprintf_i_specifier_test29
   const int input_int = -123456789;
   const char *format = "%.7i!%.7i Hello, World %.7i!%.7i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with different values
#test s21_sprintf_i_specifier_test30
   const int input_int = -1234567890;
   const char *format = "%.7i!%.17i Hello, World %.27i!%.37i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test
#test s21_sprintf_i_specifier_test31
   const int input_int = 12;
   const char *format = "%11.2i!%9.2i Hello, World %7.2i!%5.2i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test
#test s21_sprintf_i_specifier_test32
   const int input_int = -12345;
   const char *format = "%11.2i!%9.2i Hello, World %7.2i!%5.2i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - zero precision
#test s21_sprintf_i_specifier_test33
   const int input_int = -12345;
   const char *format = "%11.0i!%9.0i Hello, World %7.0i!%5.0i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - zero precision
#test s21_sprintf_i_specifier_test34
   const int input_int = 123;
   const char *format = "%11.0i!%9.0i Hello, World %7.0i!%5.0i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_i_specifier_test35
   const int input_int = 12;
   const char *format = "%11.12i!%9.10i Hello, World %5.10i!%10.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_i_specifier_test36
   const int input_int = -12;
   const char *format = "%11.12i!%9.10i Hello, World %5.10i!%10.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_i_specifier_test37
   const int input_int = 123456;
   const char *format = "%4.5i!%7.8i Hello, World %5.10i!%10.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sign with regular int test
#test s21_sprintf_i_specifier_test38
   const int input_int = 123456;
   const char *format = "%+i!%+i Hello, World %+i!%+i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_i_specifier_test39
    const int input_int = 0x7FFFFFFF;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_i_specifier_test40
    const int input_int = 0x723100;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_i_specifier_test41
    const int input_int = -0x7FFFFFFF;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum value of octal int
#test s21_sprintf_i_specifier_test42
    const int input_int = 017777777777;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of octal int
#test s21_sprintf_i_specifier_test43
    const int input_int = 034430377;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of octal int
#test s21_sprintf_i_specifier_test44
    const int input_int = -017777777777;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum int test
#test s21_sprintf_i_specifier_test45
    const int input_int = 2147483647;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum int test
#test s21_sprintf_i_specifier_test46
    const int input_int = -2147483647;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_i_specifier_test47
    const int input_int = 0x7FFFFFFF;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_i_specifier_test48
    const int input_int = 0x723100;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_i_specifier_test49
    const int input_int = -0x7FFFFFFF;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_i_specifier_test50
    const int input_int = 017777777777;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_i_specifier_test51
    const int input_int = 034430377;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_i_specifier_test52
    const int input_int = -017777777777;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test - left-justified with no value
#test s21_sprintf_i_specifier_test53
    const int input_int = 2147483647;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test - left-justified with no value
#test s21_sprintf_i_specifier_test54
    const int input_int = -2147483647;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - left-justified with no value
#test s21_sprintf_i_specifier_test55
    const int input_int = 7483647;
    const char *format = "%-i%-i%-i Hello, World %-i%-i%-i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_i_specifier_test56
    const int input_int = 7483647;
    const char *format = "%+-3i%-7i%-10i Hello, World %+-3.3i%-7.7i%-10.10i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_i_specifier_test57
    const int input_int = 7483647;
    const char *format = "%+-.3i%-.7i%-.10i Hello, World %+-3.i%-7.i%-10.i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - all 6 decimal places
#test s21_sprintf_test21
    const double input_int = 748364.123456;
    const char *format = " Hello, World %f";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - 3 decimal places
#test s21_sprintf_test22
    const double input_int = 748364.123;
    const char *format = " Hello, World %f";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - 0 decimal places
#test s21_sprintf_test23
    const double input_int = 748364;
    const char *format = " Hello, World %f";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - multiple values in the begging and at the end of the string
#test s21_sprintf_test24
    const double input_int = 748364.123;
    const char *format = "test %f %f %f Hello, World %f %f %f test";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - multiple values in the begging and at the end of the string with string in between
#test s21_sprintf_test25
    const double input_int = 748364.123;
    const char *format = "test %f test %f test %f Hello, World %f test %f test %f test";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - multiple values in the row
#test s21_sprintf_test26
    const double input_int = 748364.123;
    const char *format = "test %f%f%f Hello, World %f%f%f test";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Regular value test
#test s21_sprintf_test27
    char test_string[100] = "hello world";
    const char *format = "%s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string);
    const int result = sprintf(buffer, format, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Regular value test - duplicate in a row
#test s21_sprintf_test28
    char test_string[100] = "hello world";
    const char *format = "%s %s %s hello %s %s %s world %s %s %s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    const int result = sprintf(buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Regular value test - duplicate in a row
#test s21_sprintf_test29
    char test_string[100] = "hello world";
    const char *format = "%s %s %s hello %s %s %s world %s %s %s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    const int result = sprintf(buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Empty string test
#test s21_sprintf_test30
    char test_string[100] = "\0";
    const char *format = "%s %s %s hello %s %s %s world %s %s %s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    const int result = sprintf(buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test
#test s21_sprintf_test31
    const unsigned int input_int = 748364;
    const char *format = " Hello, World %u";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test - multiple u_specifiers in a row
#test s21_sprintf_test32
    const unsigned int input_int = 748364;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test - multiple u_specifiers in a row with different values
#test s21_sprintf_test33
    const unsigned int input_unsigned_int_first = 748364;
    const unsigned int input_unsigned_int_second = 12345;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first);
    const int result = sprintf(buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test - tripple u_specifiers in a row with different values
#test s21_sprintf_test34
    const unsigned int input_unsigned_int_first = 748364;
    const unsigned int input_unsigned_int_second = 12345;
    const unsigned int input_unsigned_int_third = 1337;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first);
    const int result = sprintf(buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Minimum value test
#test s21_sprintf_test35
    const unsigned int input_unsigned_int = 0;
    const char *format = "Hello, World %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Minimum value test - multiple values
#test s21_sprintf_test36
    const unsigned int input_unsigned_int = 0;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Maximum value test
#test s21_sprintf_test37
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "Hello, World %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Maximum value test - multiple values
#test s21_sprintf_test38
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Abnormal value - negative value
#test s21_sprintf_test39
    const unsigned int input_unsigned_int = -3;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Abnormal value - bigger than max range value
#test s21_sprintf_test40
    const long int input_unsigned_int = 8589934590;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %6 - Right-justify flag
#test s21_sprintf_test41
    const char *format = "%6 Hello, %6 World";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %42 - Right-justify flag
#test s21_sprintf_test43
    const char *format = "%42 Hello, %42 World %42";

    char s21_buffer[300];
    memset(s21_buffer, 0, 300);
    char buffer[300];
    memset(buffer, 0, 300);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %42 - Right-justify flag with %d variable
#test s21_sprintf_test44
    const int input_int = 42;
    const char *format = "%42d Hello, %42d World %42d";

    char s21_buffer[300];
    memset(s21_buffer, 0, 300);
    char buffer[300];
    memset(buffer, 0, 300);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %42 - Right-justify flag with %d and %c variable
#test s21_sprintf_test45
    const int input_int = 42;
    const char input_char = 's';
    const char *format = "%42d Hello, %42c World %42d";

    char s21_buffer[300];
    memset(s21_buffer, 0, 300);
    char buffer[300];
    memset(buffer, 0, 300);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_char, input_int);
    const int result = sprintf(buffer, format, input_int, input_char, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %42 - Right-justify flag with %d and %c variable. Minimum value
#test s21_sprintf_test46
    const int input_int = 42;
    const char input_char = 's';
    const char *format = "%1d Hello, %1c World %1d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_char, input_int);
    const int result = sprintf(buffer, format, input_int, input_char, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %42 - Right-justify flag with %d and %c variable. Big value
#test s21_sprintf_test47
    const int input_int = 42;
    const char input_char = 's';
    const char *format = "%100d Hello, %100c World %100d";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_char, input_int);
    const int result = sprintf(buffer, format, input_int, input_char, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
