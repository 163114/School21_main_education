#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);


// OVERFLAW
//#test s21_sprintf_test_lf_range_0
//    const double input_double = 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.0; // 100 digits before '.'
//    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);
//
//
//#test s21_sprintf_test_lf_range_1
//    const double input_double = -1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.0; // 100 digits before '.'
//    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_00
    const double input_double = 123.0123456789;
    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_0
    const double input_double = 12.0;
    const char *format = "%+ f!% f Hello, World % f!% 12f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_1
    const double input_double = 12.0;
    const char *format = "%+f!%f Hello, World %  f!% 12f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_2
    const double input_double = 12.0;
    const char *format = "% f!%  f Hello, World %   123     f!%   f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_3
    const double input_double = 12.0;
    const char *format = "% f!%  f Hello, World %   123.7 +-   -+    f!%   f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_0
    const double input_double = 12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_1
    const double input_double = -12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2
    const double input_double = -12.0123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2_1
    const double input_double = -12.01234544444449;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_3
    const double input_double = 98765.00123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_4
    const double input_double = 98765.123456789;
    const char *format = "%f!%f Hello, World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_5
    const double input_double = 98765.123456789;
    const char *format = "%.f!%.f Hello, World %.f!%.f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_6
    const double input_double = 98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_lf_7
    const double input_double = -98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_lf_8
    const double input_double = -98765.123456789;
    const char *format = "%.6f!%.9f Hello, World %.6f!%.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_9
    const double input_double = -98765.123456789;
    const char *format = "%.10f!%.11f Hello, World %.11f!%.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_10
    const double input_double = -12.01234567890123456;
    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//  LONG LONG INT OVERFLAW


//#test s21_sprintf_test_lf_11
//    const double input_double = -9876543210.01234567890123456;
//    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_0
    const double input_double = -12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_1
    const double input_double = 12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_2
    const double input_double = 12.013;
    const char *format = "%2.4f!%1.5f Hello, World %2.6f!%1.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_3
    const double input_double = 12.013;
    const char *format = "%6.4f!%6.5f Hello, World %6.6f!%6.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_4
    const double input_double = 12.013;
    const char *format = "%10.4f!%16.5f Hello, World %26.6f!%36.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_5
    const double input_double = 12.013;
    const char *format = "%-10.4f!%-16.5f Hello, World %-26.6f!%-36.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_0
    const double input_double = 12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_1
    const double input_double = -12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_2
    const double input_double = -12.013;
    const char *format = "%-+10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_3
    const double input_double = -123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_4
    const double input_double = 123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


/////////////////////////////


#test s21_sprintf_test_lf_width_precision_0
    const double input_double = 123.012345;
    const char *format = "%-+5.7f!%+-5.9f Hello, World %+-4.11f!%+-6.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_precision_1
    const double input_double = 123.012345;
    const char *format = "%5.12f!%5.13f Hello, World %4.11f!%6.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_1
    const double input_double = 123.4223456789;
    const char *format = "%5.0f!%5.0f Hello, World %4.0f!%6.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_3
    const double input_double = 123.5123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_4
    const double input_double = 123.723456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_5
    const double input_double = 123.0123456789;
    const char *format = "%25.0f!%25.0f Hello, World %24.0f!%26.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_6
    const double input_double = 123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_7
//    const double input_double = 123.9123456789;
//    const char *format = "%5.-10f!%5.-12f Hello, World %4.-15f!%6.-19f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8
//    const double input_double = 123.8123456789;
//    const char *format = "%5.-0f!%5.-0f Hello, World %4.-0f!%6.-0f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8_1
//    const double input_double = 123.5123456789;
//    const char *format = "%5.-f!%5.-f Hello, World %4.-f!%6.-f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_9
    const double input_double = -123.4123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_10
    const double input_double = -123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_12
    const double input_double = -123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Start of the tests with no flags

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 1234567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 1234567.123456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 10 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.5234567890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -81170413.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -811704185440.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -8117.1234567;
    const char *format = "%29f!%29f Hello, %29f%29f%29f World %29f!%29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -81170418.789456132;
    const char *format = "%55f!%55f Hello, %55f%55f%55f World %55f!%55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -811704183.54789165;
    const char *format = "%35f!%42f Hello, %53f%37f%32f World %40f!%66f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -8117041.54789165;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234567890.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 1234567890.048;
    const char *format = "%14f!%14f Hello, %14f%14f%14f World %14f!%14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 1234567890.098;
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 1234567890.098;
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028;
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 1234567890.098765;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234567890.038765;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 1234567890.038765;
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 234567890.098765;
    const char *format = "%17f!%17f Hello, %17f%17f%17f World %17f!%17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 34567890.048765;
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 4567890.048765;
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 1237890.048765;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1237890.048765;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 1567890.0487654321;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 12347890.0987654321;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 1234590.0987654321;
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234890.0387654321;
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 12345690.0987654321;
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1234890.0487654321;
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 1237890.0287654321;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 1234567890.0287651;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value - more digits after the dot than 6
// Test with width being zero

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_055_0
    const double input_double = 1234567.123;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_055_1
    const double input_double = 1234567.123;
    const char *format = "%2f!%5f Hello, %10f%1f%5f World %7f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left-justify

// !!! Left justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_064
    const double input_double = -811700.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_065_0
    const double input_double = -811704180.000000;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_065_1
    const double input_double = -81170415.000000;
    const char *format = "%-3f!%-13f Hello, %-23f%-3f%-28f World %-1f!%-11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_066
    const double input_double = -8117040.000000;
    const char *format = "%-29f!%-29f Hello, %-29f%-29f%-29f World %-29f!%-29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_067_0
    const double input_double = -811704180.000000;
    const char *format = "%-55f!%-55f Hello, %-55f%-55f%-55f World %-55f!%-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_067_1
    const double input_double = -8117.000000;
    const char *format = "%-55f!%-65f Hello, %-57f%-77f%-88f World %-89f!%-99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - sane values
#test s21_sprintf_test_lf_finchren_068_0
    const double input_double = -8117041.000000;
    const char *format = "%-666f!%-666f Hello, %-666f%-666f%-666f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_068_1
    const double input_double = -811704183.000000;
    const char *format = "%-111f!%-222f Hello, %-624f%-666f%-646f World %-698f!%-678f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_069
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_070_0
    const double input_double = 0.0;
    const char *format = "%-2f!%-2f Hello, %-2f%-2f%-2f World %-2f!%-2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_070_1
    const double input_double = 0.0;
    const char *format = "%-1f!%-2f Hello, %-1f%-2f%-1f World %-1f!%-1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_071
    const double input_double = 0.0;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_072
    const double input_double = 0.0;
    const char *format = "%-5f!%-7f Hello, %-11f%-8f%-22f World %-33f!%-32f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_073
    const double input_double = 0.0;
    const char *format = "%-666f!%-111f Hello, %-222f%-616f%-143f World %-666f!%-612f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_074
    const double input_double = 1234567890.098;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_075
    const double input_double = 1234567890.038;
    const char *format = "%-3f!%-2f Hello, %-11f%-13f%-7f World %-8f!%-9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_076
    const double input_double = 1234567890.098;
    const char *format = "%-14f!%-14f Hello, %-14f%-14f%-14f World %-14f!%-14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_077
    const double input_double = 1234567890.018;
    const char *format = "%-25f!%-32f Hello, %-24f%-77f%-88f World %-99f!%-25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_078
    const double input_double = 1234567890.098;
    const char *format = "%-111f!%-222f Hello, %-333f%-666f%-666f World %-234f!%-345f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_079
    const double input_double = 1234567890.048765;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_080
    const double input_double = 1234567890.098765;
    const char *format = "%-2f!%-3f Hello, %-15f%-10f%-9f World %-2f!%-10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_081
    const double input_double = 1234567890.048765;
    const char *format = "%-17f!%-17f Hello, %-17f%-17f%-17f World %-17f!%-17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_082
    const double input_double = 1234567890.098765;
    const char *format = "%-27f!%-25f Hello, %-35f%-42f%-55f World %-66f!%-77f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_083
    const double input_double = 1234567890.038765;
    const char *format = "%-666f!%-456f Hello, %-111f%-777f%-666f World %-785f!%-985f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_084
    const double input_double = 1234890.0987654321;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_085
    const double input_double = 1234590.0487654321;
    const char *format = "%-20f!%-2f Hello, %-14f%-15f%-17f World %-18f!%-9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_086
    const double input_double = 1234567890.0987654321;
    const char *format = "%-21f!%-21f Hello, %-21f%-21f%-21f World %-21f!%-21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_087
    const double input_double = 1234567.0587654321;
    const char *format = "%-25f!%-34f Hello, %-35f%-37f%-44f World %-55f!%-67f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_088
    const double input_double = 1234890.0987654321;
    const char *format = "%-222f!%-123f Hello, %-234f%-344f%-777f World %-686f!%-669f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_098
    const double input_double = 3402823.1234567890;
    const char *format = "%-611f!%-655f Hello, %-777f%-888f%-699f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of tests with width only

// !!! Start precision only
// !!! Precision with max negative value
// Test with precision being zero

// Regular negative value
#test s21_sprintf_test_lf_finchren_101
    const double input_double = -8117041.7234567890;
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_102
    const double input_double = 0.0;
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_103
    const double input_double = 1234567890.098765;
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
    
// Test with precision being less than the amount of digits after the dot

// Regular negative value
#test s21_sprintf_test_lf_finchren_108
    const double input_double = -811783.4234567890;
    const char *format = "%.5f!%.5f Hello, %.5f%.5f%.5f World %.5f!%.5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_109
    const double input_double = 0.000000;
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_110
    const double input_double = 123490.1234567890;
    const char *format = "%.1f!%.1f Hello, %.1f%.1f%.1f World %.1f!%.1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_115
    const double input_double = -8117041.9567890;
    const char *format = "%.10f!%.10f Hello, %.10f%.10f%.10f World %.10f!%.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_116
    const double input_double = 0.000;
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_117
    const double input_double = 1234560.7234567890;
    const char *format = "%.10f!%.10f Hello, %.10f%.10f%.10f World %.10f!%.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision
#test s21_sprintf_test_lf_finchren_118
    const double input_double = 1234890.1234567890;
    const char *format = "%.50f!%.50f Hello, %.50f%.50f%3.50f5f World %.50f!%.50f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_119
    const double input_double = 1.1234567890;
    const char *format = "%.50f!%.50f Hello, %.50f%.50f%.50f World %.50f!%.50f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Test with precision being more than the amount of digits after the dot

// Regular negative value
#test s21_sprintf_test_lf_finchren_124
    const double input_double = -811704.5234567890;
    const char *format = "%.20f!%.20f Hello, %.20f%.20f%.20f World %.20f!%.20f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_125
    const double input_double = 0.000;
    const char *format = "%.6f!%.6f Hello, %.6f%.6f%.6f World %.6f!%.6f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_126
    const double input_double = 1237890.12567890;
    const char *format = "%.20f!%.20f Hello, %.20f%.20f%.20f World %.20f!%.20f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision
#test s21_sprintf_test_lf_finchren_127
    const double input_double = 14567890.1234567890;
    const char *format = "%.60f!%.60f Hello, %.60f%.60f%.60f World %.60f!%.60f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_128
    const double input_double = 1.1234567890;
    const char *format = "%.60f!%.60f Hello, %.60f%.60f%.60f World %.60f!%.60f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End precision only

// !!! Start of sign only

// Regular negative value
#test s21_sprintf_test_lf_finchren_134
    const double input_double = -8117041.1234567;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_135
    const double input_double = 0.000;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%f+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_135_0
    const double input_double = 1234567890.12347890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision
#test s21_sprintf_test_lf_finchren_136
    const double input_double = 1234567890.12345690;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_137
    const double input_double = 1.1234567890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sing right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_145
    const double input_double = -8117040.000000;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_146
    const double input_double = -8117040.000000;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_147
    const double input_double = -8117040.000000;
    const char *format = "%+29f!%+29f Hello, %+29f%+29f%+29f World %+29f!%+29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_148
    const double input_double = -8117040.000000;
    const char *format = "%+55f!%+55f Hello, %+55f%+55f%+55f World %+55f!%+55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_149
    const double input_double = -8117040.000000;
    const char *format = "%+666f!%+666f Hello, %+666f%+666f%+666f World %+666f!%+666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_150
    const double input_double = 0.0;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_151
    const double input_double = 0.0;
    const char *format = "%+2f!%+2f Hello, %+2f%+2f%+2f World %+2f!%+2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_152
    const double input_double = 0.0;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_153
    const double input_double = 0.0;
    const char *format = "%+5f!%+5f Hello, %+5f%+5f%+5f World %+5f!%+5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_154
    const double input_double = 0.0;
    const char *format = "%+111f!%+222f Hello, %+333f%+666f%+666f World %+666f!%+444f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_155
    const double input_double = 1234567890.028;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_156
    const double input_double = 1234567890.098;
    const char *format = "%+2f!%+2f Hello, %+2f%+2f%+2f World %+2f!%+2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_157
    const double input_double = 1234567890.028;
    const char *format = "%+14f!%+14f Hello, %+14f%+14f%+14f World %+14f!%+14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_158
    const double input_double = 1234567890.098;
    const char *format = "%+27f!%+25f Hello, %+42f%+25f%+25f World %+67f!%+25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_159
    const double input_double = 1234567890.028;
    const char *format = "%+111f!%+613f Hello, %+612f%+666f%+123f World %+444f!%+656f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_160
    const double input_double = 1234567890.098765;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_161
    const double input_double = 1234567890.028765;
    const char *format = "%+2f!%+7f Hello, %+10f%+11f%+15f World %+2f!%+4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_162
    const double input_double = 1234567890.098765;
    const char *format = "%+17f!%+17f Hello, %+17f%+17f%+17f World %+17f!%+17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_163
    const double input_double = 1234567890.028765;
    const char *format = "%+25f!%+18f Hello, %+28f%+25f%+29f World %+66f!%+77f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_164
    const double input_double = 1234567890.098765;
    const char *format = "%+123f!%+345f Hello, %+234f%+666f%+343f World %+345f!%+3434f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_165
    const double input_double = 1234567890.07654321;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_166
    const double input_double = 1234567890.02874321;
    const char *format = "%+2f!%+4f Hello, %+17f%+20f%+12f World %+9f!%+17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_167
    const double input_double = 1234567890.09854321;
    const char *format = "%+21f!%+21f Hello, %+21f%+21f%+21f World %+21f!%+21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_168
    const double input_double = 1234567890.02854321;
    const char *format = "%+25f!%+45f Hello, %+35f%+34f%+45f World %+65f!%+45f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_169
    const double input_double = 1234567890.09876321;
    const char *format = "%+123f!%+345f Hello, %+234f%+345f%+634f World %+645f!%+634f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left-justify

// !!! Sign left justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_185
    const double input_double = -8117040.000000;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_186
    const double input_double = -8117040.000000;
    const char *format = "%+-3f!%+-7f Hello, %+-27f%+-13f%+-3f World %+-15f!%+-27f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_187
    const double input_double = -8117040.000000;
    const char *format = "%+-29f!%+-29f Hello, %+-29f%+-29f%+-29f World %+-29f!%+-29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_188
    const double input_double = -8117040.000000;
    const char *format = "%+-75f!%+-55f Hello, %+-45f%+-55f%+-45f World %+-85f!%+-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_189
    const double input_double = -8117040.000000;
    const char *format = "%+-247f!%+-654f Hello, %+-897f%+-254f%+-278f World %+-357f!%+-999f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_190
    const double input_double = 0.0;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_191
    const double input_double = 0.0;
    const char *format = "%+-1f!%+-2f Hello, %+-1f%+-2f%+-1f World %+-2f!%+-1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_192
    const double input_double = 0.0;
    const char *format = "%+-3f!%+-3f Hello, %+-3f%+-3f%+-3f World %+-3f!%+-3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_193
    const double input_double = 0.0;
    const char *format = "%+-7f!%+-9f Hello, %+-5f%+-15f%+-24f World %+-34f!%+-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_194
    const double input_double = 0.0;
    const char *format = "%+-123f!%+-226f Hello, %+-567f%+-789f%+-123f World %+-678f!%+-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_195
    const double input_double = 1234567890.038;
    const char *format = "%++-7f!%++-2f Hello, %++-13f%++-2f%++-11f World %++-7f!%++-4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_196
    const double input_double = 1234567890.038;
    const char *format = "%+-2f!%+-2f Hello, %+-2f%+-2f%+-2f World %+-2f!%+-2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_197
    const double input_double = 1234567890.098;
    const char *format = "%+-14f!%+-14f Hello, %+-14f%+-14f%+-14f World %+-14f!%+-14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_198
    const double input_double = 1234567890.038;
    const char *format = "%+-47f!%+-78f Hello, %+-24f%+-27f%+-15f World %+-77f!%+-99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_199
    const double input_double = 1234567890.098;
    const char *format = "%+-111f!%+-214f Hello, %+-457f%+-654f%+-999f World %+-752f!%+-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_200
    const double input_double = 1234567890.038765;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_201
    const double input_double = 1234567890.098765;
    const char *format = "%+-14f!%+-11f Hello, %+-8f%+-2f%+-9f World %+-1f!%+-2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_202
    const double input_double = 1234567890.038765;
    const char *format = "%+-17f!%+-17f Hello, %+-17f%+-17f%+-17f World %+-17f!%+-17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_203
    const double input_double = 1234567890.098765;
    const char *format = "%+-27f!%+-52f Hello, %+-78f%+-29f%+-45f World %+-27f!%+-99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_204
    const double input_double = 1234567890.038765;
    const char *format = "%+-123f!%+-244f Hello, %+-245f%+-456f%+-789f World %+-678f!%+-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_205
    const double input_double = 1234567890.09654321;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_206
    const double input_double = 1234567890.03874321;
    const char *format = "%+-11f!%+-7f Hello, %+-2f%+-2f%+-15f World %+-2f!%+-20f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_207
    const double input_double = 1234567890.09854321;
    const char *format = "%+-21f!%+-21f Hello, %+-21f%+-21f%+-21f World %+-21f!%+-21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_208
    const double input_double = 1234567890.03876321;
    const char *format = "%+-75f!%+-25f Hello, %+-55f%+-25f%+-25f World %+-35f!%+-77f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_209
    const double input_double = 0.;
    const char *format = "%+-166f!%+-666f Hello, %+-333f%+-999f%+-666f World %+-785f!%+-754f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of sign and width flags together

// !!! Begging of sign and precision together tests

// !!! Sign with precision with zero value
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_231
    const double input_double = 0.0;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_232
    const double input_double = 0.0;
    const char *format = "%+.1f!%+.1f Hello, %+.1f%+.1f%+.1f World %+.1f!%+.1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_233
    const double input_double = 0.0;
    const char *format = "%+.7f!%+.8f Hello, %+.5f%+.9f%+.5f World %+.5f!%+.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 2-digit precision
#test s21_sprintf_test_lf_finchren_234
    const double input_double = 0.0;
    const char *format = "%+.27f!%+.45f Hello, %+.29f%+.26f%+.77f World %+.88f!%+.99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with precision with regular value - less digits after the dot than 6
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_235
    const double input_double = 1234567890.038;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being less than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_236
    const double input_double = 1234567890.098;
    const char *format = "%+.2f!%+.2f Hello, %+.2f%+.2f%+.2f World %+.2f!%+.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_237
    const double input_double = 1234567890.038;
    const char *format = "%+.3f!%+.3f Hello, %+.3f%+.3f%+.3f World %+.3f!%+.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_238
    const double input_double = 1234567890.098;
    const char *format = "%+.5f!%+.5f Hello, %+.5f%+.5f%+.5f World %+.5f!%+.5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 2-digit precision
#test s21_sprintf_test_lf_finchren_239
    const double input_double = 71234567890.038;
    const char *format = "%+.78f!%+.83f Hello, %+.77f%+.14f%+.18f World %+.89f!%+.99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit precision
#test s21_sprintf_test_lf_finchren_240
    const double input_double = 1234567890.098;
    const char *format = "%+.888f!%+.114f Hello, %+.456f%+.114f%+.456f World %+.783f!%+.114f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Precision with regular value
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_241
    const double input_double = 1234567890.098765;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being less than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_242
    const double input_double = 1234567890.038765;
    const char *format = "%+.3f!%+.2f Hello, %+.2f%+.2f%+.4f World %+.5f!%+.1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_243
    const double input_double = 1234567890.8765;
    const char *format = "%+.4f!%+.4f Hello, %+.4f%+.4f%+.4f World %+.4f!%+.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_244
    const double input_double = 1234567890.038765;
    const char *format = "%11f!%9f Hello, %9f%9f%9f World %8f!%7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 2-digit precision
#test s21_sprintf_test_lf_finchren_245
    const double input_double = 1234567890.098765;
    const char *format = "%+.24f!%+.74f Hello, %+.24f%+.24f%+.84f World %+.24f!%+.94f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit precision
#test s21_sprintf_test_lf_finchren_246
    const double input_double = 1234567890.038765;
    const char *format = "%+.443f!%+.243f Hello, %+.743f%+.243f%+.243f World %+.843f!%+.249f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with precision with regular value - more digits after the dot than 6
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_247
    const double input_double = 1234567890.09876521;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being less than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_248
    const double input_double = 1234567890.03876541;
    const char *format = "%+.4f!%+.4f Hello, %+.4f%+.4f%+.4f World %+.4f!%+.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_249
    const double input_double = 1234567890.09876521;
    const char *format = "%+.10f!%+.10f Hello, %+.10f%+.10f%+.10f World %+.10f!%+.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_250
    const double input_double = 1234567890.04654321;
    const char *format = "%+.38f!%+.29f Hello, %+.88f%+.25f%+.55f World %+.75f!%+.85f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit precision
#test s21_sprintf_test_lf_finchren_251
    const double input_double = 1234567890.09876321;
    const char *format = "%+.446f!%+.116f Hello, %+.446f%+.457f%+.776f World %+.886f!%+.116f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of sign and precision together tests

// Precision and width being zero with negative value
#test s21_sprintf_test_lf_finchren_258
    const double input_double = -516925439.37843345;
    const char *format = "%0.0f!%0.0f Hello, %0.0f%0.0f%0.0f World %0.0f!%0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Precision and width being zero with zero
#test s21_sprintf_test_lf_finchren_259
    const double input_double = 0.0;
    const char *format = "%0.0f!%0.0f Hello, %0.0f%0.0f%0.0f World %0.0f!%0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Precision and width being zero with positive value
#test s21_sprintf_test_lf_finchren_260
    const double input_double = 516925439.875893345;
    const char *format = "%0.0f!%0.0f Hello, %0.0f%0.0f%0.0f World %0.0f!%0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_263
    const double input_double = -12346487.2355467865;
    const char *format = "%9.0f!%9.0f Hello, %9.0f%9.0f%9.0f World %9.0f!%9.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_264
    const double input_double = 0.0;
    const char *format = "%1.0f!%1.0f Hello, %1.0f%1.0f%1.0f World %1.0f!%1.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_265
    const double input_double = 12346487.4355467865;
    const char *format = "%8.0f!%8.0f Hello, %8.0f%8.0f%8.0f World %8.0f!%8.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_268
    const double input_double = -12346487.5355467865;
    const char *format = "%21.0f!%21.0f Hello, %21.0f%21.0f%21.0f World %21.0f!%21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_269
    const double input_double = 0.0;
    const char *format = "%15.0f!%15.0f Hello, %15.0f%15.0f%15.0f World %15.0f!%15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_270
    const double input_double = 12346487.2355467865;
    const char *format = "%78.0f!%78.0f Hello, %78.0f%78.0f%78.0f World %78.0f!%78.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_273
    const double input_double = -12346487.2355467865;
    const char *format = "%-9.0f!%-9.0f Hello, %-9.0f%-9.0f%-9.0f World %-9.0f!%-9.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_274
    const double input_double = 0.0;
    const char *format = "%-1.0f!%-1.0f Hello, %-1.0f%-1.0f%-1.0f World %-1.0f!%-1.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_275
    const double input_double = 12346487.4355467865;
    const char *format = "%-8.0f!%-8.0f Hello, %-8.0f%f%-8.0f World %-8.0f!%-8.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_279
    const double input_double = -12346487.7355467865;
    const char *format = "%-21.0f!%-21.0f Hello, %-21.0f%-21.0f%-21.0f World %-21.0f!%-21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_280
    const double input_double = 0.0;
    const char *format = "%-15.0f!%-15.0f Hello, %-15.0f%-15.0f%-15.0f World %-15.0f!%-15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_281
    const double input_double = 12346487.2355467865;
    const char *format = "%-78.0f!%-78.0f Hello, %-78.0f%-78.0f%-78.0f World %-78.0f!%-78.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision less than negative value
#test s21_sprintf_test_lf_finchren_284
    const double input_double = -12346487.8355467865;
    const char *format = "%0.2f!%0.2f Hello, %0.2f%0.2f%0.2f World %0.2f!%0.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision less than zero
#test s21_sprintf_test_lf_finchren_285
    const double input_double = 0.000000;
    const char *format = "%0.3f!%0.3f Hello, %0.3f%0.3f%0.3f World %0.3f!%0.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision less than positive value
#test s21_sprintf_test_lf_finchren_286
    const double input_double = 12346487.2355467865;
    const char *format = "%0.4f!%0.4f Hello, %0.4f%0.4f%0.4f World %0.4f!%0.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision equal to negative value
#test s21_sprintf_test_lf_finchren_289
    const double input_double = -12346487.8355467865;
    const char *format = "%0.10f!%0.10f Hello, %0.10f%0.10f%0.10f World %0.10f!%0.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision equal to zero
#test s21_sprintf_test_lf_finchren_290
    const double input_double = 0.000000000;
    const char *format = "%0.9f!%0.9f Hello, %0.9f%0.9f%0.9f World %0.9f!%0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision equal to positive value
#test s21_sprintf_test_lf_finchren_291
    const double input_double = 12346487.2355467865;
    const char *format = "%0.10f!%0.10f Hello, %0.10f%0.10f%0.10f World %0.10f!%0.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Width (right-justify) equal to zero and precision bigger than negative value
#test s21_sprintf_test_lf_finchren_294
    const double input_double = -12346487.8355467865;
    const char *format = "%0.115f!%0.115f Hello, %0.115f%0.115f%0.115f World %0.115f!%0.115f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision bigger than zero
#test s21_sprintf_test_lf_finchren_295
    const double input_double = 0.000000000;
    const char *format = "%0.9f!%0.9f Hello, %0.9f%0.9f%0.9f World %0.9f!%0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision bigger than positive value
#test s21_sprintf_test_lf_finchren_296
    const double input_double = 12346487.2355467865;
    const char *format = "%0.69f!%0.69f Hello, %0.69f%0.69f%0.69f World %0.69f!%0.69f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Width (right-justify) equal to precision with negative value
#test s21_sprintf_test_lf_finchren_299
    const double input_double = -12346487.8355467865;
    const char *format = "%11.11f!%11.11f Hello, %11.11f%11.11f%11.11f World %11.11f!%11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_300
    const double input_double = 0.000000000;
    const char *format = "%30.30f!%30.30f Hello, %30.30f%30.30f%30.30f World %30.30f!%30.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to precision with positive value
#test s21_sprintf_test_lf_finchren_301
    const double input_double = 12346487.2355467865;
    const char *format = "%40.40f!%40.40f Hello, %40.40f%40.40f%40.40f World %40.40f!%40.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to precision with negative value
#test s21_sprintf_test_lf_finchren_304
    const double input_double = -12346487.8355467865;
    const char *format = "%-11.11f!%-11.11f Hello, %-11.11f%-11.11f%6f World %-11.11f!%-11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_305
    const double input_double = 0.000000000;
    const char *format = "%-30.30f!%-30.30f Hello, %-30.30f%-30.30f%-30.30f World %-30.30f!%-30.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to precision with positive value
#test s21_sprintf_test_lf_finchren_306
    const double input_double = 12346487.2355467865;
    const char *format = "%-40.40f!%-40.40f Hello, %-40.40f%-40.40f%-40.40f World %-40.40f!%-40.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the precision with negative value
#test s21_sprintf_test_lf_finchren_309
    const double input_double = -12346487.8355467865;
    const char *format = "%13.11f!%13.11f Hello, %13.11f%13.11f%13.11f World %13.11f!%13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_310
    const double input_double = 0.000000000;
    const char *format = "%30.30f!%30.30f Hello, %30.30f%30.30f%30.30f World %30.30f!%30.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the precision with positive value
#test s21_sprintf_test_lf_finchren_311
    const double input_double = 12346487.2355467865;
    const char *format = "%41.40f!%41.40f Hello, %41.40f%41.40f%41.40f World %41.40f!%41.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the precision with negative value
#test s21_sprintf_test_lf_finchren_314
    const double input_double = -12346487.8355467865;
    const char *format = "%-13.11f!%-13.11f Hello, %-13.11f%-13.11f%-13.11f World %-13.11f!%-13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_315
    const double input_double = 0.000000000;
    const char *format = "%-36.30f!%-36.30f Hello, %-36.30f%-36.30f%-36.30f World %-36.30f!%-36.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the precision with positive value
#test s21_sprintf_test_lf_finchren_316
    const double input_double = 12346487.2355467865;
    const char *format = "%-49.40f!%-49.40f Hello, %-49.40f%-49.40f%-49.40f World %-49.40f!%-49.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) less than the precision with negative value
#test s21_sprintf_test_lf_finchren_319
    const double input_double = -12346487.8355467865;
    const char *format = "%13.16f!%13.16f Hello, %13.16f%13.16f%13.16f World %13.16f!%13.16f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_320
    const double input_double = 0.000000000;
    const char *format = "%30.33f!%30.33f Hello, %30.33f%30.33f%30.33f World %30.33f!%30.33f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) less than the precision with positive value
#test s21_sprintf_test_lf_finchren_321
    const double input_double = 12346487.3355467865;
    const char *format = "%41.48f!%41.48f Hello, %41.48f%41.48f%41.48f World %41.48f!%41.48f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) less than the precision with negative value
#test s21_sprintf_test_lf_finchren_324
    const double input_double = -12346487.8355467865;
    const char *format = "%-13.18f!%-13.18f Hello, %-13.18f%-13.18f%-13.18f World %-13.18f!%-13.18f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_325
    const double input_double = 0.000000000;
    const char *format = "%-36.46f!%-36.46f Hello, %-36.46f%-36.46f%-36.46f World %-36.46f!%-36.46f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) less than the precision with positive value
#test s21_sprintf_test_lf_finchren_326
    const double input_double = 12346487.2355467865;
    const char *format = "%-49.78f!%-49.78f Hello, %-49.78f%-49.78f%-49.78f World %-49.78f!%-49.78f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of sign and precision together tests

// Sign, precision and width being zero with negative value
#test s21_sprintf_test_lf_finchren_329
    const double input_double = -516925439.375894345;
    const char *format = "%+0.0f!%+0.0f Hello, %+0.0f%+0.0f%+0.0f World %+0.0f!%+0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, precision and width being zero with zero
#test s21_sprintf_test_lf_finchren_330
    const double input_double = 0.0;
    const char *format = "%+0.0f!%+0.0f Hello, %+0.0f%+0.0f%+0.0f World %+0.0f!%+0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, precision and width being zero with positive value
#test s21_sprintf_test_lf_finchren_331
    const double input_double = 516925439.875893345;
    const char *format = "%+0.0f!%+0.0f Hello, %+0.0f%+0.0f%+0.0f World %+0.0f!%+0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_334
    const double input_double = -12346487.2355467865;
    const char *format = "%+9.0f!%+9.0f Hello, %f+9.0f%+9.0f%+9.0f World %+9.0f!%+9.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_335
    const double input_double = 0.0;
    const char *format = "%+1.0f!%+1.0f Hello, %+1.0f%+1.0f%+1.0f World %+1.0f!%+1.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_336
    const double input_double = 12346487.2355467865;
    const char *format = "%+8.0f!%+8.0f Hello, %+8.0f%+8.0f%+8.0f World %+8.0f!%+8.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_339
    const double input_double = -12346487.2355467865;
    const char *format = "%+21.0f!%+21.0f Hello, %+21.0f%+21.0f%+21.0f World %+21.0f!%+21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_340
    const double input_double = 0.0;
    const char *format = "%+15.0f!%+15.0f Hello, %+15.0f%+15.0f%+15.0f World %+15.0f!%+15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_341
    const double input_double = 12346487.8355467865;
    const char *format = "%+58.0!%+55.0 Hello, %+78.0%+78.0%+33.0 World %+78.0!%+98.0";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (left-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_344
    const double input_double = -12346487.2355467865;
    const char *format = "%+-9.0f!%+-9.0f Hello, %+-9.0f%+-9.0f%+-9.0f World %+-9.0f!%+-9.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_345
    const double input_double = 0.0;
    const char *format = "%+-1.0f!%+-1.0f Hello, %+-1.0f%+-1.0f%+-1.0f World %+-1.0f!%+-1.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_346
    const double input_double = 12346487.5355467865;
    const char *format = "%+-8.0f!%+-8.0f Hello, %+-8.0f%+-8.0f%+-8.0f World %+-8.0f!%+-8.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_349
    const double input_double = -12346487.4355467865;
    const char *format = "%+-21.0f!%+-21.0f Hello, %+-21.0f%+-21.0f%+-21.0f World %+-21.0f!%+-21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_350
    const double input_double = 0.0;
    const char *format = "%+-15.0f!%+-15.0f Hello, %+-15.0f%+-15.0f%+-15.0f World %+-15.0f!%+-15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_351
    const double input_double = 12346487.2355467865;
    const char *format = "%+-78.0f!%+-78.0f Hello, %+-78.0f%+-78.0f%+-78.0f World %+-78.0f!%+-78.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (right-justify) equal to zero and precision less than negative value
#test s21_sprintf_test_lf_finchren_354
    const double input_double = -12346487.8355467865;
    const char *format = "%+0.2f!%+0.2f Hello, %+0.2f%+0.2f%+0.2f World %+0.2f!%+0.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision less than zero
#test s21_sprintf_test_lf_finchren_355
    const double input_double = 0.000000;
    const char *format = "%+0.3f!%+0.3f Hello, %+0.3f%+0.3f%+0.3f World %+0.3f!%+0.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision less than positive value
#test s21_sprintf_test_lf_finchren_356
    const double input_double = 12346487.2355467865;
    const char *format = "%+0.4f!%+0.4f Hello, %+0.4f%+0.4f%+0.4f World %+0.4f!%+0.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (right-justify) equal to zero and precision equal to negative value
#test s21_sprintf_test_lf_finchren_359
    const double input_double = -12346487.8355467865;
    const char *format = "%+0.10f!%+0.10f Hello, %+0.10f%+0.10f%+0.10f World %+0.10f!%+0.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision equal to zero
#test s21_sprintf_test_lf_finchren_360
    const double input_double = 0.000000000;
    const char *format = "%+0.9f!%+0.9f Hello, %+0.9f%+0.9f%+0.9f World %+0.9f!%+0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision equal to positive value
#test s21_sprintf_test_lf_finchren_361
    const double input_double = 12346487.2355467865;
    const char *format = "%+0.10f!%+0.10f Hello, %+0.10f%+0.10f%+0.10f World %+0.10f!%+0.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision bigger than negative value
#test s21_sprintf_test_lf_finchren_364
    const double input_double = -12346487.8355467865;
    const char *format = "%+0.115f!%+0.115f Hello, %+0.115f%+0.115f%+0.115f World %+0.115f!%+0.115f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision bigger than zero
#test s21_sprintf_test_lf_finchren_365
    const double input_double = 0.000000000;
    const char *format = "%+0.9f!%+0.9f Hello, %+0.9f%+0.9f%+0.9f World %+0.9f!%+0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision bigger than positive value
#test s21_sprintf_test_lf_finchren_366
    const double input_double = 12346487.2355467865;
    const char *format = "%+0.69f!%+0.69f Hello, %+0.69f%+0.69f%+0.69f World %+0.69f!%+0.69f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to precision with negative value
#test s21_sprintf_test_lf_finchren_369
    const double input_double = -12346487.8355467865;
    const char *format = "%+11.11f!%+11.11f Hello, %+11.11f%+11.11f%+11.11f World %+11.11f!%+11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_370
    const double input_double = 0.000000000;
    const char *format = "%+30.30f!%+30.30f Hello, %+30.30f%+30.30f%+30.30f World %+30.30f!%+30.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to precision with positive value
#test s21_sprintf_test_lf_finchren_371
    const double input_double = 12346487.2355467865;
    const char *format = "%+40.40f!%+40.40f Hello, %+40.40f%+40.40f%+40.40f World %+40.40f!%+40.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, idth (left-justify) equal to precision with negative value
#test s21_sprintf_test_lf_finchren_374
    const double input_double = -12346487.8355467865;
    const char *format = "%+-11.11f!%+-11.11f Hello, %+-11.11f%+-11.11f%+-11.11f World %+-11.11f!%+-11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_375
    const double input_double = 0.000000000;
    const char *format = "%+-30.30f!%+-30.30f Hello, %+-30.30f%+-30.30f%+-30.30f World %+-30.30f!%+-30.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to precision with positive value
#test s21_sprintf_test_lf_finchren_376
    const double input_double = 12346487.2355467865;
    const char *format = "%+-40.40f!%+-40.40f Hello, %+-40.40f%+-40.40f%+-40.40f World %+-40.40f!%+-40.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the precision with negative value
#test s21_sprintf_test_lf_finchren_379
    const double input_double = -12346487.8355467865;
    const char *format = "%+13.11f!%+13.11f Hello, %+13.11f%+13.11f%+13.11f World %+13.11f!%+13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_380
    const double input_double = 0.000000000;
    const char *format = "%+30.30f!%+30.30f Hello, %+30.30f%+30.30f%+30.30f World %+30.30f!%+30.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the precision with positive value
#test s21_sprintf_test_lf_finchren_381
    const double input_double = 12346487.2355467865;
    const char *format = "%+41.40f!%+41.40f Hello, %+41.40f%+41.40f%+41.40f World %+41.40f!%+41.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// Sign, width (left-justify) bigger than the precision with negative value
#test s21_sprintf_test_lf_finchren_384
    const double input_double = -12346487.8355467865;
    const char *format = "%+-13.11f!%+-13.11f Hello, %+-13.11f%+-13.11f%+-13.11f World %+-13.11f!%+-13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_385
    const double input_double = 0.000000000;
    const char *format = "%+-36.30f!%+-36.30f Hello, %+-36.30f%+-36.30f%+-36.30f World %+-36.30f!%+-36.30f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the precision with positive value
#test s21_sprintf_test_lf_finchren_386
    const double input_double = 12346487.2355467865;
    const char *format = "%+-49.40f!%+-49.40f Hello, %+-49.40f%+-49.40f%+-49.40f World %+-49.40f!%+-49.40f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) less than the precision with negative value
#test s21_sprintf_test_lf_finchren_389
    const double input_double = -12346487.8355467865;
    const char *format = "%+13.16f!%+13.16f Hello, %+13.16f%+13.16f%+13.16f World %+13.16f!%+13.16f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_390
    const double input_double = 0.000000000;
    const char *format = "%+30.33f!%+30.33f Hello, %+30.33f%+30.33f%+30.33f World %+30.33f!%+30.33f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) less than the precision with positive value
#test s21_sprintf_test_lf_finchren_391
    const double input_double = 12346487.2355467865;
    const char *format = "%+41.48f!%+41.48f Hello, %+41.48f%+41.48f%+41.48f World %+41.48f!%+41.48f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (left-justify) less than the precision with negative value
#test s21_sprintf_test_lf_finchren_394
    const double input_double = -12346487.8355467865;
    const char *format = "%+-13.18f!%+-13.18f Hello, %+-13.18f%+-13.18f%+-13.18f World %+-13.18f!%+-13.18f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_395
    const double input_double = 0.000000000;
    const char *format = "%+-36.46f!%+-36.46f Hello, %+-36.46f%+-36.46f%+-36.46f World %+-36.46f!%+-36.46f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) less than the precision with positive value
#test s21_sprintf_test_lf_finchren_396
    const double input_double = 12346487.2355467865;
    const char *format = "%+-49.78f!%+-49.78f Hello, %+-49.78f%+-49.78f%+-49.78f World %+-49.78f!%+-49.78f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
