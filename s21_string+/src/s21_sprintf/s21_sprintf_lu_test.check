
#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);


// %lu Minimum value test
#test s21_sprintf_lu_test35
    const unsigned int input_unsigned_int = 0;
    const char *format = "Hello, World %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value test - multiple values
#test s21_sprintf_lu_test36
    const unsigned int input_unsigned_int = 0;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value test
#test s21_sprintf_lu_test37
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "Hello, World %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value test - multiple values
#test s21_sprintf_lu_test38
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Abnormal value - negative value
#test s21_sprintf_lu_test39
    const unsigned int input_unsigned_int = -3;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Abnormal value - bigger than max range value
#test s21_sprintf_lu_test40
    const long unsigned int input_unsigned_int = 8589934590;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
















#test s21_sprintf_test_lu_0
    const unsigned int input_unsigned = 12;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_1
    const unsigned int input_unsigned = -12;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_2
    const unsigned int input_unsigned = 123456789;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_3
    const unsigned int input_unsigned = -123456789;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_4
    const unsigned int input_unsigned = 12;
    const char *format = "%.0lu!%.0lu DA FUCK %.0lu!%.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%.1lu!%.2lu DA FUCK %.1lu!%.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_6
    const unsigned int input_unsigned = -1234;
    const char *format = "%.1lu!%.2lu DA FUCK %.1lu!%.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_lu_7
    const unsigned int input_unsigned = 1234;
    const char *format = "%.5lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_8
    const unsigned int input_unsigned = -1234;
    const char *format = "%.13lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_8_1
    const unsigned int input_unsigned = -1234;
    const char *format = "%.5lu!%.5lu DA FUCK %.5lu!%.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_9
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%.5lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_10
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%.5lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_lu_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%0lu!%0lu DA FUCK %0lu!%0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_1
    const unsigned int input_unsigned = -12;
    const char *format = "%0lu!%0lu DA FUCK %0lu!%0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_2
    const unsigned int input_unsigned = 12;
    const char *format = "%1lu!%2lu DA FUCK %1lu!%2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_3
    const unsigned int input_unsigned = -12;
    const char *format = "%1lu!%2lu DA FUCK %1lu!%2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_4
    const unsigned int input_unsigned = 12;
    const char *format = "%10lu!%12lu DA FUCK %11lu!%13lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_5
    const unsigned int input_unsigned = -12;
    const char *format = "%10lu!%12lu DA FUCK %11lu!%13lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_lu_precision_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%3.0lu!%4.0lu DA FUCK %4.0lu!%5.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_precision_width_1
    const unsigned int input_unsigned = 12;
    const char *format = "%3.1lu!%4.2lu DA FUCK %4.1lu!%5.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_precision_width_2
    const unsigned int input_unsigned = -12;
    const char *format = "%5.3lu!%6.4lu DA FUCK %6.4lu!%7.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_lu_width_left_justify_0
    const unsigned int input_unsigned = 12;
    const char *format = "%-0lu!%-0lu DA FUCK %-0lu!%-0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_1
    const unsigned int input_unsigned = 12;
    const char *format = "%-1lu!%-2lu DA FUCK %-1lu!%-2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_2
    const unsigned int input_unsigned = -12;
    const char *format = "%-0lu!%-0lu DA FUCK %-0lu!%-0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_3
    const unsigned int input_unsigned = -12;
    const char *format = "%-1lu!%-2lu DA FUCK %-1lu!%-2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_4
    const unsigned int input_unsigned = 12;
    const char *format = "%-3lu!%-4lu DA FUCK %-5lu!%-6lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_5
    const unsigned int input_unsigned = -12;
    const char *format = "%-3lu!%-4lu DA FUCK %-5lu!%-2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_6
    const unsigned int input_unsigned = 12;
    const char *format = "%-3.0lu!%-4.0lu DA FUCK %-5.0lu!%-2.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-4.1lu!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_8
    const unsigned int input_unsigned = 12;
    const char *format = "!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_9
    const unsigned int input_unsigned = -12;
    const char *format = "%-4.1lu!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_lu_plus_0
    const unsigned int input_unsigned = 12;
    const char *format = "%lu!%lu DA FUCK %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_1
    const unsigned int input_unsigned = -12;
    const char *format = "%lu!%lu DA FUCK %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_2
    const unsigned int input_unsigned = -12;
    const char *format = "%0.0lu!%0.0lu DA FUCK %0.0lu!%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_3
    const unsigned int input_unsigned = 12;
    const char *format = "%0.0lu!%0.0lu DA FUCK %0.0lu!%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_4
    const unsigned int input_unsigned = 12;
    const char *format = "%1.0lu!%2.0lu DA FUCK %1.0lu!%2.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_5
    const unsigned int input_unsigned = 12;
    const char *format = "%0.1lu!%0.2lu DA FUCK %0.1lu!%0.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_6
    const unsigned int input_unsigned = -12;
    const char *format = "%0.1lu!%0.2lu DA FUCK %0.1lu!%0.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_7
    const unsigned int input_unsigned = 12;
    const char *format = "%6.1lu!%7.2lu DA FUCK %8.1lu!%9.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_8
    const unsigned int input_unsigned = -12;
    const char *format = "%6.1lu!%7.2lu DA FUCK %8.1lu!%9.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_9
    const unsigned int input_unsigned = 12;
    const char *format = "%8.6lu!%9.7lu DA FUCK %10.8lu!%11.9lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_9_1
    const unsigned int input_unsigned = -12;
    const char *format = "%8.6lu!%9.7lu DA FUCK %10.8lu!%11.9lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_10
    const unsigned int input_unsigned = 12;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_11
    const unsigned int input_unsigned = -12;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_12
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_13
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_14
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8lu!%107.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_15
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%16.8lu!%17.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_16
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8lu!%107.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_17
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%6.18lu!%7.19lu DA FUCK %8.20lu!%9.21lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_18
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8lu!%107.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_19
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%16.18lu!%17.19lu DA FUCK %18.20lu!%19.21lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_20
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%160.80lu!%170.90lu DA FUCK %180.100lu!%190.110lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_21
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%160.180lu!%170.190lu DA FUCK %180.200lu!%190.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_left_justify_0
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-+160.180lu!%-+170.190lu DA FUCK %-+180.200lu!%-+190.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_1
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-160.180lu!%-170.190lu DA FUCK %-180.200lu!%-190.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_2
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-160.18lu!%-17.190lu DA FUCK %-180.20lu!%-19.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_left_justify_4
    const unsigned int input_unsigned = -1234;
    const char *format = "%-+16lu!%-+17lu DA FUCK %-18lu!%-19lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%-16.10lu!%-17.10lu DA FUCK %-18.8lu!%-19.8lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_6
    const unsigned int input_unsigned = 1234;
    const char *format = "%-+16.10lu!%-+17.10lu DA FUCK %-+18.8lu!%-+19.8lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_8
    const unsigned int input_unsigned = -12;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_9
    const unsigned int input_unsigned = 12;
    const char *format = "%-+6.4lu!%-+7.5lu DA FUCK %-+8.4lu!%-+9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "%-+6.4lu!%-+7.5lu DA FUCK %-+8.4lu!%-+9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_11
    const unsigned int input_unsigned = 123;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_12
    const unsigned int input_unsigned = -123;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %lu Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_lu_specifier_test10
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_lu_specifier_test11
    const unsigned int input_unsigned = 0x723100;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

























// %lu Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_lu_specifier_test12
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value of octal int with sign, width and precision
#test s21_sprintf_lu_specifier_test13
    const unsigned int input_unsigned = 017777777777;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of octal int with sign, width and precision
#test s21_sprintf_lu_specifier_test14
    const unsigned int input_unsigned = 034430377;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value of octal int with sign, width and precision
#test s21_sprintf_lu_specifier_test15
    const unsigned int input_unsigned = -017777777777;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular value - right-justify flag test
#test s21_sprintf_lu_specifier_test16
   const unsigned int input_unsigned = 12;
   const char *format = "%5lu%5lu Hello, World %5lu%5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %lu Negative value - right-justify flag test
#test s21_sprintf_lu_specifier_test17
   const unsigned int input_unsigned = -12;
   const char *format = "%5lu%5lu Hello, World %5lu%5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - right-justify flag test
#test s21_sprintf_lu_specifier_test18
   const unsigned int input_unsigned = -1234567;
   const char *format = "%lu%5lu Hello, World %5lu%5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - right-justify flag test with different width
#test s21_sprintf_lu_specifier_test19
   const unsigned int input_unsigned = -1234567;
   const char *format = "%15lu%5lu Hello, World %51lu%5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - left-justify flag test
#test s21_sprintf_lu_specifier_test20
   const unsigned int input_unsigned = -12;
   const char *format = "%-5lu%-5lu Hello, World %-5lu%-5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - left-justify flag test with different width
#test s21_sprintf_lu_specifier_test21
   const unsigned int input_unsigned = -12;
   const char *format = "%-5lu%-10lu%-15lu Hello, World %-5lu%-10lu%-15lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_lu_specifier_test22
   const unsigned int input_unsigned = -12;
   const char *format = "%-+3lu%-+5lu Hello, World %-+7lu%-+10lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_lu_specifier_test23
   const unsigned int input_unsigned = -123456789;
   const char *format = "%-+5lu%-+5lu Hello, World %-+50lu%-+50lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_lu_specifier_test24
   const unsigned int input_unsigned = 123456789;
   const char *format = "%-+5lu%-+5lu Hello, World %-+50lu%-+50lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Normal value - precision test
#test s21_sprintf_lu_specifier_test25
   const unsigned int input_unsigned = 12;
   const char *format = "%.5lu!%.5lu Hello, World %.5lu!%.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Normal value - precision test (two-digit number)
#test s21_sprintf_lu_specifier_test26
   const unsigned int input_unsigned = 12345;
   const char *format = "%.15lu!%.15lu Hello, World %.15lu!%.15lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Normal value - precision test with different precision
#test s21_sprintf_lu_specifier_test27
   const unsigned int input_unsigned = 12345;
   const char *format = "%.1lu!%.3lu Hello, World %.lu!%.15lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - precision test with same values
#test s21_sprintf_lu_specifier_test28
   const unsigned int input_unsigned = -12345;
   const char *format = "%.7lu!%.7lu Hello, World %.7lu!%.7lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - precision test with same values
#test s21_sprintf_lu_specifier_test29
   const unsigned int input_unsigned = -123456789;
   const char *format = "%.7lu!%.7lu Hello, World %.7lu!%.7lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - precision test with different values
#test s21_sprintf_lu_specifier_test30
   const unsigned int input_unsigned = -1234567890;
   const char *format = "%.7lu!%.17lu Hello, World %.27lu!%.37lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Regular value - width and precision test
#test s21_sprintf_lu_specifier_test31
   const unsigned int input_unsigned = 12;
   const char *format = "%11.2lu!%9.2lu Hello, World %7.2lu!%5.2lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - width and precision test
#test s21_sprintf_lu_specifier_test32
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.2lu!%9.2lu Hello, World %7.2lu!%5.2lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - width and precision test - zero precision
#test s21_sprintf_lu_specifier_test33
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.0lu!%9.0lu Hello, World %7.0lu!%5.0lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Regular value - width and precision test - zero precision
#test s21_sprintf_lu_specifier_test34
   const unsigned int input_unsigned = 123;
   const char *format = "%11.0lu!%9.0lu Hello, World %7.0lu!%5.0lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Regular value - width and precision test - different width and different precision
#test s21_sprintf_lu_specifier_test35
   const unsigned int input_unsigned = 12;
   const char *format = "%11.12lu!%9.10lu Hello, World %5.10lu!%10.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - width and precision test - different width and different precision
#test s21_sprintf_lu_specifier_test36
   const unsigned int input_unsigned = -12;
   const char *format = "%11.12lu!%9.10lu Hello, World %5.10lu!%10.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_lu_specifier_test37
   const unsigned int input_unsigned = 123456;
   const char *format = "%4.5lu!%7.8lu Hello, World %5.10lu!%10.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Sign with regular int test
#test s21_sprintf_lu_specifier_test38
   const unsigned int input_unsigned = 123456;
   const char *format = "%lu!%lu Hello, World %lu!%lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Sing with maximum value of hexadecimal int
#test s21_sprintf_lu_specifier_test39
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with normal value of hexadecimal int
#test s21_sprintf_lu_specifier_test40
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with minimum value of hexadecimal int
#test s21_sprintf_lu_specifier_test41
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with maximum value of octal int
#test s21_sprintf_lu_specifier_test42
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with normal value of octal int
#test s21_sprintf_lu_specifier_test43
    const unsigned int input_unsigned = 034430377;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with minimum value of octal int
#test s21_sprintf_lu_specifier_test44
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with maximum int test
#test s21_sprintf_lu_specifier_test45
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with minimum int test
#test s21_sprintf_lu_specifier_test46
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_lu_specifier_test47
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_lu_specifier_test48
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_lu_specifier_test49
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value of octal int - left-justified with no value
#test s21_sprintf_lu_specifier_test50
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of octal int - left-justified with no value
#test s21_sprintf_lu_specifier_test51
    const unsigned int input_unsigned = 034430377;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value of octal int - left-justified with no value
#test s21_sprintf_lu_specifier_test52
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum int test - left-justified with no value
#test s21_sprintf_lu_specifier_test53
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum int test - left-justified with no value
#test s21_sprintf_lu_specifier_test54
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular int test - left-justified with no value
#test s21_sprintf_lu_specifier_test55
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_lu_specifier_test56
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-3lu%-7lu%-10lu Hello, World %-3.3lu%-7.7lu%-10.10lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_lu_specifier_test57
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-.3lu%-.7lu%-.10lu Hello, World %-3.lu%-7.lu%-10.lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value test - left-justify and empty precision
#test s21_sprintf_lu_specifier_test58
    const unsigned long int input_unsigned = 4294967295;
    const char *format = "%-.3lu%-.7lu%-.10lu Hello, World %-3.lu%-7.lu%-10.lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value test - right-justify
#test s21_sprintf_lu_specifier_test59
    const unsigned long int input_unsigned = 0;
    const char *format = "%3lu%7lu%10lu Hello, World %3lu%7lu%10lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
