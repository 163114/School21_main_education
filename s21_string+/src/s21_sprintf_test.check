#include <string.h>
#include <stdio.h>
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

// %c Regular value test
#test s21_sprintf_test1
    const char input = '!';
    const char *format = "Hello, World%c!%c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input, input);
    const int result = sprintf(buffer, format, input, input);
    
    ck_assert_str_eq(s21_buffer, buffer);
 
// %c Test with a few of char variables
#test s21_sprintf_test2
    const char first_input = '!';
    const char second_input = '?';
    const char *format = "%c%c%cHello, World%c!%c%c";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, first_input, first_input, first_input, second_input, second_input, second_input);
    const int result = sprintf(buffer, format, first_input, first_input, first_input, second_input, second_input, second_input);
    
    ck_assert_str_eq(s21_buffer, buffer);

// %c Try to print out %c as a %d value
#test s21_sprintf_test3
    const char input = '!';
    const char *format = "Hello, World%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input, input, input);
    const int result = sprintf(buffer, format, input, input, input);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %c %d Try to print both %c and %d
#test s21_sprintf_test4
    const char input_char = '!';
    const int input_int = 15;
    const char *format = "Hello, World%c%c%c %d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_char, input_char, input_char, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Minimum value test
#test s21_sprintf_test5
    const int input_int = 0;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Maximum range of int test
#test s21_sprintf_test6
    const int input_int = 2147483647;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// DECIMAL Maximum negative value test
#test s21_sprintf_test7
    const int input_int = -2147483647;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Normal value test
#test s21_sprintf_test8
    const int input_int = 47483648;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// DECIMAL Normal negative value test
#test s21_sprintf_test9
    const int input_int = -47483648;
    const char *format = "%d%d Hello, World %d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Normal value test - a lot of variables
#test s21_sprintf_test10
    const int input_int = 947483648;
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Abnormal value - zero in the begging of the number
#test s21_sprintf_test11
    const int input_int = 012;
    const char *format = "%d%d%d%d Hello, World %d%d%d%d";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int
#test s21_sprintf_test12
    const int input_int = 0x7FFFFFFF;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int
#test s21_sprintf_test13
    const int input_int = 0x723100;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int
#test s21_sprintf_test14
    const int input_int = -0x7FFFFFFF;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int
#test s21_sprintf_test15
    const int input_int = 017777777777;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int
#test s21_sprintf_test16
    const int input_int = 034430377;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int
#test s21_sprintf_test17
    const int input_int = -017777777777;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test
#test s21_sprintf_test18
    const int input_int = 2147483647;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test
#test s21_sprintf_test19
    const int input_int = -2147483647;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test
#test s21_sprintf_test20
    const int input_int = 7483647;
    const char *format = "%i%i%i Hello, World %i%i%i";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - all 6 decimal places
#test s21_sprintf_test21
    const double input_int = 748364.123456;
    const char *format = " Hello, World %f";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - 3 decimal places
#test s21_sprintf_test22
    const double input_int = 748364.123;
    const char *format = " Hello, World %f";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - 0 decimal places
#test s21_sprintf_test23
    const double input_int = 748364;
    const char *format = " Hello, World %f";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - multiple values in the begging and at the end of the string
#test s21_sprintf_test24
    const double input_int = 748364.123;
    const char *format = "test %f %f %f Hello, World %f %f %f test";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - multiple values in the begging and at the end of the string with string in between
#test s21_sprintf_test25
    const double input_int = 748364.123;
    const char *format = "test %f test %f test %f Hello, World %f test %f test %f test";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %f Regular double test - multiple values in the row
#test s21_sprintf_test26
    const double input_int = 748364.123;
    const char *format = "test %f%f%f Hello, World %f%f%f test";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Regular value test
#test s21_sprintf_test27
    char test_string[100] = "hello world";
    char *pointer = test_string;
    const char *format = "%s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string);
    const int result = sprintf(buffer, format, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Regular value test - duplicate in a row
#test s21_sprintf_test28
    char test_string[100] = "hello world";
    char *pointer = test_string;
    const char *format = "%s %s %s hello %s %s %s world %s %s %s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    const int result = sprintf(buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Regular value test - duplicate in a row
#test s21_sprintf_test29
    char test_string[100] = "hello world";
    char *pointer = test_string;
    const char *format = "%s %s %s hello %s %s %s world %s %s %s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    const int result = sprintf(buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %s Empty string test
#test s21_sprintf_test30
    char test_string[100] = "\0";
    char *pointer = test_string;
    const char *format = "%s %s %s hello %s %s %s world %s %s %s";

    char s21_buffer[500];
    memset(s21_buffer, 0, 500);
    char buffer[500];
    memset(buffer, 0, 500);

    const int s21_result = s21_sprintf(s21_buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    const int result = sprintf(buffer, format, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string, test_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test
#test s21_sprintf_test31
    const unsigned int input_int = 748364;
    const char *format = " Hello, World %u";

    char s21_buffer[100];
    memset(s21_buffer, 0, 100);
    char buffer[100];
    memset(buffer, 0, 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int);
    const int result = sprintf(buffer, format, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test - multiple u_specifiers in a row
#test s21_sprintf_test32
    const unsigned int input_int = 748364;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test - multiple u_specifiers in a row with different values
#test s21_sprintf_test33
    const unsigned int input_unsigned_int_first = 748364;
    const unsigned int input_unsigned_int_second = 12345;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first);
    const int result = sprintf(buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_first);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Regular value test - tripple u_specifiers in a row with different values
#test s21_sprintf_test34
    const unsigned int input_unsigned_int_first = 748364;
    const unsigned int input_unsigned_int_second = 12345;
    const unsigned int input_unsigned_int_third = 1337;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first);
    const int result = sprintf(buffer, format, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first, input_unsigned_int_second, input_unsigned_int_third, input_unsigned_int_second, input_unsigned_int_first);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Minimum value test
#test s21_sprintf_test35
    const unsigned int input_unsigned_int = 0;
    const char *format = "Hello, World %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Minimum value test - multiple values
#test s21_sprintf_test36
    const unsigned int input_unsigned_int = 0;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Maximum value test
#test s21_sprintf_test37
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "Hello, World %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Maximum value test - multiple values
#test s21_sprintf_test38
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Abnormal value - negative value
#test s21_sprintf_test39
    const unsigned int input_unsigned_int = -3;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Abnormal value - bigger than max range value
#test s21_sprintf_test40
    const unsigned int input_unsigned_int = 8589934590;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 0, 200);
    char buffer[200];
    memset(buffer, 0, 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
