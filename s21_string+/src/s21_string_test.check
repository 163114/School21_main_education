#include <string.h>
#include <wchar.h>
#include <stdio.h>
#include "s21_string.h"
#include <string.h>
#include <stdlib.h>
#include "s21_string.h"

#test s21_to_insert_test1
    const char *string = "Who are you?!";
    const char *string_to_insert = "the fuck ";
    const s21_size_t position_to_insert = 4ul;
    const char *expected = "Who the fuck are you?!";
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test2
    const char *string = "Who are you?!";
    const char *string_to_insert = "the fuck ";
    const s21_size_t position_to_insert = 400ul;
    const char *expected = s21_NULL;
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test3
    const char *string = "Who are you?!";
    const char *string_to_insert = s21_NULL;
    const s21_size_t position_to_insert = 4ul;
    const char *expected = s21_NULL;
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test4
    const char *string = "Who are you?!";
    const char *string_to_insert = "the hell ";
    const s21_size_t position_to_insert = 4ul;
    const char *expected = "Who the hell are you?!";
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test5
    const char *string = "Who are you?!";
    const char *string_to_insert = "Hello! ";
    const s21_size_t position_to_insert = 0ul;
    const char *expected = "Hello! Who are you?!";
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test6
    const char *string = "Who are you?!";
    const char *string_to_insert = " THE FUCK!!";
    const s21_size_t position_to_insert = 13ul;
    const char *expected = "Who are you?! THE FUCK!!";
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test7
    const char *string = "Who are you?!";
    const char *string_to_insert = " THE\0FUCK!!";
    const s21_size_t position_to_insert = 13ul;
    const char *expected = "Who are you?! THE";
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test8
    const char *string = "Who\0are you?!";
    const char *string_to_insert = " THE\0FUCK!!";
    const s21_size_t position_to_insert = 13ul;
    const char *expected = s21_NULL;
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test9
    const char *string = s21_NULL;
    const char *string_to_insert = " THE\0FUCK!!";
    const s21_size_t position_to_insert = 13ul;
    const char *expected = s21_NULL;
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_insert_test10
    const char *string = s21_NULL;
    const char *string_to_insert = s21_NULL;
    const s21_size_t position_to_insert = 13ul;
    const char *expected = s21_NULL;
    
    char *actual = s21_insert(string, string_to_insert, position_to_insert);
    ck_assert_pstr_eq(actual, expected);

    free(actual);
#include <string.h>
#include "s21_string.h"

#test s21_memchr_test1
    const char *string = "Hello, I am your new coach.";
    const char symbol = 'y';
    const s21_size_t size = strlen(string);
    ck_assert_ptr_eq(s21_memchr(string, symbol, size), memchr(string, symbol, size));

#test s21_memchr_test2
    const char *string = "Hello, I am your new coach.";
    const char symbol = 'f';
    const s21_size_t size = strlen(string);
    ck_assert_ptr_eq(s21_memchr(string, symbol, size), memchr(string, symbol, size));

#test s21_memchr_test3
    const char *string = "You fucking cocksucker!";
    const char symbol = 'f';
    const s21_size_t size = strlen(string);
    ck_assert_ptr_eq(s21_memchr(string, symbol, size), memchr(string, symbol, size));

#test s21_memchr_test4
    const char *string = "You fucking cocksucker, holy fuck!";
    const char symbol = 'f';
    const s21_size_t size = strlen(string);
    ck_assert_ptr_eq(s21_memchr(string, symbol, size), memchr(string, symbol, size));

#test s21_memchr_test5
    const char *string = "";
    const char symbol = 'f';
    const s21_size_t size = strlen(string);
    ck_assert_ptr_eq(s21_memchr(string, symbol, size), memchr(string, symbol, size));

#test s21_memchr_test6
    const char *string = "UUURRRGGGGGHHHH DAAAAAA FUUUUUUCK!!!!!";
    const char symbol = 'F';
    const s21_size_t size = strlen(string);
    ck_assert_ptr_eq(s21_memchr(string, symbol, size), memchr(string, symbol, size));
#include <string.h>
#include "s21_string.h"

#test s21_memcmp_test1
    const char *string1 = "Hello, I am your new coach.";
    const char *string2 = "Hello, I am your new coach.";
    const s21_size_t size = s21_strlen(string1);
    ck_assert_int_eq(s21_memcmp(string1, string2, size), memcmp(string1, string2, size));

#test s21_memcmp_test2
    const char *string1 = "Hello, I am your new coach.";
    const char *string2 = "Hello, I am your new coach.";
    const s21_size_t size = s21_strlen(string1);
    ck_assert_int_eq(s21_memcmp(string1, string2, size / 2), memcmp(string1, string2, size / 2));

#test s21_memcmp_test3
    const char *string1 = "Hello, I am not your new coach.";
    const char *string2 = "Hello, I am your new coach.";
    const s21_size_t size = 5;
    ck_assert_int_eq(s21_memcmp(string1, string2, size), memcmp(string1, string2, size));

#test s21_memcmp_test4
    const char *string1 = "Hello, I am not your new coach.";
    const char *string2 = "Hello, I am your new coach.";
    const s21_size_t size = 15;
    ck_assert_int_eq(s21_memcmp(string1, string2, size), memcmp(string1, string2, size));

#test s21_memcmp_test5
    const char *string1 = "";
    const char *string2 = "";
    const s21_size_t size = 0;
    ck_assert_int_eq(s21_memcmp(string1, string2, size), memcmp(string1, string2, size));

#test s21_memcmp_test6
    const char *string1 = "WOW";
    const char *string2 = "wow";
    const s21_size_t size = 2;
    ck_assert_int_eq(s21_memcmp(string1, string2, size), memcmp(string1, string2, size));

#include <string.h>
#include "s21_string.h"

#test s21_memcpy_test1
    const char *source = "Hello, I am your new coach. Surprised?";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    
    
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    s21_memcpy(s21_destination, source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test2
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    s21_memcpy(s21_destination, source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test3
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source) / 2;

    s21_memcpy(s21_destination, source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test4
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    s21_memcpy(s21_destination, source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test5
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    s21_memcpy(s21_destination, source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test6
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = 0;

    s21_memcpy(s21_destination, source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);



// TESTS WITHOUT OVERLAPPING SOURCE AND DESTINATION

#test s21_memcpy_test7
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 2;

    s21_memcpy(s21_destination, s21_source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test8
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 3;

    s21_memcpy(s21_destination, s21_source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test9
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;
    
    const s21_size_t size = 2;

    s21_memcpy(s21_destination, s21_source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#test s21_memcpy_test10
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};

    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;

    const s21_size_t size = 3;

    s21_memcpy(s21_destination, s21_source, size);
    memcpy(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);

#include <string.h>
#include "s21_string.h"

#test s21_memmove_test1
    const char *source = "Hello, I am your new coach. Surprised?";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    char *s21_destination_copy = s21_memmove(s21_destination, source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test2
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    char *s21_destination_copy = s21_memmove(s21_destination, source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test3
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source) / 2;

    char *s21_destination_copy = s21_memmove(s21_destination, source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test4
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    char *s21_destination_copy = s21_memmove(s21_destination, source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test5
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = s21_strlen(source);

    char *s21_destination_copy = s21_memmove(s21_destination, source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test6
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 0, 100);
    char destination[100];
    memset(destination, 0, 100);
    
    const s21_size_t size = 0;

    char *s21_destination_copy = s21_memmove(s21_destination, source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


// TESTS WITH OVERLAPPING SOURCE AND DESTINATION

#test s21_memmove_test7
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 2;    
    char *destination = source + 2;
    
    const s21_size_t size = 5;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test8
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 5;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test9
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_source = s21_destination + 2;    
    char *source = destination + 2;
    
    const s21_size_t size = 5;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test10
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[]     = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;
    
    const s21_size_t size = 5;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


// TESTS WITHOUT OVERLAPPING SOURCE AND DESTINATION

#test s21_memmove_test11
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[]     = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 2;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test12
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 3;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test13
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;
    
    const s21_size_t size = 2;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test14
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};

    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;

    const s21_size_t size = 3;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test15
    char s21_destination[] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', '\0' };
    char destination[]     = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', '\0' };
    
    char *s21_source = s21_destination + 2;    
    char *source = destination + 2;
    
    const s21_size_t size = 5;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);


#test s21_memmove_test16
    char s21_destination[] = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', '\0' };
    char destination[]     = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', '\0' };
    
    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;
    
    const s21_size_t size = 5;

    char *s21_destination_copy = s21_memmove(s21_destination, s21_source, size);
    char *destination_copy = memmove(destination, source, size);

    ck_assert_mem_eq(s21_destination, destination, size);
    ck_assert_mem_eq(s21_destination_copy, destination_copy, size);
#include <string.h>
#include "s21_string.h"

#test s21_memset_test1

    const char symbol = 'a';
    const int length = 15;


    char s21_string[100] = {'h'};
    memset(s21_string, 'g', 100);
    s21_string[99] = '\0';

    char string[100] = {'h'};
    memset(string, 'g', 100);
    string[99] = '\0';

    
    s21_memset(s21_string, symbol, length);
    memset(string, symbol, length);

    ck_assert_mem_eq(s21_string, string, length);


#test s21_memset_test2

    const char symbol = 'r';
    const int length = 35;


    char s21_string[100] = {'h'};
    memset(s21_string, 'g', 100);
    s21_string[99] = '\0';

    char string[100] = {'h'};
    memset(string, 'g', 100);
    string[99] = '\0';


    s21_memset(s21_string, symbol, length);
    memset(string, symbol, length);

    ck_assert_mem_eq(s21_string, string, length);


#test s21_memset_test3
    const char symbol = 'k';
    const int length = 96;

    char s21_destination[100] = {'h'};
    memset(s21_destination, 'g', 100);
    s21_destination[99] = '\0';

    char destination[100] = {'h'};
    memset(destination, 'g', 100);
    destination[99] = '\0';


    const char* s21_returned = (const char*)s21_memset(s21_destination, symbol, length);
    const char* returned = (const char*)memset(destination, symbol, length);

    
    ck_assert_mem_eq(s21_destination, destination, length);
    ck_assert_mem_eq(s21_returned, returned, length);
    ck_assert_mem_eq(s21_returned, s21_destination, length);
    ck_assert_mem_eq(s21_returned, s21_destination, length);
    ck_assert_mem_eq(returned, destination, length);


#test s21_memset_test4
    const char symbol = '\0';
    const int length = 0;


    char s21_string[100] = {'h'};
    memset(s21_string, 'g', 100);
    s21_string[99] = '\0';

    char string[100] = {'h'};
    memset(string, 'g', 100);
    string[99] = '\0';


    s21_memset(s21_string, symbol, length);
    memset(string, symbol, length);

    ck_assert_mem_eq(s21_string, string, length);


#test s21_memset_test5

    const char symbol = '\0';
    const int length = 0;


    char s21_string[100] = {'h'};
    memset(s21_string, 'g', 100);
    s21_string[99] = '\0';

    char string[100] = {'h'};
    memset(string, 'g', 100);
    string[99] = '\0';


    s21_memset(s21_string, symbol, length);
    memset(string, symbol, length);

    ck_assert_mem_eq(s21_string, string, length);
#include <string.h>
#include <wchar.h>
#include <stdio.h>
#include "s21_string.h"

#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_di_0
    const short input_int = 12;
    const char *format = "%d!%d Hello, Word %d!%d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_1
    const short int input_int = -12;
    const char *format = "%d!%d Hello, Word %d!%d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_2
    const short int input_int = 12345;
    const char *format = "%d!%d Hello, Word %d!%d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_3
    const short int input_int = -12345;
    const char *format = "%d!%d Hello, Word %d!%d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_4
    const short int input_int = 12;
    const char *format = "%.0d!%.0d DA FUCK %.0d!%.0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_5
    const short int input_int = 1234;
    const char *format = "%.1d!%.2d DA FUCK %.1d!%.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_6
    const short int input_int = -1234;
    const char *format = "%.1d!%.2d DA FUCK %.1d!%.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_di_7
    const short int input_int = 1234;
    const char *format = "%.5d!%.7d DA FUCK %.9d!%.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_8
    const short int input_int = -1234;
    const char *format = "%.13d!%.7d DA FUCK %.9d!%.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_8_1
    const short int input_int = -1234;
    const char *format = "%.5d!%.5d DA FUCK %.5d!%.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_9
    const short int input_int = 12345;
    const char *format = "%.5d!%.7d DA FUCK %.9d!%.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_10
    const short int input_int = -12345;
    const char *format = "%.5d!%.7d DA FUCK %.9d!%.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_di_width_0
    const short int input_int = 12;
    const char *format = "%0d!%0d DA FUCK %0d!%0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_1
    const short int input_int = -12;
    const char *format = "%0d!%0d DA FUCK %0d!%0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_2
    const short int input_int = 12;
    const char *format = "%1d!%2d DA FUCK %1d!%2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_3
    const short int input_int = -12;
    const char *format = "%1d!%2d DA FUCK %1d!%2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_4
    const short int input_int = 12;
    const char *format = "%10d!%12d DA FUCK %11d!%13d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_5
    const short int input_int = -12;
    const char *format = "%10d!%12d DA FUCK %11d!%13d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_di_precision_width_0
    const short int input_int = 12;
    const char *format = "%3.0d!%4.0d DA FUCK %4.0d!%5.0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_precision_width_1
    const short int input_int = 12;
    const char *format = "%3.1d!%4.2d DA FUCK %4.1d!%5.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_precision_width_2
    const short int input_int = -12;
    const char *format = "%5.3d!%6.4d DA FUCK %6.4d!%7.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_di_width_left_justify_0
    const short int input_int = 12;
    const char *format = "%-0d!%-0d DA FUCK %-0d!%-0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_left_justify_1
    const short int input_int = 12;
    const char *format = "%-1d!%-2d DA FUCK %-1d!%-2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_width_left_justify_2
    const short int input_int = -12;
    const char *format = "%-0d!%-0d DA FUCK %-0d!%-0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_left_justify_3
    const short int input_int = -12;
    const char *format = "%-1d!%-2d DA FUCK %-1d!%-2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_width_left_justify_4
    const short int input_int = 12;
    const char *format = "%-3d!%-4d DA FUCK %-5d!%-6d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_left_justify_5
    const short int input_int = -12;
    const char *format = "%-3d!%-4d DA FUCK %-5d!%-2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_width_left_justify_6
    const short int input_int = 12;
    const char *format = "%-3.0d!%-4.0d DA FUCK %-5.0d!%-2.0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_left_justify_7
    const short int input_int = 12;
    const char *format = "%-4.1d!%-4.2d DA FUCK %-5.1d!%-4.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_left_justify_8
    const short int input_int = 12;
    const char *format = "!%-4.2d DA FUCK %-5.1d!%-4.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_width_left_justify_9
    const short int input_int = -12;
    const char *format = "%-4.1d!%-4.2d DA FUCK %-5.1d!%-4.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_width_left_justify_10
    const short int input_int = -12;
    const char *format = "!%-4.2d DA FUCK %-5.1d!%-4.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_di_plus_0
    const short int input_int = 12;
    const char *format = "%+d!%+d DA FUCK %+d!%+d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_1
    const short int input_int = -12;
    const char *format = "%+d!%+d DA FUCK %+d!%+d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_2
    const short int input_int = -12;
    const char *format = "%+0.0d!%+0.0d DA FUCK %+0.0d!%+0.0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_3
    const short int input_int = 12;
    const char *format = "%+0.0d!%+0.0d DA FUCK %+0.0d!%+0.0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_4
    const short int input_int = 12;
    const char *format = "%+1.0d!%+2.0d DA FUCK %+1.0d!%+2.0d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_5
    const short int input_int = 12;
    const char *format = "%+0.1d!%+0.2d DA FUCK %+0.1d!%+0.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_6
    const short int input_int = -12;
    const char *format = "%+0.1d!%+0.2d DA FUCK %+0.1d!%+0.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_7
    const short int input_int = 12;
    const char *format = "%+6.1d!%+7.2d DA FUCK %+8.1d!%+9.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_8
    const short int input_int = -12;
    const char *format = "%+6.1d!%+7.2d DA FUCK %+8.1d!%+9.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_9
    const short int input_int = 12;
    const char *format = "%+8.6d!%+9.7d DA FUCK %+10.8d!%+11.9d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_9_1
    const short int input_int = -12;
    const char *format = "%8.6d!%9.7d DA FUCK %10.8d!%11.9d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_10
    const short int input_int = 12;
    const char *format = "%+6.8d!%+7.9d DA FUCK %+8.10d!%+9.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_11
    const short int input_int = -12;
    const char *format = "%+6.8d!%+7.9d DA FUCK %+8.10d!%+9.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_12
    const short int input_int = 7890;
    const char *format = "%+6.8d!%+7.9d DA FUCK %+8.10d!%+9.11d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_13
    const short int input_int = -7890;
    const char *format = "%+6.2d!%+7.2d DA FUCK %+8.1d!%+9.3d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_14
    const short int input_int = 7890;
    const char *format = "%+16.3d!%+107.3d DA FUCK %+18.2d!%+19.1d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_15
    const short int input_int = -1890;
    const char *format = "%+16.3d!%+17.2d DA FUCK %+18.3d!%+19.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_16
    const short int input_int = 7890;
    const char *format = "%+16.2d!%+107.3d DA FUCK %+18.1d!%+19.3d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_17
    const short int input_int = -7890;
    const char *format = "%+6.2d!%+7.1d DA FUCK %+8.2d!%+9.1d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_18
    const short int input_int = 7890;
    const char *format = "%+16.2d!%+107.1d DA FUCK %+18.1d!%+19.2d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_19
    const short int input_int = -123;
    const char *format = "%+16.2d!%+17.3d DA FUCK %+18.1d!%+19.1d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_plus_20
    const short int input_int = 7890;
    const char *format = "%+160.80d!%+170.90d DA FUCK %+180.100d!%+190.110d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_plus_21
    const short int input_int = -12345;
    const char *format = "%+160.180d!%+170.190d DA FUCK %+180.200d!%+190.210d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_left_justify_0
    const short int input_int = -12345;
    const char *format = "%-+160.180d!%-+170.190d DA FUCK %-+180.200d!%-+190.210d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_1
    const short int input_int = -12345;
    const char *format = "%+-160.180d!%+-170.190d DA FUCK %+-180.200d!%+-190.210d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_2
    const short int input_int = -12345;
    const char *format = "%+-16d!%+-17d DA FUCK %+-18d!%+-19d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_3
    const short int input_int = 1234;
    const char *format = "%-+16d!%-+17d DA FUCK %+-18d!%+-19d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_di_left_justify_4
    const short int input_int = -1234;
    const char *format = "%-+16d!%-+17d DA FUCK %+-18d!%+-19d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_5
    const short int input_int = 1234;
    const char *format = "%-16.10d!%-17.10d DA FUCK %-18.8d!%-19.8d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_6
    const short int input_int = 1234;
    const char *format = "%-+16.10d!%-+17.10d DA FUCK %-+18.8d!%-+19.8d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_7
    const short int input_int = 12;
    const char *format = "%-6.4d!%-7.5d DA FUCK %-8.4d!%-9.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_8
    const short int input_int = -12;
    const char *format = "%-6.4d!%-7.5d DA FUCK %-8.4d!%-9.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_9
    const short int input_int = 12;
    const char *format = "%-+6.4d!%-+7.5d DA FUCK %-+8.4d!%-+9.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_10
    const short int input_int = -12;
    const char *format = "%-+6.4d!%-+7.5d DA FUCK %-+8.4d!%-+9.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_11
    const short int input_int = 123;
    const char *format = "%+-6.4d!%+-7.5d DA FUCK %+-8.4d!%+-9.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_di_left_justify_12
    const short int input_int = -123;
    const char *format = "%+-6.4d!%+-7.5d DA FUCK %+-8.4d!%+-9.5d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_di_specifier_test10
    const short int input_int = 0x7FFF;
    const char *format = "+20.30i%+9.5i%+-30.15i%-5.10i Hello, Word %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_di_specifier_test11
    const short int input_int = 0x7231;
    const char *format = "+20.30i%+9.5i%+-30.15i%-5.10i Hello, Word %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_di_specifier_test12
    const short int input_int = -0x7FFF;
    const char *format = "+20.30i%+9.5i%+-30.15i%-5.10i Hello, Word %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_di_specifier_test13
    const short int input_int = 017777;
    const char *format = "+20.30i%+9.5i%+-30.15i%-5.10i Hello, Word %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_di_specifier_test14
    const short int input_int = 03443;
    const char *format = "+20.30i%+9.5i%+-30.15i%-5.10i Hello, Word %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_di_specifier_test15
    const short int input_int = -017777;
    const char *format = "+20.30i%+9.5i%+-30.15i%-5.10i Hello, Word %-50.25i%-50.25i%+0.0i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular value - right-justify flag test
#test s21_sprintf_di_specifier_test16
   const short int input_int = 12;
   const char *format = "%5i%5i Hello, Word %5i%5i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_di_specifier_test17
   const short int input_int = -12;
   const char *format = "%5i%5i Hello, Word %5i%5i";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - right-justify flag test
#test s21_sprintf_di_specifier_test18
   const short int input_int = -12349;
   const char *format = "%i%5i Hello, Word %5i%5i";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_di_specifier_test19
   const short int input_int = -12349;
   const char *format = "%15i%5i Hello, Word %51i%5i";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test
#test s21_sprintf_di_specifier_test20
   const short int input_int = -12;
   const char *format = "%-5i%-5i Hello, Word %-5i%-5i";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test with different width
#test s21_sprintf_di_specifier_test21
   const short int input_int = -12;
   const char *format = "%-5d%-10d%-15d Hello, Word %-5d%-10d%-15d";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_di_specifier_test22
   const short int input_int = -12;
   const char *format = "%-+3i%-+5i Hello, Word %-+7i%-+10i";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_di_specifier_test23
   const short int input_int = -12345;
   const char *format = "%-+5i%-+5i Hello, Word %-+50i%-+50i";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_di_specifier_test24
   const short int input_int = 12345;
   const char *format = "%-+5i%-+5i Hello, Word %-+50i%-+50i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test
#test s21_sprintf_di_specifier_test25
   const short int input_int = 12;
   const char *format = "%.5i!%.5i Hello, Word %.5i!%.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test (two-digit number)
#test s21_sprintf_di_specifier_test26
   const short int input_int = 12345;
   const char *format = "%.15i!%.15i Hello, Word %.15i!%.15i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test with different precision
#test s21_sprintf_di_specifier_test27
   const short int input_int = 12345;
   const char *format = "%.1i!%.3i Hello, Word %.i!%.15i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - precision test with same values
#test s21_sprintf_di_specifier_test28
   const short int input_int = -12345;
   const char *format = "%.7i!%.7i Hello, Word %.7i!%.7i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - precision test with same values
#test s21_sprintf_di_specifier_test29
   const short int input_int = -12345;
   const char *format = "%.7i!%.7i Hello, Word %.7i!%.7i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - precision test with different values
#test s21_sprintf_di_specifier_test30
   const short int input_int = -12345;
   const char *format = "%.7i!%.17i Hello, Word %.27i!%.37i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test
#test s21_sprintf_di_specifier_test31
   const short int input_int = 12;
   const char *format = "%11.2i!%9.2i Hello, Word %7.2i!%5.2i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test
#test s21_sprintf_di_specifier_test32
   const short int input_int = -12345;
   const char *format = "%11.2i!%9.2i Hello, Word %7.2i!%5.2i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test - zero precision
#test s21_sprintf_di_specifier_test33
   const short int input_int = -12345;
   const char *format = "%11.0i!%9.0i Hello, Word %7.0i!%5.0i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test - zero precision
#test s21_sprintf_di_specifier_test34
   const short int input_int = 123;
   const char *format = "%11.0i!%9.0i Hello, Word %7.0i!%5.0i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_di_specifier_test35
   const short int input_int = 12;
   const char *format = "%11.12i!%9.10i Hello, Word %5.10i!%10.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_di_specifier_test36
   const short int input_int = -12;
   const char *format = "%11.12i!%9.10i Hello, Word %5.10i!%10.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_di_specifier_test37
   const short int input_int = 12345;
   const char *format = "%4.5i!%7.8i Hello, Word %5.10i!%10.5i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Sign with regular int test
#test s21_sprintf_di_specifier_test38
   const short int input_int = 12345;
   const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_di_specifier_test39
    const short int input_int = 0x7FFF;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_di_specifier_test40
    const short int input_int = 0x7231;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_di_specifier_test41
    const short int input_int = -0x7FFF;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with maximum value of octal int
#test s21_sprintf_di_specifier_test42
    const short int input_int = 017777;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with normal value of octal int
#test s21_sprintf_di_specifier_test43
    const short int input_int = 034437;
    const char *format ="%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// %i Sign with minimum value of octal int
#test s21_sprintf_di_specifier_test44
    const short int input_int = -017777;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with maximum int test
#test s21_sprintf_di_specifier_test45
    const short int input_int = 32767;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with minimum int test
#test s21_sprintf_di_specifier_test46
    const short int input_int = -32768;
    const char *format = "%+i%+i%+i Hello, Word %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_di_specifier_test47
    const short int input_int = 0x7FFF;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_di_specifier_test48
    const short int input_int = 0x7231;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_di_specifier_test49
    const short int input_int = -0x7FFF;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_di_specifier_test50
    const short int input_int = 017777;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_di_specifier_test51
    const short int input_int = 03443;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_di_specifier_test52
    const short int input_int = -017777;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum int test - left-justified with no value
#test s21_sprintf_di_specifier_test53
    const short int input_int = 32767;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum int test - left-justified with no value
#test s21_sprintf_di_specifier_test54
    const short int input_int = -32768;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - left-justified with no value
#test s21_sprintf_di_specifier_test55
    const short int input_int = 7487;
    const char *format = "%-i%-i%-i Hello, Word %-i%-i%-i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_di_specifier_test56
    const short int input_int = 7436;
    const char *format = "%+-3i%-7i%-10i Hello, Word %+-3.3i%-7.7i%-10.10i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_di_specifier_test57
    const short int input_int = 7483;
    const char *format = "%+-.3i%-.7i%-.10i Hello, Word %+-3.i%-7.i%-10.i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Minimum d test
#test s21_sprintf_di_specifier_test58
    const short int input_int = -32768;
    const char *format = "%+-.3d%-.7d%-.10d Hello, Word %+-3.d%-7.d%-10.d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Maximum d test
#test s21_sprintf_di_specifier_test59
    const short int input_int = 32767;
    const char *format = "%+-.3d%-.7d%-.10d Hello, Word %+-3.d%-7.d%-10.d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum i test
#test s21_sprintf_di_specifier_test60
    const short int input_int = -32768;
    const char *format = "%+-.3i%-.7i%-.10i Hello, Word %+-3.i%-7.i%-10.i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum d test
#test s21_sprintf_di_specifier_test61
    const short int input_int = 32767;
    const char *format = "%+-.3i%-.7i%-.10d Hello, Word %+-3.i%-7.i%-10.i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Zero i test - left
#test s21_sprintf_di_specifier_test62
    const int input_int = 0;
    const char *format = "%+-.3i%-.7i%-.10i Hello, Word %+-3.i%-7.i%-10.i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Zero d test - left
#test s21_sprintf_di_specifier_test63
    const int input_int = 0;
    const char *format = "%+-.3d%-.7d%-.10d Hello, Word %+-3.d%-7.d%-10.d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %d Zero test - right
#test s21_sprintf_di_specifier_test64
    const int input_int = 0;
    const char *format = "%+.3i%.7i%.10i Hello, Word %+3.i%7.i%10.i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Zero d test - right
#test s21_sprintf_di_specifier_test65
    const int input_int = 0;
    const char *format = "%+-.3d%-.7d%-.10d Hello, Word %+-3.d%7.d%10.d";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);







// DOES NOT WORK AND IS NOT SUPPOSED TO WORK
//// Sign, width (right-justify) bigger than the argp and precision zero with positive value
//#test s21_sprintf_test_lf_finchren_341
//    const double input_double = 12346487.83;
//    //const char *format = "%+58.0!%+55.0 Hello, %+78.0%+78.0%+33.0 World %+78.0!%+98.0";
//    const char *format = "%+8.0!%+5.0 !Hello, %+7.0%+7.0%+3.0 World %+7.0!%+9.0";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);











// Zero value
#test s21_sprintf_test_lf_finchren_135
    const double input_double = 0.000;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%f+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);










// ROUNDING ERRORS, PRINTING MORE THAN NUMBER GOT
//#test s21_sprintf_test_lf_9
//    const double input_double = -98765.123456789;
//    const char *format = "%.10f!%.11f Hello, World %.11f!%.11f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);
//
//
//#test s21_sprintf_test_lf_9_1
//    const double input_double = -98765.123456789;
//    const char *format = "%.10f!%.11f Hello, World %.12f!%.13f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);





#test s21_sprintf_test_lf_width_precision_zeros_3
    const double input_double = -0.001234567890123456789;
    const char *format = "%5.8f!%5.9f Hello, World %4.10f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_precision_zeros_0
    const double input_double = -00000.001234567890123456789;
    const char *format = "%5.8f!%5.9f Hello, World %4.10f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
















// OVERFLAW
//#test s21_sprintf_test_lf_range_0
//    const double input_double = 1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.0; // 100 digits before '.'
//    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);
//
//
//#test s21_sprintf_test_lf_range_1
//    const double input_double = -1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890.0; // 100 digits before '.'
//    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_0
    const double input_double = 123.0123456789;
    const char *format = "%5.f!%5.f Hello, World %4.f!%6.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_0
    const double input_double = 12.0;
    const char *format = "%+ f!% f Hello, World % f!% 12f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_1
    const double input_double = 12.0;
    const char *format = "%+f!%f Hello, World %  f!% 12f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_2
    const double input_double = 12.0;
    const char *format = "% f!%  f Hello, World %   123     f!%   f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_space_3
    const double input_double = 12.0;
    const char *format = "% f!%  f Hello, World %   123.7 +-   -+    f!%   f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_0
    const double input_double = 12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_1
    const double input_double = -12.0;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2
    const double input_double = -12.0123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_2_1
    const double input_double = -12.01234544444449;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_3
    const double input_double = 98765.00123456789;
    const char *format = "%f!%f Hello, World %f!%f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_4
    const double input_double = 98765.123456789;
    const char *format = "%f!%f Hello, World %.0f!%.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_5
    const double input_double = 98765.123456789;
    const char *format = "%.f!%.f Hello, World %.f!%.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_6
    const double input_double = 98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_lf_7
    const double input_double = -98765.123456789;
    const char *format = "%.1f!%.3f Hello, World %.2f!%.4f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_lf_8
    const double input_double = -98765.123456789;
    const char *format = "%.6f!%.9f Hello, World %.6f!%.9f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);













#test s21_sprintf_test_lf_10
    const double input_double = -12.01234567890123456;
    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//  LONG LONG INT OVERFLAW


//#test s21_sprintf_test_lf_11
//    const double input_double = -9876543210.01234567890123456;
//    const char *format = "%.13f!%.13f Hello, World %.13f!%.13f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_0
    const double input_double = -12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_1
    const double input_double = 12.01;
    const char *format = "%0.4f!%0.5f Hello, World %0.6f!%0.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_2
    const double input_double = 12.013;
    const char *format = "%2.4f!%1.5f Hello, World %2.6f!%1.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_3
    const double input_double = 12.013;
    const char *format = "%6.4f!%6.5f Hello, World %6.6f!%6.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_4
    const double input_double = 12.013;
    const char *format = "%10.4f!%16.5f Hello, World %26.6f!%36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_5
    const double input_double = 12.013;
    const char *format = "%-10.4f!%-16.5f Hello, World %-26.6f!%-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_0
    const double input_double = 12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_1
    const double input_double = -12.013;
    const char *format = "%+-10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_2
    const double input_double = -12.013;
    const char *format = "%-+10.4f!%+-16.5f Hello, World %+-26.6f!%+-36.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_3
    const double input_double = -123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_sign_4
    const double input_double = 123456.0123456789;
    const char *format = "%-+30.4f!%+-36.5f Hello, World %+-46.6f!%+-56.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


/////////////////////////////


#test s21_sprintf_test_lf_width_precision_0
    const double input_double = 123.012345;
    const char *format = "%-+5.7f!%+-5.9f Hello, World %+-4.11f!%+-6.7f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_precision_1
    const double input_double = 123.012345;
    const char *format = "%5.12f!%5.13f Hello, World %4.11f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// ROUNDING ERRORS, THEY DON'T MATCH EACH OTHER
//#test s21_sprintf_test_lf_width_precision_zeros_4
//    const double input_double = 0.0123456789012345678;
//    const char *format = "%5.20f!%5.20f Hello, World %4.20f!%6.20f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);








#test s21_sprintf_test_lf_width_precision_zeros_2
    const double input_double = 0.001234567890123456789;
    const char *format = "%5.8f!%5.9f Hello, World %4.10f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_precision_zeros_1
    const double input_double = 00000.001234567890123456789;
    const char *format = "%5.8f!%5.9f Hello, World %4.10f!%6.11f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);















#test s21_sprintf_test_lf_width_default_precision_1
    const double input_double = 123.0123456789;
    const char *format = "%5.0f!%5.0f Hello, World %4.0f!%6.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_3
    const double input_double = 123.0123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_4
    const double input_double = 123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_5
    const double input_double = 123.0123456789;
    const char *format = "%25.0f!%25.0f Hello, World %24.0f!%26.0f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_6
    const double input_double = 123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_7
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-10f!%5.-12f Hello, World %4.-15f!%6.-19f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-0f!%5.-0f Hello, World %4.-0f!%6.-0f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_8_1
//    const double input_double = 123.0123456789;
//    const char *format = "%5.-f!%5.-f Hello, World %4.-f!%6.-f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);










#test s21_sprintf_test_lf_width_default_precision_9
    const double input_double = -123.0123456789;
    const char *format = "%5f!%5f Hello, World %4f!%6f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_10
    const double input_double = -123.0123456789;
    const char *format = "%25.f!%25.f Hello, World %24.f!%26.f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_width_default_precision_12
    const double input_double = -123.0123456789;
    const char *format = "%25f!%25f Hello, World %24f!%26f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// CAN NOT COMPILED WITH FLAGS
//#test s21_sprintf_test_lf_width_default_precision_11
//    const double input_double = 123.012345678901;
//    const char *format = "%25.-0f!%25.-0f Hello, World %24.-0f!%26.-0f";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);






#test s21_sprintf_test_lf_width_default_precision_round_0
    const double input_double = 12345.038766;
    const char *format = "%+.3f!%+.2f Hello, %+.2f%+.2f%+.4f World %+.5f!%+.1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_round_1
    const double input_double = 12345.038764;
    const char *format = "%+.3f!%+.2f Hello, %+.2f%+.2f%+.4f World %+.5f!%+.1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// ERROR IF ROUNDING WITH ONE DIGIT INSTEAD OF TWO DIGITS
//#test s21_sprintf_test_lf_width_default_precision_round_2_0
//    const double input_double = 12345.038765;
//    const char *format = "%+.3f!%+.2f! Hello, %+.2f!%+.2f!%+.4f! World %+.5f!%+.1f!";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_round_2_1
    const double input_double = 12345.0387651;
    const char *format = "%+.3f!%+.2f Hello, %+.2f%+.2f%+.4f World %+.5f!%+.1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lf_width_default_precision_round_2_2
    const double input_double = 12345.0387652;
    const char *format = "%+.3f!%+.2f Hello, %+.2f%+.2f%+.4f World %+.5f!%+.1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lf_width_default_precision_round_2_3
    const double input_double = 12345.0387652;
    const char *format = "%+.3f!%+.2f Hello, %+.2f%+.2f%+.4f World %+.5f!%+.1f";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

// !!! Start of the tests with no flags

// Regular value test with no precision set
#test s21_sprintf_test_lf_finchren_001
    const double input_double = 123567.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is bigger than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_002
    const double input_double = 123.12394556;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Value after the decimal point that is less than defaul precision of 6, test with no precision set
#test s21_sprintf_test_lf_finchren_003
    const double input_double = 1234567.123;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// No value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_004
    const double input_double = 1234567.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value after the decimal point, test with no precision set
#test s21_sprintf_test_lf_finchren_005
    const double input_double = 1234567.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_014
    const double input_double = 0.;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with minimum value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_015
    const double input_double = 0.0;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with less than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_016
    const double input_double = 0.823;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with equal to 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_017
    const double input_double = 0.123456;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with bigger than 6 value after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_018
    const double input_double = 0.723456789;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Minimum value before the decimal point with 10 digits after the decimal point test with no precision set
#test s21_sprintf_test_lf_finchren_019
    const double input_double = 0.5289052890;
    const char *format = "%f!%f Hello, %f%f%f World %f!%f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of regular tests with no flags

// !!! Start of tests with width only

// !!! Right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_024
    const double input_double = -811713.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_025
    const double input_double = -81170.000000;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_026
    const double input_double = -8117.124567;
    const char *format = "%12f!%12f Hello, %12f%12f%12f World %12f!%12f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_027
    const double input_double = -811.7892;
    const char *format = "%9f!%9f Hello, %9f%9f%9f World %9f!%9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different width
#test s21_sprintf_test_lf_finchren_028_0
    const double input_double = -81170.54785;
    const char *format = "%13f!%24f Hello, %33f%37f%32f World %40f!%66f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different 3-digit width
#test s21_sprintf_test_lf_finchren_028_1
    const double input_double = -81170.54785;
    const char *format = "%102f!%142f Hello, %153f%137f%132f World %140f!%166f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_029
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_030
    const double input_double = 0.0;
    const char *format = "%1f!%2f Hello, %2f%1f%2f World %1f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_031
    const double input_double = 0.0;
    const char *format = "%3f!%3f Hello, %3f%3f%3f World %3f!%3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_032_0
    const double input_double = 0.0;
    const char *format = "%5f!%5f Hello, %5f%5f%5f World %5f!%5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_032_1
    const double input_double = 0.0;
    const char *format = "%5f!%7f Hello, %9f%11f%22f World %15f!%5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_033_0
    const double input_double = 0.0;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width with different values
#test s21_sprintf_test_lf_finchren_033_1
    const double input_double = 0.0;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %444f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_034
    const double input_double = 1234.058;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_035_0
    const double input_double = 098.058;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_035_1
    const double input_double = 098.058;
    const char *format = "%2f!%4f Hello, %5f%3f%6f World %1f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_036
    const double input_double = 123490.048;
    const char *format = "%10f!%10f Hello, %10f%10f%10f World %10f!%10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_037_0
    const double input_double = 123450.098;
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_037_1
    const double input_double = 12345.098;
    const char *format = "%25f!%28f Hello, %32f%42f%52f World %25!%27";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_038_0
    const double input_double = 7567890.028;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_038_1
    const double input_double = 7567890.028;
    const char *format = "%111f!%222f Hello, %333f%666f%444f World %111f!%123f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_039
    const double input_double = 123890.098765;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_040_0
    const double input_double = 1234.038765;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_040_1
    const double input_double = 45690.038765;
    const char *format = "%15f!%12f Hello, %5f%7f%11f World %12f!%17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_041
    const double input_double = 234890.098765;
    const char *format = "%13f!%13f Hello, %13f%13f%13f World %13f!%13f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_042_0
    const double input_double = 347890.048765;
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_042_1
    const double input_double = 45890.048765;
    const char *format = "%25f!%27f Hello, %32f%45f%25f World %31f!%52f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_043_0
    const double input_double = 123780.048765;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_043_1
    const double input_double = 1237890.04765;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%222f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_044
    const double input_double = 15670.04821;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_045_0
    const double input_double = 1230.09876521;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_045_1
    const double input_double = 12345.09821;
    const char *format = "%2f!%5f Hello, %20f%10f%5f World %7f!%1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_046
    const double input_double = 1234.0387;
    const char *format = "%21f!%21f Hello, %21f%21f%21f World %21f!%21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_047_0
    const double input_double = 123.098765;
    const char *format = "%25f!%25f Hello, %25f%25f%25f World %25f!%25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_047_1
    const double input_double = 1230.04871;
    const char *format = "%25f!%65f Hello, %35f%25f%27f World %43f!%55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_048_0
    const double input_double = 123.028765;
    const char *format = "%666f!%666f Hello, %666f%666f%666f World %666f!%666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_048_1
    const double input_double = 120.0287651;
    const char *format = "%111f!%222f Hello, %333f%444f%666f World %111f!%145f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Right justify with max value - more digits after the dot than 6
// Test with width being zero

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_055_0
    const double input_double = 1234567.123;
    const char *format = "%2f!%2f Hello, %2f%2f%2f World %2f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_055_1
    const double input_double = 1234567.123;
    const char *format = "%2f!%5f Hello, %10f%1f%5f World %7f!%2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left-justify

// !!! Left justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_064
    const double input_double = -811700.000000;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - equal values
#test s21_sprintf_test_lf_finchren_065_0
    const double input_double = -81170.000000;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_065_1
    const double input_double = -81.000000;
    const char *format = "%-3f!%-13f Hello, %-23f%-3f%-28f World %-1f!%-11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_066
    const double input_double = -811.000000;
    const char *format = "%-29f!%-29f Hello, %-29f%-29f%-29f World %-29f!%-29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - same values
#test s21_sprintf_test_lf_finchren_067_0
    const double input_double = -8117.000000;
    const char *format = "%-55f!%-55f Hello, %-55f%-55f%-55f World %-55f!%-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_067_1
    const double input_double = -8117.000000;
    const char *format = "%-55f!%-65f Hello, %-57f%-77f%-88f World %-89f!%-99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - sane values
#test s21_sprintf_test_lf_finchren_068_0
    const double input_double = -811741.000000;
    const char *format = "%-666f!%-666f Hello, %-666f%-666f%-666f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - same values
#test s21_sprintf_test_lf_finchren_068_1
    const double input_double = -811703.000000;
    const char *format = "%-111f!%-222f Hello, %-624f%-666f%-646f World %-698f!%-678f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_069
    const double input_double = 0.0;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - same values
#test s21_sprintf_test_lf_finchren_070_0
    const double input_double = 0.0;
    const char *format = "%-2f!%-2f Hello, %-2f%-2f%-2f World %-2f!%-2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp - different values
#test s21_sprintf_test_lf_finchren_070_1
    const double input_double = 0.0;
    const char *format = "%-1f!%-2f Hello, %-1f%-2f%-1f World %-1f!%-1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_071
    const double input_double = 0.0;
    const char *format = "%-3f!%-3f Hello, %-3f%-3f%-3f World %-3f!%-3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_072
    const double input_double = 0.0;
    const char *format = "%-5f!%-7f Hello, %-11f%-8f%-22f World %-33f!%-32f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_073
    const double input_double = 0.0;
    const char *format = "%-666f!%-111f Hello, %-222f%-616f%-143f World %-666f!%-612f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_074
    const double input_double = 14567890.098;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_075
    const double input_double = 12347890.038;
    const char *format = "%-3f!%-2f Hello, %-11f%-10f%-7f World %-8f!%-9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_076
    const double input_double = 12367890.098;
    const char *format = "%-12f!%-12f Hello, %-12f%-12f%-12f World %-12f!%-12f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_077
    const double input_double = 12367890.018;
    const char *format = "%-25f!%-32f Hello, %-24f%-77f%-88f World %-99f!%-25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_078
    const double input_double = 12345670.098;
    const char *format = "%-111f!%-222f Hello, %-333f%-666f%-666f World %-234f!%-345f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_079
    const double input_double = 1230.048765;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_080
    const double input_double = 12390.098765;
    const char *format = "%-2f!%-3f Hello, %-11f%-10f%-9f World %-2f!%-10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_081
    const double input_double = 12340.048765;
    const char *format = "%-12f!%-12f Hello, %-12f%-12f%-12f World %-12f!%-12f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp - different values
#test s21_sprintf_test_lf_finchren_082
    const double input_double = 1290.098;
    const char *format = "%-27f!%-25f Hello, %-35f%-42f%-55f World %-66f!%-77f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width - different values
#test s21_sprintf_test_lf_finchren_083
    const double input_double = 1234.0385;
    const char *format = "%-666f!%-456f Hello, %-111f%-777f%-666f World %-785f!%-985f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_084
    const double input_double = 1234.0987;
    const char *format = "%0f!%0f Hello, %0f%0f%0f World %0f!%0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_085
    const double input_double = 123.04876;
    const char *format = "%-8f!%-7f Hello, %-4f%-5f%-7f World %-8f!%-7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_086
    const double input_double = 1234.09876;
    const char *format = "%-10f!%-10f Hello, %-10f%-10f%-10f World %-10f!%-10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_087
    const double input_double = 123.058721;
    const char *format = "%-25f!%-34f Hello, %-35f%-37f%-44f World %-55f!%-67f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_088
    const double input_double = 10.0987;
    const char *format = "%-222f!%-123f Hello, %-234f%-344f%-777f World %-686f!%-669f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_098
    const double input_double = 340.12345;
    const char *format = "%-611f!%-655f Hello, %-777f%-888f%-699f World %-666f!%-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of tests with width only

// !!! Start precision only
// !!! Precision with max negative value
// Test with precision being zero

// Regular negative value
#test s21_sprintf_test_lf_finchren_101
    const double input_double = -811.7234;
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_102
    const double input_double = 0.0;
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_103
    const double input_double = 123.098765;
    const char *format = "%.0f!%.0f Hello, %.0f%.0f%.0f World %.0f!%.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
    
// Test with precision being less than the amount of digits after the dot

// Regular negative value
#test s21_sprintf_test_lf_finchren_108
    const double input_double = -811783.42890;
    const char *format = "%.4f!%.2f Hello, %.1f%.2f%.54 World %.3f!%.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_109
    const double input_double = 0.000000;
    const char *format = "%.3f!%.4f Hello, %.5f%.3f%.3f World %.6f!%.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_110
    const double input_double = 123490.123890;
    const char *format = "%.1f!%.1f Hello, %.1f%.1f%.1f World %.1f!%.1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular negative value
#test s21_sprintf_test_lf_finchren_115
    const double input_double = -8117041.95690;
    const char *format = "%.7f!%.7f Hello, %.7f%.7f%.7f World %.7f!%.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Zero value
#test s21_sprintf_test_lf_finchren_116
    const double input_double = 0.000;
    const char *format = "%.3f!%.3f Hello, %.3f%.3f%.3f World %.3f!%.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value
#test s21_sprintf_test_lf_finchren_117
    const double input_double = 1234560.7234;
    const char *format = "%.10f!%.10f Hello, %.10f%.10f%.10f World %.10f!%.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Test with precision being more than the amount of digits after the dot

// Zero value
#test s21_sprintf_test_lf_finchren_125
    const double input_double = 0.000;
    const char *format = "%.6f!%.6f Hello, %.6f%.6f%.6f World %.6f!%.6f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End precision only

// !!! Start of sign only

// Regular negative value
#test s21_sprintf_test_lf_finchren_134
    const double input_double = -81171.1234567;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);














// Regular value
#test s21_sprintf_test_lf_finchren_135_0
    const double input_double = 123456.123470;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision
#test s21_sprintf_test_lf_finchren_136
    const double input_double = 123456.123690;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Regular value - 10 precision - 1 digit before the dot
#test s21_sprintf_test_lf_finchren_137
    const double input_double = 1.1267890;
    const char *format = "%+f!%+f Hello, %+f%+f%+f World %+f!%+f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sing right justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_145
    const double input_double = -8110.000000;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_146
    const double input_double = -81140.000000;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_147
    const double input_double = -81140.000000;
    const char *format = "%+29f!%+29f Hello, %+29f%+29f%+29f World %+29f!%+29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_148
    const double input_double = -87040.000000;
    const char *format = "%+55f!%+55f Hello, %+55f%+55f%+55f World %+55f!%+55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_149
    const double input_double = -81170.000000;
    const char *format = "%+666f!%+666f Hello, %+666f%+666f%+666f World %+666f!%+666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_150
    const double input_double = 0.0;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_151
    const double input_double = 0.0;
    const char *format = "%+2f!%+2f Hello, %+2f%+2f%+2f World %+2f!%+2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_152
    const double input_double = 0.0;
    const char *format = "%+3f!%+3f Hello, %+3f%+3f%+3f World %+3f!%+3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_153
    const double input_double = 0.0;
    const char *format = "%+5f!%+5f Hello, %+5f%+5f%+5f World %+5f!%+5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_154
    const double input_double = 0.0;
    const char *format = "%+111f!%+222f Hello, %+333f%+666f%+666f World %+666f!%+444f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_155
    const double input_double = 12347890.028;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_156
    const double input_double = 12345690.098;
    const char *format = "%+2f!%+2f Hello, %+2f%+2f%+2f World %+2f!%+2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_157
    const double input_double = 123457890.028;
    const char *format = "%+14f!%+14f Hello, %+14f%+14f%+14f World %+14f!%+14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_158
    const double input_double = 12345.098;
    const char *format = "%+27f!%+25f Hello, %+42f%+25f%+25f World %+67f!%+25f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_159
    const double input_double = 12345.028;
    const char *format = "%+111f!%+613f Hello, %+612f%+666f%+123f World %+444f!%+656f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_160
    const double input_double = 1234.098765;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_161
    const double input_double = 123456.028765;
    const char *format = "%+2f!%+7f Hello, %+10f%+11f%+15f World %+2f!%+4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_162
    const double input_double = 12345.098765;
    const char *format = "%+17f!%+17f Hello, %+17f%+17f%+17f World %+17f!%+17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_163
    const double input_double = 1234.028765;
    const char *format = "%+25f!%+18f Hello, %+28f%+25f%+29f World %+66f!%+77f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_164
    const double input_double = 12345.098765;
    const char *format = "%+123f!%+345f Hello, %+234f%+666f%+343f World %+345f!%+3434f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign right justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_165
    const double input_double = 1234890.0765;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_166
    const double input_double = 12347890.028;
    const char *format = "%+2f!%+4f Hello, %+17f%+20f%+12f World %+9f!%+17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_167
    const double input_double = 123456.094321;
    const char *format = "%+21f!%+21f Hello, %+21f%+21f%+21f World %+21f!%+21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_168
    const double input_double = 1267890.0221;
    const char *format = "%+25f!%+45f Hello, %+35f%+34f%+45f World %+65f!%+45f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_169
    const double input_double = 1237890.09321;
    const char *format = "%+123f!%+345f Hello, %+234f%+345f%+634f World %+645f!%+634f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left-justify

// !!! Sign left justify with negative value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_185
    const double input_double = -81140.000000;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_186
    const double input_double = -81170.000000;
    const char *format = "%+-3f!%+-7f Hello, %+-27f%+-13f%+-3f World %+-15f!%+-27f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_187
    const double input_double = -81040.000000;
    const char *format = "%+-29f!%+-29f Hello, %+-29f%+-29f%+-29f World %+-29f!%+-29f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_188
    const double input_double = -81040.000000;
    const char *format = "%+-75f!%+-55f Hello, %+-45f%+-55f%+-45f World %+-85f!%+-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_189
    const double input_double = -81140.000000;
    const char *format = "%+-247f!%+-654f Hello, %+-897f%+-254f%+-278f World %+-357f!%+-999f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left justify with zero value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_190
    const double input_double = 0.0;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_191
    const double input_double = 0.0;
    const char *format = "%+-1f!%+-2f Hello, %+-1f%+-2f%+-1f World %+-2f!%+-1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_192
    const double input_double = 0.0;
    const char *format = "%+-3f!%+-3f Hello, %+-3f%+-3f%+-3f World %+-3f!%+-3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_193
    const double input_double = 0.0;
    const char *format = "%+-7f!%+-9f Hello, %+-5f%+-15f%+-24f World %+-34f!%+-55f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_194
    const double input_double = 0.0;
    const char *format = "%+-123f!%+-226f Hello, %+-567f%+-789f%+-123f World %+-678f!%+-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left justify with regular value - less digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_195
    const double input_double = 12345890.038;
    const char *format = "%++-7f!%++-2f Hello, %++-13f%++-2f%++-11f World %++-7f!%++-4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_196
    const double input_double = 12345890.038;
    const char *format = "%+-2f!%+-2f Hello, %+-2f%+-2f%+-2f World %+-2f!%+-2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_197
    const double input_double = 12345890.098;
    const char *format = "%+-14f!%+-14f Hello, %+-14f%+-14f%+-14f World %+-14f!%+-14f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_198
    const double input_double = 12345690.038;
    const char *format = "%+-47f!%+-78f Hello, %+-24f%+-27f%+-15f World %+-77f!%+-99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_199
    const double input_double = 12347890.098;
    const char *format = "%+-111f!%+-214f Hello, %+-457f%+-654f%+-999f World %+-752f!%+-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Left justify with regular value
// Test with width being zero
#test s21_sprintf_test_lf_finchren_200
    const double input_double = 12345.038765;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_201
    const double input_double = 123456.098765;
    const char *format = "%+-14f!%+-11f Hello, %+-8f%+-2f%+-9f World %+-1f!%+-2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_202
    const double input_double = 12345.038765;
    const char *format = "%+-17f!%+-17f Hello, %+-17f%+-17f%+-17f World %+-17f!%+-17f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_203
    const double input_double = 123456.098765;
    const char *format = "%+-27f!%+-52f Hello, %+-78f%+-29f%+-45f World %+-27f!%+-99f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_204
    const double input_double = 12345.038765;
    const char *format = "%+-123f!%+-244f Hello, %+-245f%+-456f%+-789f World %+-678f!%+-666f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with left justify with regular value - more digits after the dot than 6
// Test with width being zero
#test s21_sprintf_test_lf_finchren_205
    const double input_double = 12345.096543;
    const char *format = "%+0f!%+0f Hello, %+0f%+0f%+0f World %+0f!%+0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being less than the vrgp
#test s21_sprintf_test_lf_finchren_206
    const double input_double = 12345.0387;
    const char *format = "%+-11f!%+-7f Hello, %+-2f%+-2f%+-15f World %+-2f!%+-20f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being equal to the vrgp
#test s21_sprintf_test_lf_finchren_207
    const double input_double = 12.09854321;
    const char *format = "%+-21f!%+-21f Hello, %+-21f%+-21f%+-21f World %+-21f!%+-21f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with width being more than the vrgp
#test s21_sprintf_test_lf_finchren_208
    const double input_double = 12340.076321;
    const char *format = "%+-75f!%+-25f Hello, %+-55f%+-25f%+-25f World %+-35f!%+-77f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with 3-digit width
#test s21_sprintf_test_lf_finchren_209
    const double input_double = 0.;
    const char *format = "%+-166f!%+-666f Hello, %+-333f%+-999f%+-666f World %+-785f!%+-754f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of sign and width flags together

// !!! Begging of sign and precision together tests

// !!! Sign with precision with zero value
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_231
    const double input_double = 0.0;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_232
    const double input_double = 0.0;
    const char *format = "%+.1f!%+.1f Hello, %+.1f%+.1f%+.1f World %+.1f!%+.1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_233
    const double input_double = 0.0;
    const char *format = "%+.7f!%+.8f Hello, %+.5f%+.9f%+.5f World %+.5f!%+.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with precision with regular value - less digits after the dot than 6
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_235
    const double input_double = 123456890.038;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being less than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_236
    const double input_double = 12345.098;
    const char *format = "%+.2f!%+.2f Hello, %+.2f%+.2f%+.2f World %+.2f!%+.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_237
    const double input_double = 123.038;
    const char *format = "%+.3f!%+.3f Hello, %+.3f%+.3f%+.3f World %+.3f!%+.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_238
    const double input_double = 12345.098;
    const char *format = "%+.5f!%+.5f Hello, %+.5f%+.5f%+.5f World %+.5f!%+.5f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Precision with regular value
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_241
    const double input_double = 12345.098765;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being less than the amount of digits after the dot
// ROUNDING ERROR
//#test s21_sprintf_test_lf_finchren_242
//    const double input_double = 12345.038765;
//    const char *format = "%+.3f!%+.2f! Hello, %+.2f!%+.2f!%+.4f! World %+.5f!%+.1f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_243
    const double input_double = 123.8556;
    const char *format = "%+.4f!%+.4f Hello, %+.4f%+.4f%+.4f World %+.4f!%+.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being more than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_244
    const double input_double = 123.038765;
    const char *format = "%11f!%9f Hello, %9f%9f%9f World %8f!%7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! Sign with precision with regular value - more digits after the dot than 6
// Test with precision being zero
#test s21_sprintf_test_lf_finchren_247
    const double input_double = 1234.09876;
    const char *format = "%+.0f!%+.0f Hello, %+.0f%+.0f%+.0f World %+.0f!%+.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being less than the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_248
    const double input_double = 1234.0387;
    const char *format = "%+.1f!%+.2f Hello, %+.3f%+.2f%+.3f World %+.2f!%+.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Test with precision being equal to the amount of digits after the dot
#test s21_sprintf_test_lf_finchren_249
    const double input_double = 1234567890.09;
    const char *format = "%+.2f!%+.2f Hello, %+.2f%+.2f%+.2f World %+.2f!%+.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// !!! End of sign and precision together tests

// Precision and width being zero with negative value
#test s21_sprintf_test_lf_finchren_258
    const double input_double = -516925439.3;
    const char *format = "%0.0f!%0.0f Hello, %0.0f%0.0f%0.0f World %0.0f!%0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Precision and width being zero with zero
#test s21_sprintf_test_lf_finchren_259
    const double input_double = 0.0;
    const char *format = "%0.0f!%0.0f Hello, %0.0f%0.0f%0.0f World %0.0f!%0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Precision and width being zero with positive value
#test s21_sprintf_test_lf_finchren_260
    const double input_double = 516925439.875;
    const char *format = "%0.0f!%0.0f Hello, %0.0f%0.0f%0.0f World %0.0f!%0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_263
    const double input_double = -12346487.235;
    const char *format = "%13.0f!%13.0f Hello, %13.0f%13.0f%13.0f World %13.0f!%13.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_264
    const double input_double = 0.0;
    const char *format = "%3.0f!%3.0f Hello, %3.0f%3.0f%3.0f World %3.0f!%3.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_265
    const double input_double = 12346487.4355;
    const char *format = "%13.0f!%13.0f Hello, %13.0f%13.0f%13.0f World %13.0f!%13.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_268
    const double input_double = -12346487.53;
    const char *format = "%21.0f!%21.0f Hello, %21.0f%21.0f%21.0f World %21.0f!%21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_269
    const double input_double = 0.0;
    const char *format = "%15.0f!%15.0f Hello, %15.0f%15.0f%15.0f World %15.0f!%15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_270
    const double input_double = 123.2355467;
    const char *format = "%78.0f!%78.0f Hello, %78.0f%78.0f%78.0f World %78.0f!%78.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_273
    const double input_double = -1.2355467865;
    const char *format = "%-13.0f!%-13.0f Hello, %-13.0f%-13.0f%-13.0f World %-13.0f!%-13.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_274
    const double input_double = 0.0;
    const char *format = "%-3.0f!%-3.0f Hello, %-31.0f%-3.0f%-3.0f World %-3.0f!%-3.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_275
    const double input_double = 12346487.43;
    const char *format = "%-11.0f!%-11.0f Hello, %-11.0f%f%-11.0f World %-11.0f!%-11.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_279
    const double input_double = -12346487.73;
    const char *format = "%-21.0f!%-21.0f Hello, %-21.0f%-21.0f%-21.0f World %-21.0f!%-21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_280
    const double input_double = 0.0;
    const char *format = "%-15.0f!%-15.0f Hello, %-15.0f%-15.0f%-15.0f World %-15.0f!%-15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_281
    const double input_double = 12346487.235;
    const char *format = "%-78.0f!%-78.0f Hello, %-78.0f%-78.0f%-78.0f World %-78.0f!%-78.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision less than negative value
#test s21_sprintf_test_lf_finchren_284_rounding_error
    const double input_double = -12346487.8355;
    const char *format = "%0.2f!%0.3f! Hello, %0.1f!%0.2f!%0.2f! World %0.3f!%0.2f!";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision less than zero
#test s21_sprintf_test_lf_finchren_285
    const double input_double = 0.000000;
    const char *format = "%0.3f!%0.2f Hello, %0.3f%0.1f%0.2f World %0.3f!%0.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision less than positive value
#test s21_sprintf_test_lf_finchren_286
    const double input_double = 1234.2342;
    const char *format = "%0.4f!%0.4f Hello, %0.4f%0.4f%0.4f World %0.4f!%0.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision equal to negative value
#test s21_sprintf_test_lf_finchren_289
    const double input_double = -12.8342573574;
    const char *format = "%0.10f!%0.10f Hello, %0.10f%0.10f%0.10f World %0.10f!%0.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision equal to zero
#test s21_sprintf_test_lf_finchren_290
    const double input_double = 0.000000000;
    const char *format = "%0.9f!%0.9f Hello, %0.9f%0.9f%0.9f World %0.9f!%0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision equal to positive value
#test s21_sprintf_test_lf_finchren_291
    const double input_double = 1237.235;
    const char *format = "%0.3f!%0.3f Hello, %0.3f%0.3f%0.3f World %0.3f!%0.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Width (right-justify) equal to zero and precision bigger than negative value
#test s21_sprintf_test_lf_finchren_294
    const double input_double = -1237.835;
    const char *format = "%0.5f!%0.7f Hello, %0.8f%0.11f%0.3f World %0.11f!%0.13f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to zero and precision bigger than zero
#test s21_sprintf_test_lf_finchren_295
    const double input_double = 0.000000000;
    const char *format = "%0.9f!%0.9f Hello, %0.9f%0.9f%0.9f World %0.9f!%0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

//// Width (right-justify) equal to zero and precision bigger than positive value
//#test s21_sprintf_test_lf_finchren_296
//    const double input_double = 12346487.23;
//    const char *format = "%0.15f!%0.20f Hello, %0.19f%0.18f%0.17f World %0.16f!%0.19f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);


//// Width (right-justify) equal to precision with negative value
//#test s21_sprintf_test_lf_finchren_299
//    const double input_double = -12346487.8355;
//    const char *format = "%11.11f!%11.11f Hello, %11.11f%11.11f%11.11f World %11.11f!%11.11f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (right-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_300
    const double input_double = 0.000000000;
    const char *format = "%10.10f!%10.10f Hello, %10.10f%10.10f%10.10f World %10.10f!%10.10f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

//// Width (right-justify) equal to precision with positive value
//#test s21_sprintf_test_lf_finchren_301
//    const double input_double = 12346487.235;
//    const char *format = "%12.12f!%15.15f Hello, %10.10f%11.10f%10.10f World %10.10f!%10.10f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to precision with negative value
//#test s21_sprintf_test_lf_finchren_304
//    const double input_double = -12346487.85;
//    const char *format = "%-11.11f!%-11.11f Hello, %-11.11f%-11.11f%6f World %-11.11f!%-11.11f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_305
    const double input_double = 0.000000000;
    const char *format = "%-11.11f!%-11.11f Hello, %-11.11f%-11.11f%6f World %-11.11f!%-11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) equal to precision with positive value
#test s21_sprintf_test_lf_finchren_306
    const double input_double = 123467.235546;
    const char *format = "%-11.11f!%-11.11f Hello, %-11.11f%-11.11f%6f World %-11.11f!%-11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the precision with negative value
//#test s21_sprintf_test_lf_finchren_309
//    const double input_double = -1234647.83554;
//    const char *format = "%13.11f!%13.11f Hello, %13.11f%13.11f%13.11f World %13.11f!%13.11f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_310
    const double input_double = 0.000000000;
    const char *format = "%10.10f!%20.20f Hello, %15.15f%15.15f%9.9f World %9.9f!%6.6f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) bigger than the precision with positive value
#test s21_sprintf_test_lf_finchren_311
    const double input_double = 12346487.235;
    const char *format = "%11.3f!%11.3f Hello, %11.3f%11.3f%11.3f World %11.3f!%11.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the precision with negative value
//#test s21_sprintf_test_lf_finchren_314
//    const double input_double = -12346487.8355;
//    const char *format = "%-13.11f!%-13.11f Hello, %-13.11f%-13.11f%-13.11f World %-13.11f!%-13.11f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_315
    const double input_double = 0.000000000;
    const char *format = "%-13.11f!%-13.11f Hello, %-13.11f%-13.11f%-13.11f World %-13.11f!%-13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) bigger than the precision with positive value
//#test s21_sprintf_test_lf_finchren_316
//    const double input_double = 12346487.23;
//    const char *format = "%-13.11f!%-13.11f Hello, %-13.11f%-13.11f%-13.11f World %-13.11f!%-13.11f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (right-justify) less than the precision with negative value
//#test s21_sprintf_test_lf_finchren_319
//    const double input_double = -12346487.835;
//    const char *format = "%13.16f!%13.16f Hello, %13.16f%13.16f%13.16f World %13.16f!%13.16f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (right-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_320
    const double input_double = 0.000000000;
    const char *format = "%13.16f!%13.16f Hello, %13.16f%13.16f%13.16f World %13.16f!%13.16f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (right-justify) less than the precision with positive value
//#test s21_sprintf_test_lf_finchren_321
//    const double input_double = 12346487.335;
//    const char *format = "%13.16f!%13.16f Hello, %13.16f%13.16f%13.16f World %13.16f!%13.16f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) less than the precision with negative value
//#test s21_sprintf_test_lf_finchren_324
//    const double input_double = -12346487.83;
//    const char *format = "%-13.18f!%-13.18f Hello, %-13.18f%-13.18f%-13.18f World %-13.18f!%-13.18f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Width (left-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_325
    const double input_double = 0.000000000;
    const char *format = "%-13.18f!%-13.18f Hello, %-13.18f%-13.18f%-13.18f World %-13.18f!%-13.18f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Width (left-justify) less than the precision with positive value
//#test s21_sprintf_test_lf_finchren_326
//    const double input_double = 12346487.235;
//    const char *format = "%-13.18f!%-13.18f Hello, %-13.18f%-13.18f%-13.18f World %-13.18f!%-13.18f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// !!! End of sign and precision together tests

// Sign, precision and width being zero with negative value
#test s21_sprintf_test_lf_finchren_329
    const double input_double = -516925439.375;
    const char *format = "%+0.0f!%+0.0f Hello, %+0.0f%+0.0f%+0.0f World %+0.0f!%+0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, precision and width being zero with zero
#test s21_sprintf_test_lf_finchren_330
    const double input_double = 0.0;
    const char *format = "%+0.0f!%+0.0f Hello, %+0.0f%+0.0f%+0.0f World %+0.0f!%+0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, precision and width being zero with positive value
#test s21_sprintf_test_lf_finchren_331
    const double input_double = 516925439.87;
    const char *format = "%+0.0f!%+0.0f Hello, %+0.0f%+0.0f%+0.0f World %+0.0f!%+0.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_334
    const double input_double = -12346487.235;
    const char *format = "%+12.0f!%+12.0f Hello, %f+12.0f%+12.0f%+12.0f World %+12.0f!%+12.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_335
    const double input_double = 0.0;
    const char *format = "%+3.0f!%+3.0f Hello, %+3.0f%+3.0f%+3.0f World %+3.0f!%+3.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_336
    const double input_double = 12346487.2355;
    const char *format = "%+13.0f!%+13.0f Hello, %+13.0f%+13.0f%+13.0f World %+13.0f!%+13.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_339
    const double input_double = -12346487.23;
    const char *format = "%+21.0f!%+21.0f Hello, %+21.0f%+21.0f%+21.0f World %+21.0f!%+21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_340
    const double input_double = 0.0;
    const char *format = "%+15.0f!%+15.0f Hello, %+15.0f%+15.0f%+15.0f World %+15.0f!%+15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

















// Sign, width (left-justify) equal to the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_344
    const double input_double = -12346487.2355;
    const char *format = "%+-9.0f!%+-9.0f Hello, %+-9.0f%+-9.0f%+-9.0f World %+-9.0f!%+-9.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_345
    const double input_double = 0.0;
    const char *format = "%+-1.0f!%+-1.0f Hello, %+-1.0f%+-1.0f%+-1.0f World %+-1.0f!%+-1.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_346
    const double input_double = 1234.5355;
    const char *format = "%+-8.0f!%+-8.0f Hello, %+-8.0f%+-8.0f%+-8.0f World %+-8.0f!%+-8.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the argp and precision zero with negative value
#test s21_sprintf_test_lf_finchren_349
    const double input_double = -1.4355;
    const char *format = "%+-21.0f!%+-21.0f Hello, %+-21.0f%+-21.0f%+-21.0f World %+-21.0f!%+-21.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the argp and width being zero with zero
#test s21_sprintf_test_lf_finchren_350
    const double input_double = 0.0;
    const char *format = "%+-15.0f!%+-15.0f Hello, %+-15.0f%+-15.0f%+-15.0f World %+-15.0f!%+-15.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the argp and precision zero with positive value
#test s21_sprintf_test_lf_finchren_351
    const double input_double = 12346487.235;
    const char *format = "%+-78.0f!%+-78.0f Hello, %+-78.0f%+-78.0f%+-78.0f World %+-78.0f!%+-78.0f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (right-justify) equal to zero and precision less than negative value
#test s21_sprintf_test_lf_finchren_354
    const double input_double = -12346487.835;
    const char *format = "%+0.2f!%+0.2f Hello, %+0.2f%+0.2f%+0.2f World %+0.2f!%+0.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision less than zero
#test s21_sprintf_test_lf_finchren_355
    const double input_double = 0.000000;
    const char *format = "%+0.3f!%+0.3f Hello, %+0.3f%+0.3f%+0.3f World %+0.3f!%+0.3f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision less than positive value
#test s21_sprintf_test_lf_finchren_356
    const double input_double = 123.235546786;
    const char *format = "%+0.4f!%+0.4f Hello, %+0.4f%+0.4f%+0.4f World %+0.4f!%+0.4f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (right-justify) equal to zero and precision equal to negative value
#test s21_sprintf_test_lf_finchren_359
    const double input_double = -12346487.8;
    const char *format = "%+0.1f!%+0.1f Hello, %+0.1f%+0.1f%+0.1f World %+0.1f!%+0.1f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision equal to zero
#test s21_sprintf_test_lf_finchren_360
    const double input_double = 0.000000000;
    const char *format = "%+0.9f!%+0.9f Hello, %+0.9f%+0.9f%+0.9f World %+0.9f!%+0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

//// Sign, width (right-justify) equal to zero and precision equal to positive value
//#test s21_sprintf_test_lf_finchren_361
//    const double input_double = 12346487.23;
//    const char *format = "%+0.10f!%+0.10f! Hello, %+0.10f!%+0.10f!%+0.10f! World %+0.10f!%+0.10f!";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

//// Sign, width (right-justify) equal to zero and precision bigger than negative value
//#test s21_sprintf_test_lf_finchren_364
//    const double input_double = -12346487.8;
//    const char *format = "%+0.4f!%+0.3f Hello, %+0.11f%+0.15f%+0.11f World %+0.5f!%+0.9f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision bigger than zero
#test s21_sprintf_test_lf_finchren_365
    const double input_double = 0.000000000;
    const char *format = "%+0.9f!%+0.9f Hello, %+0.9f%+0.9f%+0.9f World %+0.9f!%+0.9f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to zero and precision bigger than positive value
//#test s21_sprintf_test_lf_finchren_366
//    const double input_double = 12346487.2;
//    const char *format = "%+0.6f!%+0.9f Hello, %+0.9f%+0.6f%+0.6f World %+0.9f!%+0.6f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to precision with negative value
//#test s21_sprintf_test_lf_finchren_369
//    const double input_double = -12346487.835;
//    const char *format = "%+11.11f!%+11.11f Hello, %+11.11f%+11.11f%+11.11f World %+11.11f!%+11.11f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_370
    const double input_double = 0.000000000;
    const char *format = "%+11.11f!%+11.11f Hello, %+11.11f%+11.11f%+11.11f World %+11.11f!%+11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) equal to precision with positive value
#test s21_sprintf_test_lf_finchren_371
    const double input_double = 17.2355467865;
    const char *format = "%+11.11f!%+11.11f Hello, %+11.11f%+11.11f%+11.11f World %+11.11f!%+11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, idth (left-justify) equal to precision with negative value
//#test s21_sprintf_test_lf_finchren_374
//    const double input_double = -12346487.83;
//    const char *format = "%+-10.10f!%+-10.10f Hello, %+-10.10f%+-10.10f%+-10.10f World %+-10.10f!%+-10.10f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) equal to precision with than zero
#test s21_sprintf_test_lf_finchren_375
    const double input_double = 0.000000000;
    const char *format = "%+-11.11f!%+-11.11f Hello, %+-11.11f%+-11.11f%+-11.11f World %+-11.11f!%+-11.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// Sign, width (right-justify) bigger than the precision with negative value
#test s21_sprintf_test_lf_finchren_379
    const double input_double = -12347.8355467;
    const char *format = "%+13.11f!%+13.11f Hello, %+13.11f%+13.11f%+13.11f World %+13.11f!%+13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (right-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_380
    const double input_double = 0.000000000;
    const char *format = "%+13.11f!%+13.11f Hello, %+13.11f%+13.11f%+13.11f World %+13.11f!%+13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// Sign, width (left-justify) bigger than the precision with negative value
#test s21_sprintf_test_lf_finchren_384
    const double input_double = -123.835546786;
    const char *format = "%+-13.11f!%+-13.11f Hello, %+-13.11f%+-13.11f%+-13.11f World %+-13.11f!%+-13.11f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// Sign, width (left-justify) bigger than the precision with than zero
#test s21_sprintf_test_lf_finchren_385
    const double input_double = 0.000000000;
    const char *format = "%+-16.5f!%+-13.10f Hello, %+-9.5f%+-15.7f%+-17.10f World %+-16.7f!%+-7.2f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);







// Sign, width (right-justify) less than the precision with than zero
#test s21_sprintf_test_lf_finchren_390
    const double input_double = 0.000000000;
    const char *format = "%+13.16f!%+13.16f Hello, %+13.16f%+13.16f%+13.16f World %+13.16f!%+13.16f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



//// !!! Start of the rounding tests
//// Mistake from test 242
//#test s21_sprintf_test_lf_finchren_397
//    const double input_double = 12345.038765;
//    const char *format = "%+.1f %+.2f %+.3f %+.4f %+.5f %+.6f %+.7f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

//#test s21_sprintf_test_lf_finchren_398
//    const double input_double = 12345.038755;
//    const char *format = "%+.1f %+.2f %+.3f %+.4f %+.5f %+.6f %+.7f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

//#test s21_sprintf_test_lf_finchren_399
//    const double input_double = 12345.038555;
//    const char *format = "%+.1f %+.2f %+.3f %+.4f %+.5f %+.6f %+.7f";
//
//    char s21_buffer[10000];
//    memset(s21_buffer, 'a', 10000);
//    char buffer[10000];
//    memset(buffer, 'a', 10000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_finchren_400
    const double input_double = 12345.035555;
    const char *format = "%+.1f %+.2f %+.3f %+.4f %+.5f %+.6f %+.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_test_lf_finchren_401
    const double input_double = 1.123456789;
    const char *format = "%+.1f %+.2f %+.3f %+.4f %+.5f %+.6f %+.7f";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    const int result = sprintf(buffer, format, input_double, input_double, input_double, input_double, input_double, input_double, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_hdi_0
    const short input_int = 12;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_1
    const short int input_int = -12;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_2
    const short int input_int = 12345;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_3
    const short int input_int = -12345;
    const char *format = "%hd!%hd Hello, World %hd!%hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_4
    const short int input_int = 12;
    const char *format = "%.0hd!%.0hd DA FUCK %.0hd!%.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_5
    const short int input_int = 1234;
    const char *format = "%.1hd!%.2hd DA FUCK %.1hd!%.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_6
    const short int input_int = -1234;
    const char *format = "%.1hd!%.2hd DA FUCK %.1hd!%.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_hdi_7
    const short int input_int = 1234;
    const char *format = "%.5hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_8
    const short int input_int = -1234;
    const char *format = "%.13hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_8_1
    const short int input_int = -1234;
    const char *format = "%.5hd!%.5hd DA FUCK %.5hd!%.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_9
    const short int input_int = 12345;
    const char *format = "%.5hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_10
    const short int input_int = -12345;
    const char *format = "%.5hd!%.7hd DA FUCK %.9hd!%.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_hdi_width_0
    const short int input_int = 12;
    const char *format = "%0hd!%0hd DA FUCK %0hd!%0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_1
    const short int input_int = -12;
    const char *format = "%0hd!%0hd DA FUCK %0hd!%0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_2
    const short int input_int = 12;
    const char *format = "%1hd!%2hd DA FUCK %1hd!%2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_3
    const short int input_int = -12;
    const char *format = "%1hd!%2hd DA FUCK %1hd!%2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_4
    const short int input_int = 12;
    const char *format = "%10hd!%12hd DA FUCK %11hd!%13hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_5
    const short int input_int = -12;
    const char *format = "%10hd!%12hd DA FUCK %11hd!%13hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_hdi_precision_width_0
    const short int input_int = 12;
    const char *format = "%3.0hd!%4.0hd DA FUCK %4.0hd!%5.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_precision_width_1
    const short int input_int = 12;
    const char *format = "%3.1hd!%4.2hd DA FUCK %4.1hd!%5.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_precision_width_2
    const short int input_int = -12;
    const char *format = "%5.3hd!%6.4hd DA FUCK %6.4hd!%7.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_hdi_width_left_justify_0
    const short int input_int = 12;
    const char *format = "%-0hd!%-0hd DA FUCK %-0hd!%-0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_1
    const short int input_int = 12;
    const char *format = "%-1hd!%-2hd DA FUCK %-1hd!%-2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_2
    const short int input_int = -12;
    const char *format = "%-0hd!%-0hd DA FUCK %-0hd!%-0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_3
    const short int input_int = -12;
    const char *format = "%-1hd!%-2hd DA FUCK %-1hd!%-2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_4
    const short int input_int = 12;
    const char *format = "%-3hd!%-4hd DA FUCK %-5hd!%-6hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_5
    const short int input_int = -12;
    const char *format = "%-3hd!%-4hd DA FUCK %-5hd!%-2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_6
    const short int input_int = 12;
    const char *format = "%-3.0hd!%-4.0hd DA FUCK %-5.0hd!%-2.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_7
    const short int input_int = 12;
    const char *format = "%-4.1hd!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_8
    const short int input_int = 12;
    const char *format = "!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_width_left_justify_9
    const short int input_int = -12;
    const char *format = "%-4.1hd!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_width_left_justify_10
    const short int input_int = -12;
    const char *format = "!%-4.2hd DA FUCK %-5.1hd!%-4.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_hdi_plus_0
    const short int input_int = 12;
    const char *format = "%+hd!%+hd DA FUCK %+hd!%+hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_1
    const short int input_int = -12;
    const char *format = "%+hd!%+hd DA FUCK %+hd!%+hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_2
    const short int input_int = -12;
    const char *format = "%+0.0hd!%+0.0hd DA FUCK %+0.0hd!%+0.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_3
    const short int input_int = 12;
    const char *format = "%+0.0hd!%+0.0hd DA FUCK %+0.0hd!%+0.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_4
    const short int input_int = 12;
    const char *format = "%+1.0hd!%+2.0hd DA FUCK %+1.0hd!%+2.0hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_5
    const short int input_int = 12;
    const char *format = "%+0.1hd!%+0.2hd DA FUCK %+0.1hd!%+0.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_6
    const short int input_int = -12;
    const char *format = "%+0.1hd!%+0.2hd DA FUCK %+0.1hd!%+0.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_7
    const short int input_int = 12;
    const char *format = "%+6.1hd!%+7.2hd DA FUCK %+8.1hd!%+9.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_8
    const short int input_int = -12;
    const char *format = "%+6.1hd!%+7.2hd DA FUCK %+8.1hd!%+9.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_9
    const short int input_int = 12;
    const char *format = "%+8.6hd!%+9.7hd DA FUCK %+10.8hd!%+11.9hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_9_1
    const short int input_int = -12;
    const char *format = "%8.6hd!%9.7hd DA FUCK %10.8hd!%11.9hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_10
    const short int input_int = 12;
    const char *format = "%+6.8hd!%+7.9hd DA FUCK %+8.10hd!%+9.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_11
    const short int input_int = -12;
    const char *format = "%+6.8hd!%+7.9hd DA FUCK %+8.10hd!%+9.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_12
    const short int input_int = 7890;
    const char *format = "%+6.8hd!%+7.9hd DA FUCK %+8.10hd!%+9.11hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_13
    const short int input_int = -7890;
    const char *format = "%+6.2hd!%+7.2hd DA FUCK %+8.1hd!%+9.3hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_14
    const short int input_int = 7890;
    const char *format = "%+16.3hd!%+107.3hd DA FUCK %+18.2hd!%+19.1hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_15
    const short int input_int = -1890;
    const char *format = "%+16.3hd!%+17.2hd DA FUCK %+18.3hd!%+19.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_16
    const short int input_int = 7890;
    const char *format = "%+16.2hd!%+107.3hd DA FUCK %+18.1hd!%+19.3hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_17
    const short int input_int = -7890;
    const char *format = "%+6.2hd!%+7.1hd DA FUCK %+8.2hd!%+9.1hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_18
    const short int input_int = 7890;
    const char *format = "%+16.2hd!%+107.1hd DA FUCK %+18.1hd!%+19.2hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_19
    const short int input_int = -123;
    const char *format = "%+16.2hd!%+17.3hd DA FUCK %+18.1hd!%+19.1hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_plus_20
    const short int input_int = 7890;
    const char *format = "%+160.80hd!%+170.90hd DA FUCK %+180.100hd!%+190.110hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_plus_21
    const short int input_int = -12345;
    const char *format = "%+160.180hd!%+170.190hd DA FUCK %+180.200hd!%+190.210hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_left_justify_0
    const short int input_int = -12345;
    const char *format = "%-+160.180hd!%-+170.190hd DA FUCK %-+180.200hd!%-+190.210hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_1
    const short int input_int = -12345;
    const char *format = "%+-160.180hd!%+-170.190hd DA FUCK %+-180.200hd!%+-190.210hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_2
    const short int input_int = -12345;
    const char *format = "%+-16hd!%+-17hd DA FUCK %+-18hd!%+-19hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_3
    const short int input_int = 1234;
    const char *format = "%-+16hd!%-+17hd DA FUCK %+-18hd!%+-19hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hdi_left_justify_4
    const short int input_int = -1234;
    const char *format = "%-+16hd!%-+17hd DA FUCK %+-18hd!%+-19hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_5
    const short int input_int = 1234;
    const char *format = "%-16.10hd!%-17.10hd DA FUCK %-18.8hd!%-19.8hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_6
    const short int input_int = 1234;
    const char *format = "%-+16.10hd!%-+17.10hd DA FUCK %-+18.8hd!%-+19.8hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_7
    const short int input_int = 12;
    const char *format = "%-6.4hd!%-7.5hd DA FUCK %-8.4hd!%-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_8
    const short int input_int = -12;
    const char *format = "%-6.4hd!%-7.5hd DA FUCK %-8.4hd!%-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_9
    const short int input_int = 12;
    const char *format = "%-+6.4hd!%-+7.5hd DA FUCK %-+8.4hd!%-+9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_10
    const short int input_int = -12;
    const char *format = "%-+6.4hd!%-+7.5hd DA FUCK %-+8.4hd!%-+9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_11
    const short int input_int = 123;
    const char *format = "%+-6.4hd!%+-7.5hd DA FUCK %+-8.4hd!%+-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hdi_left_justify_12
    const short int input_int = -123;
    const char *format = "%+-6.4hd!%+-7.5hd DA FUCK %+-8.4hd!%+-9.5hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test10
    const short int input_int = 0x7FFF;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test11
    const short int input_int = 0x7231;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test12
    const short int input_int = -0x7FFF;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test13
    const short int input_int = 017777;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test14
    const short int input_int = 03443;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_hdi_specifier_test15
    const short int input_int = -017777;
    const char *format = "+20.30hi%+9.5hi%+-30.15hi%-5.10hi Hello, World %-50.25hi%-50.25hi%+0.0hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular value - right-justify flag test
#test s21_sprintf_hdi_specifier_test16
   const short int input_int = 12;
   const char *format = "%5hi%5hi Hello, World %5hi%5hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_hdi_specifier_test17
   const short int input_int = -12;
   const char *format = "%5hi%5hi Hello, World %5hi%5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - right-justify flag test
#test s21_sprintf_hdi_specifier_test18
   const short int input_int = -12349;
   const char *format = "%hi%5hi Hello, World %5hi%5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_hdi_specifier_test19
   const short int input_int = -12349;
   const char *format = "%15hi%5hi Hello, World %51hi%5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test
#test s21_sprintf_hdi_specifier_test20
   const short int input_int = -12;
   const char *format = "%-5hi%-5hi Hello, World %-5hi%-5hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test with different width
#test s21_sprintf_hdi_specifier_test21
   const short int input_int = -12;
   const char *format = "%-5hd%-10hd%-15hd Hello, World %-5hd%-10hd%-15hd";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_hdi_specifier_test22
   const short int input_int = -12;
   const char *format = "%-+3hi%-+5hi Hello, World %-+7hi%-+10hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_hdi_specifier_test23
   const short int input_int = -12345;
   const char *format = "%-+5hi%-+5hi Hello, World %-+50hi%-+50hi";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_hdi_specifier_test24
   const short int input_int = 12345;
   const char *format = "%-+5hi%-+5hi Hello, World %-+50hi%-+50hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test
#test s21_sprintf_hdi_specifier_test25
   const short int input_int = 12;
   const char *format = "%.5hi!%.5hi Hello, World %.5hi!%.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test (two-digit number)
#test s21_sprintf_hdi_specifier_test26
   const short int input_int = 12345;
   const char *format = "%.15hi!%.15hi Hello, World %.15hi!%.15hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Normal value - precision test with different precision
#test s21_sprintf_hdi_specifier_test27
   const short int input_int = 12345;
   const char *format = "%.1hi!%.3hi Hello, World %.hi!%.15hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - precision test with same values
#test s21_sprintf_hdi_specifier_test28
   const short int input_int = -12345;
   const char *format = "%.7hi!%.7hi Hello, World %.7hi!%.7hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - precision test with same values
#test s21_sprintf_hdi_specifier_test29
   const short int input_int = -12345;
   const char *format = "%.7hi!%.7hi Hello, World %.7hi!%.7hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big negative value - precision test with different values
#test s21_sprintf_hdi_specifier_test30
   const short int input_int = -12345;
   const char *format = "%.7hi!%.17hi Hello, World %.27hi!%.37hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test
#test s21_sprintf_hdi_specifier_test31
   const short int input_int = 12;
   const char *format = "%11.2hi!%9.2hi Hello, World %7.2hi!%5.2hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test
#test s21_sprintf_hdi_specifier_test32
   const short int input_int = -12345;
   const char *format = "%11.2hi!%9.2hi Hello, World %7.2hi!%5.2hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test - zero precision
#test s21_sprintf_hdi_specifier_test33
   const short int input_int = -12345;
   const char *format = "%11.0hi!%9.0hi Hello, World %7.0hi!%5.0hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test - zero precision
#test s21_sprintf_hdi_specifier_test34
   const short int input_int = 123;
   const char *format = "%11.0hi!%9.0hi Hello, World %7.0hi!%5.0hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_hdi_specifier_test35
   const short int input_int = 12;
   const char *format = "%11.12hi!%9.10hi Hello, World %5.10hi!%10.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_hdi_specifier_test36
   const short int input_int = -12;
   const char *format = "%11.12hi!%9.10hi Hello, World %5.10hi!%10.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_hdi_specifier_test37
   const short int input_int = 12345;
   const char *format = "%4.5hi!%7.8hi Hello, World %5.10hi!%10.5hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);


// %i Sign with regular int test
#test s21_sprintf_hdi_specifier_test38
   const short int input_int = 12345;
   const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_hdi_specifier_test39
    const short int input_int = 0x7FFF;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_hdi_specifier_test40
    const short int input_int = 0x7231;
    const char *format = "%+i%+i%+i Hello, World %+i%+i%+i";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_hdi_specifier_test41
    const short int input_int = -0x7FFF;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with maximum value of octal int
#test s21_sprintf_hdi_specifier_test42
    const short int input_int = 017777;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with normal value of octal int
#test s21_sprintf_hdi_specifier_test43
    const short int input_int = 034437;
    const char *format ="%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// %i Sign with minimum value of octal int
#test s21_sprintf_hdi_specifier_test44
    const short int input_int = -017777;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with maximum int test
#test s21_sprintf_hdi_specifier_test45
    const short int input_int = 32767;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Sign with minimum int test
#test s21_sprintf_hdi_specifier_test46
    const short int input_int = -32768;
    const char *format = "%+hi%+hi%+hi Hello, World %+hi%+hi%+hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test47
    const short int input_int = 0x7FFF;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test48
    const short int input_int = 0x7231;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test49
    const short int input_int = -0x7FFF;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test50
    const short int input_int = 017777;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test51
    const short int input_int = 03443;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_hdi_specifier_test52
    const short int input_int = -017777;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Maximum int test - left-justified with no value
#test s21_sprintf_hdi_specifier_test53
    const short int input_int = 32767;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum int test - left-justified with no value
#test s21_sprintf_hdi_specifier_test54
    const short int input_int = -32768;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - left-justified with no value
#test s21_sprintf_hdi_specifier_test55
    const short int input_int = 7487;
    const char *format = "%-hi%-hi%-hi Hello, World %-hi%-hi%-hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_hdi_specifier_test56
    const short int input_int = 7436;
    const char *format = "%+-3hi%-7hi%-10hi Hello, World %+-3.3hi%-7.7hi%-10.10hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_hdi_specifier_test57
    const short int input_int = 7483;
    const char *format = "%+-.3hi%-.7hi%-.10hi Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hd Minimum hd test
#test s21_sprintf_hdi_specifier_test58
    const short int input_int = -32768;
    const char *format = "%+-.3hd%-.7hd%-.10hd Hello, World %+-3.hd%-7.hd%-10.hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hd Maximum hd test
#test s21_sprintf_hdi_specifier_test59
    const short int input_int = 32767;
    const char *format = "%+-.3hd%-.7hd%-.10hd Hello, World %+-3.hd%-7.hd%-10.hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hi Minimum hi test
#test s21_sprintf_hdi_specifier_test60
    const short int input_int = -32768;
    const char *format = "%+-.3hi%-.7hi%-.10hi Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hi Maximum hd test
#test s21_sprintf_hdi_specifier_test61
    const short int input_int = 32767;
    const char *format = "%+-.3hi%-.7hi%-.10hd Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hi Zero hi test
#test s21_sprintf_hdi_specifier_test62
    const short int input_int = 0;
    const char *format = "%+-.3hi%-.7hi%-.10hi Hello, World %+-3.hi%-7.hi%-10.hi";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hd Zero hd test
#test s21_sprintf_hdi_specifier_test63
    const short int input_int = 0;
    const char *format = "%+-.3hd%-.7hd%-.10hd Hello, World %+-3.hd%-7.hd%-10.hd";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);


// %hu Minimum value test
#test s21_sprintf_hu_test35
    const unsigned int input_unsigned_int = 0;
    const char *format = "Hello, World %hu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum value test - multiple values
#test s21_sprintf_hu_test36
    const unsigned int input_unsigned_int = 0;
    const char *format = "%hu %hu %hu Hello, World %hu%hu%hu Hello, World %hu %hu %hu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum value test
#test s21_sprintf_hu_test37
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "Hello, World %hu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum value test - multiple values
#test s21_sprintf_hu_test38
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "%hu %hu %hu Hello, World %hu%hu%hu Hello, World %hu %hu %hu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Abnormal value - negative value
#test s21_sprintf_hu_test39
    const unsigned int input_unsigned_int = -3;
    const char *format = "%hu %hu %hu Hello, World %hu%hu%hu Hello, World %hu %hu %hu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Abnormal value - bigger than max range value
#test s21_sprintf_hu_test40
    const long unsigned int input_unsigned_int = 8589934590;
    const char *format = "%hu %hu %hu Hello, World %hu%hu%hu Hello, World %hu %hu %hu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
















#test s21_sprintf_test_hu_0
    const unsigned int input_unsigned = 12;
    const char *format = "%hu!%hu Hello, World %hu!%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_1
    const unsigned int input_unsigned = -12;
    const char *format = "%hu!%hu Hello, World %hu!%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_2
    const unsigned int input_unsigned = 123456789;
    const char *format = "%hu!%hu Hello, World %hu!%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_3
    const unsigned int input_unsigned = -123456789;
    const char *format = "%hu!%hu Hello, World %hu!%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_4
    const unsigned int input_unsigned = 12;
    const char *format = "%.0hu!%.0hu DA FUCK %.0hu!%.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%.1hu!%.2hu DA FUCK %.1hu!%.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_6
    const unsigned int input_unsigned = -1234;
    const char *format = "%.1hu!%.2hu DA FUCK %.1hu!%.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_hu_7
    const unsigned int input_unsigned = 1234;
    const char *format = "%.5hu!%.7hu DA FUCK %.9hu!%.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_8
    const unsigned int input_unsigned = -1234;
    const char *format = "%.13hu!%.7hu DA FUCK %.9hu!%.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_8_1
    const unsigned int input_unsigned = -1234;
    const char *format = "%.5hu!%.5hu DA FUCK %.5hu!%.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_9
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%.5hu!%.7hu DA FUCK %.9hu!%.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_10
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%.5hu!%.7hu DA FUCK %.9hu!%.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_hu_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%0hu!%0hu DA FUCK %0hu!%0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_1
    const unsigned int input_unsigned = -12;
    const char *format = "%0hu!%0hu DA FUCK %0hu!%0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_2
    const unsigned int input_unsigned = 12;
    const char *format = "%1hu!%2hu DA FUCK %1hu!%2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_3
    const unsigned int input_unsigned = -12;
    const char *format = "%1hu!%2hu DA FUCK %1hu!%2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_4
    const unsigned int input_unsigned = 12;
    const char *format = "%10hu!%12hu DA FUCK %11hu!%13hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_5
    const unsigned int input_unsigned = -12;
    const char *format = "%10hu!%12hu DA FUCK %11hu!%13hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_hu_precision_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%3.0hu!%4.0hu DA FUCK %4.0hu!%5.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_precision_width_1
    const unsigned int input_unsigned = 12;
    const char *format = "%3.1hu!%4.2hu DA FUCK %4.1hu!%5.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_precision_width_2
    const unsigned int input_unsigned = -12;
    const char *format = "%5.3hu!%6.4hu DA FUCK %6.4hu!%7.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_hu_width_left_justify_0
    const unsigned int input_unsigned = 12;
    const char *format = "%-0hu!%-0hu DA FUCK %-0hu!%-0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_left_justify_1
    const unsigned int input_unsigned = 12;
    const char *format = "%-1hu!%-2hu DA FUCK %-1hu!%-2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_width_left_justify_2
    const unsigned int input_unsigned = -12;
    const char *format = "%-0hu!%-0hu DA FUCK %-0hu!%-0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_left_justify_3
    const unsigned int input_unsigned = -12;
    const char *format = "%-1hu!%-2hu DA FUCK %-1hu!%-2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_width_left_justify_4
    const unsigned int input_unsigned = 12;
    const char *format = "%-3hu!%-4hu DA FUCK %-5hu!%-6hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_left_justify_5
    const unsigned int input_unsigned = -12;
    const char *format = "%-3hu!%-4hu DA FUCK %-5hu!%-2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_width_left_justify_6
    const unsigned int input_unsigned = 12;
    const char *format = "%-3.0hu!%-4.0hu DA FUCK %-5.0hu!%-2.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-4.1hu!%-4.2hu DA FUCK %-5.1hu!%-4.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_left_justify_8
    const unsigned int input_unsigned = 12;
    const char *format = "!%-4.2hu DA FUCK %-5.1hu!%-4.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_width_left_justify_9
    const unsigned int input_unsigned = -12;
    const char *format = "%-4.1hu!%-4.2hu DA FUCK %-5.1hu!%-4.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_width_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "!%-4.2hu DA FUCK %-5.1hu!%-4.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_hu_plus_0
    const unsigned int input_unsigned = 12;
    const char *format = "%hu!%hu DA FUCK %hu!%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_1
    const unsigned int input_unsigned = -12;
    const char *format = "%hu!%hu DA FUCK %hu!%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_2
    const unsigned int input_unsigned = -12;
    const char *format = "%0.0hu!%0.0hu DA FUCK %0.0hu!%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_3
    const unsigned int input_unsigned = 12;
    const char *format = "%0.0hu!%0.0hu DA FUCK %0.0hu!%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_4
    const unsigned int input_unsigned = 12;
    const char *format = "%1.0hu!%2.0hu DA FUCK %1.0hu!%2.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_5
    const unsigned int input_unsigned = 12;
    const char *format = "%0.1hu!%0.2hu DA FUCK %0.1hu!%0.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_6
    const unsigned int input_unsigned = -12;
    const char *format = "%0.1hu!%0.2hu DA FUCK %0.1hu!%0.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_7
    const unsigned int input_unsigned = 12;
    const char *format = "%6.1hu!%7.2hu DA FUCK %8.1hu!%9.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_8
    const unsigned int input_unsigned = -12;
    const char *format = "%6.1hu!%7.2hu DA FUCK %8.1hu!%9.2hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_9
    const unsigned int input_unsigned = 12;
    const char *format = "%8.6hu!%9.7hu DA FUCK %10.8hu!%11.9hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_9_1
    const unsigned int input_unsigned = -12;
    const char *format = "%8.6hu!%9.7hu DA FUCK %10.8hu!%11.9hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_10
    const unsigned int input_unsigned = 12;
    const char *format = "%6.8hu!%7.9hu DA FUCK %8.10hu!%9.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_11
    const unsigned int input_unsigned = -12;
    const char *format = "%6.8hu!%7.9hu DA FUCK %8.10hu!%9.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_12
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%6.8hu!%7.9hu DA FUCK %8.10hu!%9.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_13
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%6.8hu!%7.9hu DA FUCK %8.10hu!%9.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_14
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8hu!%107.9hu DA FUCK %18.10hu!%19.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_15
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%16.8hu!%17.9hu DA FUCK %18.10hu!%19.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_16
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8hu!%107.9hu DA FUCK %18.10hu!%19.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_17
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%6.18hu!%7.19hu DA FUCK %8.20hu!%9.21hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_18
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8hu!%107.9hu DA FUCK %18.10hu!%19.11hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_19
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%16.18hu!%17.19hu DA FUCK %18.20hu!%19.21hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_plus_20
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%160.80hu!%170.90hu DA FUCK %180.100hu!%190.110hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_plus_21
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%160.180hu!%170.190hu DA FUCK %180.200hu!%190.210hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_left_justify_0
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-+160.180hu!%-+170.190hu DA FUCK %-+180.200hu!%-+190.210hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_1
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-160.180hu!%-170.190hu DA FUCK %-180.200hu!%-190.210hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_2
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-160.18hu!%-17.190hu DA FUCK %-180.20hu!%-19.210hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_hu_left_justify_4
    const unsigned int input_unsigned = -1234;
    const char *format = "%-+16hu!%-+17hu DA FUCK %-18hu!%-19hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%-16.10hu!%-17.10hu DA FUCK %-18.8hu!%-19.8hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_6
    const unsigned int input_unsigned = 1234;
    const char *format = "%-+16.10hu!%-+17.10hu DA FUCK %-+18.8hu!%-+19.8hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-6.4hu!%-7.5hu DA FUCK %-8.4hu!%-9.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_8
    const unsigned int input_unsigned = -12;
    const char *format = "%-6.4hu!%-7.5hu DA FUCK %-8.4hu!%-9.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_9
    const unsigned int input_unsigned = 12;
    const char *format = "%-+6.4hu!%-+7.5hu DA FUCK %-+8.4hu!%-+9.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "%-+6.4hu!%-+7.5hu DA FUCK %-+8.4hu!%-+9.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_11
    const unsigned int input_unsigned = 123;
    const char *format = "%-6.4hu!%-7.5hu DA FUCK %-8.4hu!%-9.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_hu_left_justify_12
    const unsigned int input_unsigned = -123;
    const char *format = "%-6.4hu!%-7.5hu DA FUCK %-8.4hu!%-9.5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %hu Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_hu_specifier_test10
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "+20.30%9.5hu%-30.15hu%-5.10hu Hello, World %-50.25hu%-50.25hu%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_hu_specifier_test11
    const unsigned int input_unsigned = 0x723100;
    const char *format = "+20.30%9.5hu%-30.15hu%-5.10hu Hello, World %-50.25hu%-50.25hu%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

























// %hu Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_hu_specifier_test12
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "+20.30%9.5hu%-30.15hu%-5.10hu Hello, World %-50.25hu%-50.25hu%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum value of octal int with sign, width and precision
#test s21_sprintf_hu_specifier_test13
    const unsigned int input_unsigned = 017777777777;
    const char *format = "+20.30%9.5hu%-30.15hu%-5.10hu Hello, World %-50.25hu%-50.25hu%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Normal value of octal int with sign, width and precision
#test s21_sprintf_hu_specifier_test14
    const unsigned int input_unsigned = 034430377;
    const char *format = "+20.30%9.5hu%-30.15hu%-5.10hu Hello, World %-50.25hu%-50.25hu%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum value of octal int with sign, width and precision
#test s21_sprintf_hu_specifier_test15
    const unsigned int input_unsigned = -017777777777;
    const char *format = "+20.30%9.5hu%-30.15hu%-5.10hu Hello, World %-50.25hu%-50.25hu%0.0hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Regular value - right-justify flag test
#test s21_sprintf_hu_specifier_test16
   const unsigned int input_unsigned = 12;
   const char *format = "%5hu%5hu Hello, World %5hu%5hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %hu Negative value - right-justify flag test
#test s21_sprintf_hu_specifier_test17
   const unsigned int input_unsigned = -12;
   const char *format = "%5hu%5hu Hello, World %5hu%5hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big negative value - right-justify flag test
#test s21_sprintf_hu_specifier_test18
   const unsigned int input_unsigned = -1234567;
   const char *format = "%hu%5hu Hello, World %5hu%5hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big negative value - right-justify flag test with different width
#test s21_sprintf_hu_specifier_test19
   const unsigned int input_unsigned = -1234567;
   const char *format = "%15hu%5hu Hello, World %51hu%5hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - left-justify flag test
#test s21_sprintf_hu_specifier_test20
   const unsigned int input_unsigned = -12;
   const char *format = "%-5hu%-5hu Hello, World %-5hu%-5hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - left-justify flag test with different width
#test s21_sprintf_hu_specifier_test21
   const unsigned int input_unsigned = -12;
   const char *format = "%-5hu%-10hu%-15hu Hello, World %-5hu%-10hu%-15hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_hu_specifier_test22
   const unsigned int input_unsigned = -12;
   const char *format = "%-+3hu%-+5hu Hello, World %-+7hu%-+10hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_hu_specifier_test23
   const unsigned int input_unsigned = -123456789;
   const char *format = "%-+5hu%-+5hu Hello, World %-+50hu%-+50hu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_hu_specifier_test24
   const unsigned int input_unsigned = 123456789;
   const char *format = "%-+5hu%-+5hu Hello, World %-+50hu%-+50hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Normal value - precision test
#test s21_sprintf_hu_specifier_test25
   const unsigned int input_unsigned = 12;
   const char *format = "%.5hu!%.5hu Hello, World %.5hu!%.5hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Normal value - precision test (two-digit number)
#test s21_sprintf_hu_specifier_test26
   const unsigned int input_unsigned = 12345;
   const char *format = "%.15hu!%.15hu Hello, World %.15hu!%.15hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Normal value - precision test with different precision
#test s21_sprintf_hu_specifier_test27
   const unsigned int input_unsigned = 12345;
   const char *format = "%.1hu!%.3hu Hello, World %.hu!%.15hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - precision test with same values
#test s21_sprintf_hu_specifier_test28
   const unsigned int input_unsigned = -12345;
   const char *format = "%.7hu!%.7hu Hello, World %.7hu!%.7hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big negative value - precision test with same values
#test s21_sprintf_hu_specifier_test29
   const unsigned int input_unsigned = -123456789;
   const char *format = "%.7hu!%.7hu Hello, World %.7hu!%.7hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big negative value - precision test with different values
#test s21_sprintf_hu_specifier_test30
   const unsigned int input_unsigned = -1234567890;
   const char *format = "%.7hu!%.17hu Hello, World %.27hu!%.37hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Regular value - width and precision test
#test s21_sprintf_hu_specifier_test31
   const unsigned int input_unsigned = 12;
   const char *format = "%11.2hu!%9.2hu Hello, World %7.2hu!%5.2hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - width and precision test
#test s21_sprintf_hu_specifier_test32
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.2hu!%9.2hu Hello, World %7.2hu!%5.2hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - width and precision test - zero precision
#test s21_sprintf_hu_specifier_test33
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.0hu!%9.0hu Hello, World %7.0hu!%5.0hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Regular value - width and precision test - zero precision
#test s21_sprintf_hu_specifier_test34
   const unsigned int input_unsigned = 123;
   const char *format = "%11.0hu!%9.0hu Hello, World %7.0hu!%5.0hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Regular value - width and precision test - different width and different precision
#test s21_sprintf_hu_specifier_test35
   const unsigned int input_unsigned = 12;
   const char *format = "%11.12hu!%9.10hu Hello, World %5.10hu!%10.5hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Negative value - width and precision test - different width and different precision
#test s21_sprintf_hu_specifier_test36
   const unsigned int input_unsigned = -12;
   const char *format = "%11.12hu!%9.10hu Hello, World %5.10hu!%10.5hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_hu_specifier_test37
   const unsigned int input_unsigned = 123456;
   const char *format = "%4.5hu!%7.8hu Hello, World %5.10hu!%10.5hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Sign with regular int test
#test s21_sprintf_hu_specifier_test38
   const unsigned int input_unsigned = 123456;
   const char *format = "%hu!%hu Hello, World %hu!%hu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %hu Sing with maximum value of hexadecimal int
#test s21_sprintf_hu_specifier_test39
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with normal value of hexadecimal int
#test s21_sprintf_hu_specifier_test40
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with minimum value of hexadecimal int
#test s21_sprintf_hu_specifier_test41
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with maximum value of octal int
#test s21_sprintf_hu_specifier_test42
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with normal value of octal int
#test s21_sprintf_hu_specifier_test43
    const unsigned int input_unsigned = 034430377;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with minimum value of octal int
#test s21_sprintf_hu_specifier_test44
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with maximum int test
#test s21_sprintf_hu_specifier_test45
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Sign with minimum int test
#test s21_sprintf_hu_specifier_test46
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%hu%hu%hu Hello, World %hu%hu%hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_hu_specifier_test47
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_hu_specifier_test48
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_hu_specifier_test49
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum value of octal int - left-justified with no value
#test s21_sprintf_hu_specifier_test50
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Normal value of octal int - left-justified with no value
#test s21_sprintf_hu_specifier_test51
    const unsigned int input_unsigned = 034430377;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum value of octal int - left-justified with no value
#test s21_sprintf_hu_specifier_test52
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum int test - left-justified with no value
#test s21_sprintf_hu_specifier_test53
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum int test - left-justified with no value
#test s21_sprintf_hu_specifier_test54
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Regular int test - left-justified with no value
#test s21_sprintf_hu_specifier_test55
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-hu%-hu%-hu Hello, World %-hu%-hu%-hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_hu_specifier_test56
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-3hu%-7hu%-10hu Hello, World %-3.3hu%-7.7hu%-10.10hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_hu_specifier_test57
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-.3hu%-.7hu%-.10hu Hello, World %-3.hu%-7.hu%-10.hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Maximum value
#test s21_sprintf_hu_specifier_test58
    const unsigned int input_unsigned = 65535;
    const char *format = "%-.3hu%-.7hu%-.10hu Hello, World %-3.hu%-7.hu%-10.hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum value - left
#test s21_sprintf_hu_specifier_test59
    const short unsigned int input_unsigned = 0;
    const char *format = "%-.3hu%-.7hu%-.10hu Hello, World %-3.hu%-7.hu%-10.hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %hu Minimum value - right
#test s21_sprintf_hu_specifier_test60
    const short unsigned int input_unsigned = 0;
    const char *format = "%.3hu%.7hu%.10hu Hello, World %3.hu%7.hu%10.hu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
#include <string.h>
#include <stdio.h>
#include <wchar.h>

#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_lc_0_0
    const wint_t input_string = L'H';
    const char *format = "%lc!%lc Hello, World %lc!%lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//#test s21_sprintf_test_lc_0_1
//    const wint_t input_string = L"漢字";
//    const char *format = "%lc!%lc Hello, World %lc!%lc";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
//    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_lc_1
    const wint_t input_string = L')';
    const char *format = "%-lc!%-lc Hello, World %-lc!%-lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_2
    const wint_t input_string = L'y';
    const char *format = "%-+-lc!%-lc Hello, World %-lc!%-lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_width_0
    const wint_t input_string = L'@';
    const char *format = "%10lc!%10lc Hello, World %15lc!%20lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_0
    const wint_t input_string = L'w';
    const char *format = "%.2lc!%.1lc Hello, World %.2lc!%.1lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_1
    const wint_t input_string = L'^';
    const char *format = "%.0lc!%.0lc Hello, World %.0lc!%.0lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_2
    const wint_t input_string = L'4';
    const char *format = "%.3lc!%.3lc Hello, World %.3lc!%.3lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_3
    const wint_t input_string = L'z';
    const char *format = "%.4lc!%.5lc Hello, World %.8lc!%.12lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_width_0
    const wint_t input_string = L'o';
    const char *format = "%3.2lc!%3.2lc Hello, World %3.1lc!%3.1lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_width_1
    const wint_t input_string = L't';
    const char *format = "%-3.2lc!%-3.2lc Hello, World %-3.1lc!%-3.1lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_width_2
    const wint_t input_string = L'f';
    const char *format = "%-3.100lc!%-3.200lc Hello, World %-3.100lc!%-3.100lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_width_3
    const wint_t input_string = L'r';
    const char *format = "%-3.10lc!%-3.20lc Hello, World %-3.10lc!%-3.10lc";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_width_4
    const wint_t input_string = L'q';
    const char *format = "%-300.10lc!%-300.20lc Hello, World %-300.10lc!%-300.10lc";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_precision_width_5
    const wint_t input_string = L'k';
    const char *format = "%300.10lc!%300.20lc Hello, World %300.10lc!%300.10lc";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lc_wide_0
    const wint_t input_string = 252;
    const char *format = "%300.10lc!%300.20lc Hello, World %300.10lc!%300.10lc";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_ldi_0
    const long int input_int = 12;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_1
    const long int input_int = -12;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_2
    const long int input_int = 123456789;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_3
    const long int input_int = -123456789;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_4
    const long int input_int = 12;
    const char *format = "%.0ld!%.0ld DA FUCK %.0ld!%.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_5
    const long int input_int = 1234;
    const char *format = "%.1ld!%.2ld DA FUCK %.1ld!%.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_6
    const long int input_int = -1234;
    const char *format = "%.1ld!%.2ld DA FUCK %.1ld!%.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_ldi_7
    const long int input_int = 1234;
    const char *format = "%.5ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_8
    const long int input_int = -1234;
    const char *format = "%.13ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_8_1
    const long int input_int = -1234;
    const char *format = "%.5ld!%.5ld DA FUCK %.5ld!%.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_9
    const long int input_int = 1234567890;
    const char *format = "%.5ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_10
    const long int input_int = -1234567890;
    const char *format = "%.5ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_ldi_width_0
    const long int input_int = 12;
    const char *format = "%0ld!%0ld DA FUCK %0ld!%0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_1
    const long int input_int = -12;
    const char *format = "%0ld!%0ld DA FUCK %0ld!%0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_2
    const long int input_int = 12;
    const char *format = "%1ld!%2ld DA FUCK %1ld!%2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_3
    const long int input_int = -12;
    const char *format = "%1ld!%2ld DA FUCK %1ld!%2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_4
    const long int input_int = 12;
    const char *format = "%10ld!%12ld DA FUCK %11ld!%13ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_5
    const long int input_int = -12;
    const char *format = "%10ld!%12ld DA FUCK %11ld!%13ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_ldi_precision_width_0
    const long int input_int = 12;
    const char *format = "%3.0ld!%4.0ld DA FUCK %4.0ld!%5.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_precision_width_1
    const long int input_int = 12;
    const char *format = "%3.1ld!%4.2ld DA FUCK %4.1ld!%5.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_precision_width_2
    const long int input_int = -12;
    const char *format = "%5.3ld!%6.4ld DA FUCK %6.4ld!%7.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_ldi_width_left_justify_0
    const long int input_int = 12;
    const char *format = "%-0ld!%-0ld DA FUCK %-0ld!%-0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_1
    const long int input_int = 12;
    const char *format = "%-1ld!%-2ld DA FUCK %-1ld!%-2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_2
    const long int input_int = -12;
    const char *format = "%-0ld!%-0ld DA FUCK %-0ld!%-0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_3
    const long int input_int = -12;
    const char *format = "%-1ld!%-2ld DA FUCK %-1ld!%-2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_4
    const long int input_int = 12;
    const char *format = "%-3ld!%-4ld DA FUCK %-5ld!%-6ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_5
    const long int input_int = -12;
    const char *format = "%-3ld!%-4ld DA FUCK %-5ld!%-2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_6
    const long int input_int = 12;
    const char *format = "%-3.0ld!%-4.0ld DA FUCK %-5.0ld!%-2.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_7
    const long int input_int = 12;
    const char *format = "%-4.1ld!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_8
    const long int input_int = 12;
    const char *format = "!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_9
    const long int input_int = -12;
    const char *format = "%-4.1ld!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_10
    const long int input_int = -12;
    const char *format = "!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_ldi_plus_0
    const long int input_int = 12;
    const char *format = "%+ld!%+ld DA FUCK %+ld!%+ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_1
    const long int input_int = -12;
    const char *format = "%+ld!%+ld DA FUCK %+ld!%+ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_2
    const long int input_int = -12;
    const char *format = "%+0.0ld!%+0.0ld DA FUCK %+0.0ld!%+0.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_3
    const long int input_int = 12;
    const char *format = "%+0.0ld!%+0.0ld DA FUCK %+0.0ld!%+0.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_4
    const long int input_int = 12;
    const char *format = "%+1.0ld!%+2.0ld DA FUCK %+1.0ld!%+2.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_5
    const long int input_int = 12;
    const char *format = "%+0.1ld!%+0.2ld DA FUCK %+0.1ld!%+0.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_6
    const long int input_int = -12;
    const char *format = "%+0.1ld!%+0.2ld DA FUCK %+0.1ld!%+0.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_7
    const long int input_int = 12;
    const char *format = "%+6.1ld!%+7.2ld DA FUCK %+8.1ld!%+9.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_8
    const long int input_int = -12;
    const char *format = "%+6.1ld!%+7.2ld DA FUCK %+8.1ld!%+9.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_9
    const long int input_int = 12;
    const char *format = "%+8.6ld!%+9.7ld DA FUCK %+10.8ld!%+11.9ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_9_1
    const long int input_int = -12;
    const char *format = "%8.6ld!%9.7ld DA FUCK %10.8ld!%11.9ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_10
    const long int input_int = 12;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_11
    const long int input_int = -12;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_12
    const long int input_int = 1234567890;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_13
    const long int input_int = -1234567890;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_14
    const long int input_int = 1234567890;
    const char *format = "%+16.8ld!%+107.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_15
    const long int input_int = -1234567890;
    const char *format = "%+16.8ld!%+17.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_16
    const long int input_int = 1234567890;
    const char *format = "%+16.8ld!%+107.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_17
    const long int input_int = -1234567890;
    const char *format = "%+6.18ld!%+7.19ld DA FUCK %+8.20ld!%+9.21ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_18
    const long int input_int = 1234567890;
    const char *format = "%+16.8ld!%+107.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_19
    const long int input_int = -1234567890;
    const char *format = "%+16.18ld!%+17.19ld DA FUCK %+18.20ld!%+19.21ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_20
    const long int input_int = 1234567890;
    const char *format = "%+160.80ld!%+170.90ld DA FUCK %+180.100ld!%+190.110ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_21
    const long int input_int = -1234567890;
    const char *format = "%+160.180ld!%+170.190ld DA FUCK %+180.200ld!%+190.210ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_left_justify_0
    const long int input_int = -1234567890;
    const char *format = "%-+160.180ld!%-+170.190ld DA FUCK %-+180.200ld!%-+190.210ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_1
    const long int input_int = -1234567890;
    const char *format = "%+-160.180ld!%+-170.190ld DA FUCK %+-180.200ld!%+-190.210ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_2
    const long int input_int = -1234567890;
    const char *format = "%+-16ld!%+-17ld DA FUCK %+-18ld!%+-19ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_3
    const long int input_int = 1234;
    const char *format = "%-+16ld!%-+17ld DA FUCK %+-18ld!%+-19ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_left_justify_4
    const long int input_int = -1234;
    const char *format = "%-+16ld!%-+17ld DA FUCK %+-18ld!%+-19ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_5
    const long int input_int = 1234;
    const char *format = "%-16.10ld!%-17.10ld DA FUCK %-18.8ld!%-19.8ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_6
    const long int input_int = 1234;
    const char *format = "%-+16.10ld!%-+17.10ld DA FUCK %-+18.8ld!%-+19.8ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_7
    const long int input_int = 12;
    const char *format = "%-6.4ld!%-7.5ld DA FUCK %-8.4ld!%-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_8
    const long int input_int = -12;
    const char *format = "%-6.4ld!%-7.5ld DA FUCK %-8.4ld!%-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_9
    const long int input_int = 12;
    const char *format = "%-+6.4ld!%-+7.5ld DA FUCK %-+8.4ld!%-+9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_10
    const long int input_int = -12;
    const char *format = "%-+6.4ld!%-+7.5ld DA FUCK %-+8.4ld!%-+9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_11
    const long int input_int = 123;
    const char *format = "%+-6.4ld!%+-7.5ld DA FUCK %+-8.4ld!%+-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_12
    const long int input_int = -123;
    const char *format = "%+-6.4ld!%+-7.5ld DA FUCK %+-8.4ld!%+-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test10
    const long int input_int = 0x7FFFFFFF;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test11
    const long int input_int = 0x723100;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test12
    const long int input_int = -0x7FFFFFFF;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test13
    const long int input_int = 017777777777;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test14
    const long int input_int = 034430377;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test15
    const long int input_int = -017777777777;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular value - right-justify flag test
#test s21_sprintf_ldi_specifier_test16
   const long int input_int = 12;
   const char *format = "%5li%5li Hello, World %5li%5li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_ldi_specifier_test17
   const long int input_int = -12;
   const char *format = "%5li%5li Hello, World %5li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test
#test s21_sprintf_ldi_specifier_test18
   const long int input_int = -1234567;
   const char *format = "%li%5li Hello, World %5li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_ldi_specifier_test19
   const long int input_int = -1234567;
   const char *format = "%15li%5li Hello, World %51li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test
#test s21_sprintf_ldi_specifier_test20
   const long int input_int = -12;
   const char *format = "%-5li%-5li Hello, World %-5li%-5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width
#test s21_sprintf_ldi_specifier_test21
   const long int input_int = -12;
   const char *format = "%-5ld%-10ld%-15ld Hello, World %-5ld%-10ld%-15ld";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_ldi_specifier_test22
   const long int input_int = -12;
   const char *format = "%-+3li%-+5li Hello, World %-+7li%-+10li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_ldi_specifier_test23
   const long int input_int = -123456789;
   const char *format = "%-+5li%-+5li Hello, World %-+50li%-+50li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_ldi_specifier_test24
   const long int input_int = 123456789;
   const char *format = "%-+5li%-+5li Hello, World %-+50li%-+50li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test
#test s21_sprintf_ldi_specifier_test25
   const long int input_int = 12;
   const char *format = "%.5li!%.5li Hello, World %.5li!%.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test (two-digit number)
#test s21_sprintf_ldi_specifier_test26
   const long int input_int = 12345;
   const char *format = "%.15li!%.15li Hello, World %.15li!%.15li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test with different precision
#test s21_sprintf_ldi_specifier_test27
   const long int input_int = 12345;
   const char *format = "%.1li!%.3li Hello, World %.lid!%.15li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - precision test with same values
#test s21_sprintf_ldi_specifier_test28
   const long int input_int = -12345;
   const char *format = "%.7li!%.7li Hello, World %.7li!%.7li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with same values
#test s21_sprintf_ldi_specifier_test29
   const long int input_int = -123456789;
   const char *format = "%.7li!%.7li Hello, World %.7li!%.7li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with different values
#test s21_sprintf_ldi_specifier_test30
   const long int input_int = -1234567890;
   const char *format = "%.7li!%.17li Hello, World %.27li!%.37li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test
#test s21_sprintf_ldi_specifier_test31
   const long int input_int = 12;
   const char *format = "%11.2li!%9.2li Hello, World %7.2li!%5.2li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test
#test s21_sprintf_ldi_specifier_test32
   const long int input_int = -12345;
   const char *format = "%11.2li!%9.2li Hello, World %7.2li!%5.2li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - zero precision
#test s21_sprintf_ldi_specifier_test33
   const long int input_int = -12345;
   const char *format = "%11.0li!%9.0li Hello, World %7.0li!%5.0li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - zero precision
#test s21_sprintf_ldi_specifier_test34
   const long int input_int = 123;
   const char *format = "%11.0li!%9.0li Hello, World %7.0li!%5.0li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_ldi_specifier_test35
   const long int input_int = 12;
   const char *format = "%11.12li!%9.10li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_ldi_specifier_test36
   const long int input_int = -12;
   const char *format = "%11.12li!%9.10li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_ldi_specifier_test37
   const long int input_int = 123456;
   const char *format = "%4.5li!%7.8li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sign with regular int test
#test s21_sprintf_ldi_specifier_test38
   const long int input_int = 123456;
   const char *format = "%+li!%+li Hello, World %+li!%+li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_ldi_specifier_test39
    const long int input_int = 0x7FFFFFFF;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_ldi_specifier_test40
    const long int input_int = 0x723100;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_ldi_specifier_test41
    const long int input_int = -0x7FFFFFFF;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum value of octal int
#test s21_sprintf_ldi_specifier_test42
    const long int input_int = 017777777777;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of octal int
#test s21_sprintf_ldi_specifier_test43
    const long int input_int = 034430377;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of octal int
#test s21_sprintf_ldi_specifier_test44
    const long int input_int = -017777777777;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum int test
#test s21_sprintf_ldi_specifier_test45
    const long int input_int = 2147483647;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum int test
#test s21_sprintf_ldi_specifier_test46
    const long int input_int = -2147483647;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test47
    const long int input_int = 0x7FFFFFFF;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test48
    const long int input_int = 0x723100;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test49
    const long int input_int = -0x7FFFFFFF;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test50
    const long int input_int = 017777777777;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test51
    const long int input_int = 034430377;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test52
    const long int input_int = -017777777777;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test - left-justified with no value
#test s21_sprintf_ldi_specifier_test53
    const long int input_int = 2147483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test - left-justified with no value
#test s21_sprintf_ldi_specifier_test54
    const long int input_int = -2147483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - left-justified with no value
#test s21_sprintf_ldi_specifier_test55
    const long int input_int = 7483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_ldi_specifier_test56
    const long int input_int = 7483647;
    const char *format = "%+-3li%-7li%-10li Hello, World %+-3.3li%-7.7li%-10.10li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_ldi_specifier_test57
    const long int input_int = 7483647;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %li Maximum value test - 9223372036854775807
#test s21_sprintf_ldi_specifier_test58
    const long int input_int = 9223372036854775807;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %li Minimum value test - -922337203685477580
#test s21_sprintf_ldi_specifier_test59
    const long int input_int = -922337203685477580;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %li More than minimum value test - -922337203685477589
#test s21_sprintf_ldi_specifier_test60
    const long int input_int = -922337203685477589;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %ld Maximum value test - 9223372036854775807
#test s21_sprintf_ldi_specifier_test61
    const long int input_int = 9223372036854775807;
    const char *format = "%+-.3ld%-.7ld%-.10ld Hello, World %+-3.ld%-7.ld%-10.ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %ld Minimum value test - -922337203685477580
#test s21_sprintf_ldi_specifier_test62
    const long int input_int = -922337203685477580;
    const char *format = "%+-.3ld%-.7ld%-.10ld Hello, World %+-3.ld%-7.ld%-10.ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %ld More than minimum value test - -922337203685477589
#test s21_sprintf_ldi_specifier_test63
    const long int input_int = -922337203685477589;
    const char *format = "%+-.3ld%-.7ld%-.10ld Hello, World %+-3.ld%-7.ld%-10.ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);


// long long int: -9,223,372,036,854,775,807 to 9,223,372,036,854,775,807
// TODO: adopt these tests for lld


#test s21_sprintf_test_lldi_range_0
    const long long int input_int = 9223372036854775807;
    const char *format = "%lld!%lld Hello, World %lld!%lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_range_1
    const long long int input_int = -9223372036854775807;
    const char *format = "%lld!%lld Hello, World %lld!%lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_0
    const long long int input_int = 12;
    const char *format = "%lld!%lld Hello, World %lld!%lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_1
    const long long int input_int = -12;
    const char *format = "%lld!%lld Hello, World %lld!%lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_2
    const long long int input_int = 123456789;
    const char *format = "%lld!%lld Hello, World %lld!%lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_3
    const long long int input_int = -123456789;
    const char *format = "%lld!%lld Hello, World %lld!%lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_4
    const long long int input_int = 12;
    const char *format = "%.0lld!%.0lld DA FUCK %.0lld!%.0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_5
    const long long int input_int = 1234;
    const char *format = "%.1lld!%.2lld DA FUCK %.1lld!%.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_6
    const long long int input_int = -1234;
    const char *format = "%.1lld!%.2lld DA FUCK %.1lld!%.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_lldi_7
    const long long int input_int = 1234;
    const char *format = "%.5lld!%.7lld DA FUCK %.9lld!%.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_8
    const long long int input_int = -1234;
    const char *format = "%.13lld!%.7lld DA FUCK %.9lld!%.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_8_1
    const long long int input_int = -1234;
    const char *format = "%.5lld!%.5lld DA FUCK %.5lld!%.5lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_9
    const long long int input_int = 1234567890;
    const char *format = "%.5lld!%.7lld DA FUCK %.9lld!%.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_10
    const long long int input_int = -1234567890;
    const char *format = "%.5lld!%.7lld DA FUCK %.9lld!%.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_lldi_width_0
    const long long int input_int = 12;
    const char *format = "%0lld!%0lld DA FUCK %0lld!%0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_1
    const long long int input_int = -12;
    const char *format = "%0lld!%0lld DA FUCK %0lld!%0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_2
    const long long int input_int = 12;
    const char *format = "%1lld!%2lld DA FUCK %1lld!%2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_3
    const long long int input_int = -12;
    const char *format = "%1lld!%2lld DA FUCK %1lld!%2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_4
    const long long int input_int = 12;
    const char *format = "%10lld!%12lld DA FUCK %11lld!%13lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_5
    const long long int input_int = -12;
    const char *format = "%10lld!%12lld DA FUCK %11lld!%13lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_lldi_precision_width_0
    const long long int input_int = 12;
    const char *format = "%3.0lld!%4.0lld DA FUCK %4.0lld!%5.0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_precision_width_1
    const long long int input_int = 12;
    const char *format = "%3.1lld!%4.2lld DA FUCK %4.1lld!%5.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_precision_width_2
    const long long int input_int = -12;
    const char *format = "%5.3lld!%6.4lld DA FUCK %6.4lld!%7.5lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_lldi_width_left_justify_0
    const long long int input_int = 12;
    const char *format = "%-0lld!%-0lld DA FUCK %-0lld!%-0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_left_justify_1
    const long long int input_int = 12;
    const char *format = "%-1lld!%-2lld DA FUCK %-1lld!%-2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_width_left_justify_2
    const long long int input_int = -12;
    const char *format = "%-0lld!%-0lld DA FUCK %-0lld!%-0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_left_justify_3
    const long long int input_int = -12;
    const char *format = "%-1lld!%-2lld DA FUCK %-1lld!%-2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_width_left_justify_4
    const long long int input_int = 12;
    const char *format = "%-3lld!%-4lld DA FUCK %-5lld!%-6lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_left_justify_5
    const long long int input_int = -12;
    const char *format = "%-3lld!%-4lld DA FUCK %-5lld!%-2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_width_left_justify_6
    const long long int input_int = 12;
    const char *format = "%-3.0lld!%-4.0lld DA FUCK %-5.0lld!%-2.0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_left_justify_7
    const long long int input_int = 12;
    const char *format = "%-4.1lld!%-4.2lld DA FUCK %-5.1lld!%-4.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_left_justify_8
    const long long int input_int = 12;
    const char *format = "!%-4.2lld DA FUCK %-5.1lld!%-4.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_width_left_justify_9
    const long long int input_int = -12;
    const char *format = "%-4.1lld!%-4.2lld DA FUCK %-5.1lld!%-4.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_width_left_justify_10
    const long long int input_int = -12;
    const char *format = "!%-4.2lld DA FUCK %-5.1lld!%-4.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_lldi_plus_0
    const long long int input_int = 12;
    const char *format = "%+lld!%+lld DA FUCK %+lld!%+lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_1
    const long long int input_int = -12;
    const char *format = "%+lld!%+lld DA FUCK %+lld!%+lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_2
    const long long int input_int = -12;
    const char *format = "%+0.0lld!%+0.0lld DA FUCK %+0.0lld!%+0.0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_3
    const long long int input_int = 12;
    const char *format = "%+0.0lld!%+0.0lld DA FUCK %+0.0lld!%+0.0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_4
    const long long int input_int = 12;
    const char *format = "%+1.0lld!%+2.0lld DA FUCK %+1.0lld!%+2.0lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_5
    const long long int input_int = 12;
    const char *format = "%+0.1lld!%+0.2lld DA FUCK %+0.1lld!%+0.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_6
    const long long int input_int = -12;
    const char *format = "%+0.1lld!%+0.2lld DA FUCK %+0.1lld!%+0.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_7
    const long long int input_int = 12;
    const char *format = "%+6.1lld!%+7.2lld DA FUCK %+8.1lld!%+9.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_8
    const long long int input_int = -12;
    const char *format = "%+6.1lld!%+7.2lld DA FUCK %+8.1lld!%+9.2lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_9
    const long long int input_int = 12;
    const char *format = "%+8.6lld!%+9.7lld DA FUCK %+10.8lld!%+11.9lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_9_1
    const long long int input_int = -12;
    const char *format = "%8.6lld!%9.7lld DA FUCK %10.8lld!%11.9lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_10
    const long long int input_int = 12;
    const char *format = "%+6.8lld!%+7.9lld DA FUCK %+8.10lld!%+9.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_11
    const long long int input_int = -12;
    const char *format = "%+6.8lld!%+7.9lld DA FUCK %+8.10lld!%+9.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_12
    const long long int input_int = 1234567890;
    const char *format = "%+6.8lld!%+7.9lld DA FUCK %+8.10lld!%+9.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_13
    const long long int input_int = -1234567890;
    const char *format = "%+6.8lld!%+7.9lld DA FUCK %+8.10lld!%+9.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_14
    const long long int input_int = 1234567890;
    const char *format = "%+16.8lld!%+107.9lld DA FUCK %+18.10lld!%+19.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_15
    const long long int input_int = -1234567890;
    const char *format = "%+16.8lld!%+17.9lld DA FUCK %+18.10lld!%+19.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_16
    const long long int input_int = 1234567890;
    const char *format = "%+16.8lld!%+107.9lld DA FUCK %+18.10lld!%+19.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_17
    const long long int input_int = -1234567890;
    const char *format = "%+6.18lld!%+7.19lld DA FUCK %+8.20lld!%+9.21lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_18
    const long long int input_int = 1234567890;
    const char *format = "%+16.8lld!%+107.9lld DA FUCK %+18.10lld!%+19.11lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_19
    const long long int input_int = -1234567890;
    const char *format = "%+16.18lld!%+17.19lld DA FUCK %+18.20lld!%+19.21lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_plus_20
    const long long int input_int = 1234567890;
    const char *format = "%+160.80lld!%+170.90lld DA FUCK %+180.100lld!%+190.110lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_plus_21
    const long long int input_int = -1234567890;
    const char *format = "%+160.180lld!%+170.190lld DA FUCK %+180.200lld!%+190.210lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_left_justify_0
    const long long int input_int = -1234567890;
    const char *format = "%-+160.180lld!%-+170.190lld DA FUCK %-+180.200lld!%-+190.210lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_1
    const long long int input_int = -1234567890;
    const char *format = "%+-160.180lld!%+-170.190lld DA FUCK %+-180.200lld!%+-190.210lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_2
    const long long int input_int = -1234567890;
    const char *format = "%+-16lld!%+-17lld DA FUCK %+-18lld!%+-19lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_3
    const long long int input_int = 1234;
    const char *format = "%-+16lld!%-+17lld DA FUCK %+-18lld!%+-19lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lldi_left_justify_4
    const long long int input_int = -1234;
    const char *format = "%-+16lld!%-+17lld DA FUCK %+-18lld!%+-19lld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);











//
// TODO: adopt these tests for %lld
//











#test s21_sprintf_test_lldi_left_justify_5
    const long int input_int = 1234;
    const char *format = "%-16.10ld!%-17.10ld DA FUCK %-18.8ld!%-19.8ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_6
    const long int input_int = 1234;
    const char *format = "%-+16.10ld!%-+17.10ld DA FUCK %-+18.8ld!%-+19.8ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_7
    const long int input_int = 12;
    const char *format = "%-6.4ld!%-7.5ld DA FUCK %-8.4ld!%-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_8
    const long int input_int = -12;
    const char *format = "%-6.4ld!%-7.5ld DA FUCK %-8.4ld!%-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_9
    const long int input_int = 12;
    const char *format = "%-+6.4ld!%-+7.5ld DA FUCK %-+8.4ld!%-+9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_10
    const long int input_int = -12;
    const char *format = "%-+6.4ld!%-+7.5ld DA FUCK %-+8.4ld!%-+9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_11
    const long int input_int = 123;
    const char *format = "%+-6.4ld!%+-7.5ld DA FUCK %+-8.4ld!%+-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lldi_left_justify_12
    const long int input_int = -123;
    const char *format = "%+-6.4ld!%+-7.5ld DA FUCK %+-8.4ld!%+-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_lldi_specifier_test10
    const long int input_int = 0x7FFFFFFF;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_lldi_specifier_test11
    const long int input_int = 0x723100;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_lldi_specifier_test12
    const long int input_int = -0x7FFFFFFF;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_lldi_specifier_test13
    const long int input_int = 017777777777;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_lldi_specifier_test14
    const long int input_int = 034430377;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_lldi_specifier_test15
    const long int input_int = -017777777777;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular value - right-justify flag test
#test s21_sprintf_lldi_specifier_test16
   const long int input_int = 12;
   const char *format = "%5li%5li Hello, World %5li%5li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_lldi_specifier_test17
   const long int input_int = -12;
   const char *format = "%5li%5li Hello, World %5li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test
#test s21_sprintf_lldi_specifier_test18
   const long int input_int = -1234567;
   const char *format = "%li%5li Hello, World %5li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_lldi_specifier_test19
   const long int input_int = -1234567;
   const char *format = "%15li%5li Hello, World %51li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test
#test s21_sprintf_lldi_specifier_test20
   const long int input_int = -12;
   const char *format = "%-5li%-5li Hello, World %-5li%-5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width
#test s21_sprintf_lldi_specifier_test21
   const long int input_int = -12;
   const char *format = "%-5ld%-10ld%-15ld Hello, World %-5ld%-10ld%-15ld";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_lldi_specifier_test22
   const long int input_int = -12;
   const char *format = "%-+3li%-+5li Hello, World %-+7li%-+10li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_lldi_specifier_test23
   const long int input_int = -123456789;
   const char *format = "%-+5li%-+5li Hello, World %-+50li%-+50li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_lldi_specifier_test24
   const long int input_int = 123456789;
   const char *format = "%-+5li%-+5li Hello, World %-+50li%-+50li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test
#test s21_sprintf_lldi_specifier_test25
   const long int input_int = 12;
   const char *format = "%.5li!%.5li Hello, World %.5li!%.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test (two-digit number)
#test s21_sprintf_lldi_specifier_test26
   const long int input_int = 12345;
   const char *format = "%.15li!%.15li Hello, World %.15li!%.15li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test with different precision
#test s21_sprintf_lldi_specifier_test27
   const long int input_int = 12345;
   const char *format = "%.1li!%.3li Hello, World %.lid!%.15li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - precision test with same values
#test s21_sprintf_lldi_specifier_test28
   const long int input_int = -12345;
   const char *format = "%.7li!%.7li Hello, World %.7li!%.7li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with same values
#test s21_sprintf_lldi_specifier_test29
   const long int input_int = -123456789;
   const char *format = "%.7li!%.7li Hello, World %.7li!%.7li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with different values
#test s21_sprintf_lldi_specifier_test30
   const long int input_int = -1234567890;
   const char *format = "%.7li!%.17li Hello, World %.27li!%.37li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test
#test s21_sprintf_lldi_specifier_test31
   const long int input_int = 12;
   const char *format = "%11.2li!%9.2li Hello, World %7.2li!%5.2li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test
#test s21_sprintf_lldi_specifier_test32
   const long int input_int = -12345;
   const char *format = "%11.2li!%9.2li Hello, World %7.2li!%5.2li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - zero precision
#test s21_sprintf_lldi_specifier_test33
   const long int input_int = -12345;
   const char *format = "%11.0li!%9.0li Hello, World %7.0li!%5.0li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - zero precision
#test s21_sprintf_lldi_specifier_test34
   const long int input_int = 123;
   const char *format = "%11.0li!%9.0li Hello, World %7.0li!%5.0li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_lldi_specifier_test35
   const long int input_int = 12;
   const char *format = "%11.12li!%9.10li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_lldi_specifier_test36
   const long int input_int = -12;
   const char *format = "%11.12li!%9.10li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_lldi_specifier_test37
   const long int input_int = 123456;
   const char *format = "%4.5li!%7.8li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sign with regular int test
#test s21_sprintf_lldi_specifier_test38
   const long int input_int = 123456;
   const char *format = "%+li!%+li Hello, World %+li!%+li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_lldi_specifier_test39
    const long int input_int = 0x7FFFFFFF;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_lldi_specifier_test40
    const long int input_int = 0x723100;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_lldi_specifier_test41
    const long int input_int = -0x7FFFFFFF;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum value of octal int
#test s21_sprintf_lldi_specifier_test42
    const long int input_int = 017777777777;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of octal int
#test s21_sprintf_lldi_specifier_test43
    const long int input_int = 034430377;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of octal int
#test s21_sprintf_lldi_specifier_test44
    const long int input_int = -017777777777;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum int test
#test s21_sprintf_lldi_specifier_test45
    const long int input_int = 2147483647;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum int test
#test s21_sprintf_lldi_specifier_test46
    const long int input_int = -2147483647;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_lldi_specifier_test47
    const long int input_int = 0x7FFFFFFF;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_lldi_specifier_test48
    const long int input_int = 0x723100;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_lldi_specifier_test49
    const long int input_int = -0x7FFFFFFF;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_lldi_specifier_test50
    const long int input_int = 017777777777;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_lldi_specifier_test51
    const long int input_int = 034430377;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_lldi_specifier_test52
    const long int input_int = -017777777777;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test - left-justified with no value
#test s21_sprintf_lldi_specifier_test53
    const long int input_int = 2147483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test - left-justified with no value
#test s21_sprintf_lldi_specifier_test54
    const long int input_int = -2147483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - left-justified with no value
#test s21_sprintf_lldi_specifier_test55
    const long int input_int = 7483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_lldi_specifier_test56
    const long int input_int = 7483647;
    const char *format = "%+-3li%-7li%-10li Hello, World %+-3.3li%-7.7li%-10.10li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_lldi_specifier_test57
    const long int input_int = 7483647;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#include <string.h>
#include <stdio.h>
#include <wchar.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_ls_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%ls!%ls Hello, World %ls!%ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//#test s21_sprintf_test_ls_0_1
//    const wchar_t* input_string = L"漢字";
//    const char *format = "%ls!%ls Hello, World %ls!%ls";
//
//    char s21_buffer[1000];
//    memset(s21_buffer, 'a', 1000);
//    char buffer[1000];
//    memset(buffer, 'a', 1000);
//
//    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
//    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
//    
//    ck_assert_str_eq(s21_buffer, buffer);
//    ck_assert_int_eq(s21_result, result);




#test s21_sprintf_test_ls_1
    const wchar_t* input_string = L"Hey";
    const char *format = "%-ls!%-ls Hello, World %-ls!%-ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_2
    const wchar_t* input_string = L"Hey";
    const char *format = "%-+-ls!%-ls Hello, World %-ls!%-ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_width_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%10ls!%10ls Hello, World %15ls!%20ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%.2ls!%.1ls Hello, World %.2ls!%.1ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_1
    const wchar_t* input_string = L"Hey";
    const char *format = "%.0ls!%.0ls Hello, World %.0ls!%.0ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_2
    const wchar_t* input_string = L"Hey";
    const char *format = "%.3ls!%.3ls Hello, World %.3ls!%.3ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_3
    const wchar_t* input_string = L"Hey";
    const char *format = "%.4ls!%.5ls Hello, World %.8ls!%.12ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_0
    const wchar_t* input_string = L"Hey";
    const char *format = "%3.2ls!%3.2ls Hello, World %3.1ls!%3.1ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_1
    const wchar_t* input_string = L"Hey";
    const char *format = "%-3.2ls!%-3.2ls Hello, World %-3.1ls!%-3.1ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_2
    const wchar_t* input_string = L"Let me help you tie the rope around your neck!";
    const char *format = "%-3.100ls!%-3.200ls Hello, World %-3.100ls!%-3.100ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_3
    const wchar_t* input_string = L"Let me help you tie a rope around your neck!";
    const char *format = "%-3.10ls!%-3.20ls Hello, World %-3.10ls!%-3.10ls";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_4
    const wchar_t* input_string = L"Let me help you tie a rope around your neck!";
    const char *format = "%-300.10ls!%-300.20ls Hello, World %-300.10ls!%-300.10ls";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ls_precision_width_5
    const wchar_t* input_string = L"Let me help you tie a rope around your neck!";
    const char *format = "%300.10ls!%300.20ls Hello, World %300.10ls!%300.10ls";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);


// %lu Minimum value test
#test s21_sprintf_lu_test35
    const unsigned int input_unsigned_int = 0;
    const char *format = "Hello, World %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value test - multiple values
#test s21_sprintf_lu_test36
    const unsigned int input_unsigned_int = 0;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value test
#test s21_sprintf_lu_test37
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "Hello, World %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value test - multiple values
#test s21_sprintf_lu_test38
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Abnormal value - negative value
#test s21_sprintf_lu_test39
    const unsigned int input_unsigned_int = -3;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Abnormal value - bigger than max range value
#test s21_sprintf_lu_test40
    const long unsigned int input_unsigned_int = 8589934590;
    const char *format = "%lu %lu %lu Hello, World %lu%lu%lu Hello, World %lu %lu %lu";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
















#test s21_sprintf_test_lu_0
    const unsigned int input_unsigned = 12;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_1
    const unsigned int input_unsigned = -12;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_2
    const unsigned int input_unsigned = 123456789;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_3
    const unsigned int input_unsigned = -123456789;
    const char *format = "%lu!%lu Hello, World %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_4
    const unsigned int input_unsigned = 12;
    const char *format = "%.0lu!%.0lu DA FUCK %.0lu!%.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%.1lu!%.2lu DA FUCK %.1lu!%.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_6
    const unsigned int input_unsigned = -1234;
    const char *format = "%.1lu!%.2lu DA FUCK %.1lu!%.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_lu_7
    const unsigned int input_unsigned = 1234;
    const char *format = "%.5lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_8
    const unsigned int input_unsigned = -1234;
    const char *format = "%.13lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_8_1
    const unsigned int input_unsigned = -1234;
    const char *format = "%.5lu!%.5lu DA FUCK %.5lu!%.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_9
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%.5lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_10
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%.5lu!%.7lu DA FUCK %.9lu!%.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_lu_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%0lu!%0lu DA FUCK %0lu!%0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_1
    const unsigned int input_unsigned = -12;
    const char *format = "%0lu!%0lu DA FUCK %0lu!%0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_2
    const unsigned int input_unsigned = 12;
    const char *format = "%1lu!%2lu DA FUCK %1lu!%2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_3
    const unsigned int input_unsigned = -12;
    const char *format = "%1lu!%2lu DA FUCK %1lu!%2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_4
    const unsigned int input_unsigned = 12;
    const char *format = "%10lu!%12lu DA FUCK %11lu!%13lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_5
    const unsigned int input_unsigned = -12;
    const char *format = "%10lu!%12lu DA FUCK %11lu!%13lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_lu_precision_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%3.0lu!%4.0lu DA FUCK %4.0lu!%5.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_precision_width_1
    const unsigned int input_unsigned = 12;
    const char *format = "%3.1lu!%4.2lu DA FUCK %4.1lu!%5.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_precision_width_2
    const unsigned int input_unsigned = -12;
    const char *format = "%5.3lu!%6.4lu DA FUCK %6.4lu!%7.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_lu_width_left_justify_0
    const unsigned int input_unsigned = 12;
    const char *format = "%-0lu!%-0lu DA FUCK %-0lu!%-0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_1
    const unsigned int input_unsigned = 12;
    const char *format = "%-1lu!%-2lu DA FUCK %-1lu!%-2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_2
    const unsigned int input_unsigned = -12;
    const char *format = "%-0lu!%-0lu DA FUCK %-0lu!%-0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_3
    const unsigned int input_unsigned = -12;
    const char *format = "%-1lu!%-2lu DA FUCK %-1lu!%-2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_4
    const unsigned int input_unsigned = 12;
    const char *format = "%-3lu!%-4lu DA FUCK %-5lu!%-6lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_5
    const unsigned int input_unsigned = -12;
    const char *format = "%-3lu!%-4lu DA FUCK %-5lu!%-2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_6
    const unsigned int input_unsigned = 12;
    const char *format = "%-3.0lu!%-4.0lu DA FUCK %-5.0lu!%-2.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-4.1lu!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_8
    const unsigned int input_unsigned = 12;
    const char *format = "!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_width_left_justify_9
    const unsigned int input_unsigned = -12;
    const char *format = "%-4.1lu!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_width_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "!%-4.2lu DA FUCK %-5.1lu!%-4.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_lu_plus_0
    const unsigned int input_unsigned = 12;
    const char *format = "%lu!%lu DA FUCK %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_1
    const unsigned int input_unsigned = -12;
    const char *format = "%lu!%lu DA FUCK %lu!%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_2
    const unsigned int input_unsigned = -12;
    const char *format = "%0.0lu!%0.0lu DA FUCK %0.0lu!%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_3
    const unsigned int input_unsigned = 12;
    const char *format = "%0.0lu!%0.0lu DA FUCK %0.0lu!%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_4
    const unsigned int input_unsigned = 12;
    const char *format = "%1.0lu!%2.0lu DA FUCK %1.0lu!%2.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_5
    const unsigned int input_unsigned = 12;
    const char *format = "%0.1lu!%0.2lu DA FUCK %0.1lu!%0.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_6
    const unsigned int input_unsigned = -12;
    const char *format = "%0.1lu!%0.2lu DA FUCK %0.1lu!%0.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_7
    const unsigned int input_unsigned = 12;
    const char *format = "%6.1lu!%7.2lu DA FUCK %8.1lu!%9.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_8
    const unsigned int input_unsigned = -12;
    const char *format = "%6.1lu!%7.2lu DA FUCK %8.1lu!%9.2lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_9
    const unsigned int input_unsigned = 12;
    const char *format = "%8.6lu!%9.7lu DA FUCK %10.8lu!%11.9lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_9_1
    const unsigned int input_unsigned = -12;
    const char *format = "%8.6lu!%9.7lu DA FUCK %10.8lu!%11.9lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_10
    const unsigned int input_unsigned = 12;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_11
    const unsigned int input_unsigned = -12;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_12
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_13
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%6.8lu!%7.9lu DA FUCK %8.10lu!%9.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_14
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8lu!%107.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_15
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%16.8lu!%17.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_16
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8lu!%107.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_17
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%6.18lu!%7.19lu DA FUCK %8.20lu!%9.21lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_18
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%16.8lu!%107.9lu DA FUCK %18.10lu!%19.11lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_19
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%16.18lu!%17.19lu DA FUCK %18.20lu!%19.21lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_plus_20
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%160.80lu!%170.90lu DA FUCK %180.100lu!%190.110lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_plus_21
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%160.180lu!%170.190lu DA FUCK %180.200lu!%190.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_left_justify_0
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-+160.180lu!%-+170.190lu DA FUCK %-+180.200lu!%-+190.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_1
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-160.180lu!%-170.190lu DA FUCK %-180.200lu!%-190.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_2
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-160.18lu!%-17.190lu DA FUCK %-180.20lu!%-19.210lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_lu_left_justify_4
    const unsigned int input_unsigned = -1234;
    const char *format = "%-+16lu!%-+17lu DA FUCK %-18lu!%-19lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%-16.10lu!%-17.10lu DA FUCK %-18.8lu!%-19.8lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_6
    const unsigned int input_unsigned = 1234;
    const char *format = "%-+16.10lu!%-+17.10lu DA FUCK %-+18.8lu!%-+19.8lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_8
    const unsigned int input_unsigned = -12;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_9
    const unsigned int input_unsigned = 12;
    const char *format = "%-+6.4lu!%-+7.5lu DA FUCK %-+8.4lu!%-+9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "%-+6.4lu!%-+7.5lu DA FUCK %-+8.4lu!%-+9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_11
    const unsigned int input_unsigned = 123;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_lu_left_justify_12
    const unsigned int input_unsigned = -123;
    const char *format = "%-6.4lu!%-7.5lu DA FUCK %-8.4lu!%-9.5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %lu Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_lu_specifier_test10
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_lu_specifier_test11
    const unsigned int input_unsigned = 0x723100;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

























// %lu Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_lu_specifier_test12
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value of octal int with sign, width and precision
#test s21_sprintf_lu_specifier_test13
    const unsigned int input_unsigned = 017777777777;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of octal int with sign, width and precision
#test s21_sprintf_lu_specifier_test14
    const unsigned int input_unsigned = 034430377;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value of octal int with sign, width and precision
#test s21_sprintf_lu_specifier_test15
    const unsigned int input_unsigned = -017777777777;
    const char *format = "+20.30%9.5lu%-30.15lu%-5.10lu Hello, World %-50.25lu%-50.25lu%0.0lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular value - right-justify flag test
#test s21_sprintf_lu_specifier_test16
   const unsigned int input_unsigned = 12;
   const char *format = "%5lu%5lu Hello, World %5lu%5lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %lu Negative value - right-justify flag test
#test s21_sprintf_lu_specifier_test17
   const unsigned int input_unsigned = -12;
   const char *format = "%5lu%5lu Hello, World %5lu%5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - right-justify flag test
#test s21_sprintf_lu_specifier_test18
   const unsigned int input_unsigned = -1234567;
   const char *format = "%lu%5lu Hello, World %5lu%5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - right-justify flag test with different width
#test s21_sprintf_lu_specifier_test19
   const unsigned int input_unsigned = -1234567;
   const char *format = "%15lu%5lu Hello, World %51lu%5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - left-justify flag test
#test s21_sprintf_lu_specifier_test20
   const unsigned int input_unsigned = -12;
   const char *format = "%-5lu%-5lu Hello, World %-5lu%-5lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - left-justify flag test with different width
#test s21_sprintf_lu_specifier_test21
   const unsigned int input_unsigned = -12;
   const char *format = "%-5lu%-10lu%-15lu Hello, World %-5lu%-10lu%-15lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_lu_specifier_test22
   const unsigned int input_unsigned = -12;
   const char *format = "%-+3lu%-+5lu Hello, World %-+7lu%-+10lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_lu_specifier_test23
   const unsigned int input_unsigned = -123456789;
   const char *format = "%-+5lu%-+5lu Hello, World %-+50lu%-+50lu";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_lu_specifier_test24
   const unsigned int input_unsigned = 123456789;
   const char *format = "%-+5lu%-+5lu Hello, World %-+50lu%-+50lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Normal value - precision test
#test s21_sprintf_lu_specifier_test25
   const unsigned int input_unsigned = 12;
   const char *format = "%.5lu!%.5lu Hello, World %.5lu!%.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Normal value - precision test (two-digit number)
#test s21_sprintf_lu_specifier_test26
   const unsigned int input_unsigned = 12345;
   const char *format = "%.15lu!%.15lu Hello, World %.15lu!%.15lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Normal value - precision test with different precision
#test s21_sprintf_lu_specifier_test27
   const unsigned int input_unsigned = 12345;
   const char *format = "%.1lu!%.3lu Hello, World %.lu!%.15lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - precision test with same values
#test s21_sprintf_lu_specifier_test28
   const unsigned int input_unsigned = -12345;
   const char *format = "%.7lu!%.7lu Hello, World %.7lu!%.7lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - precision test with same values
#test s21_sprintf_lu_specifier_test29
   const unsigned int input_unsigned = -123456789;
   const char *format = "%.7lu!%.7lu Hello, World %.7lu!%.7lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big negative value - precision test with different values
#test s21_sprintf_lu_specifier_test30
   const unsigned int input_unsigned = -1234567890;
   const char *format = "%.7lu!%.17lu Hello, World %.27lu!%.37lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Regular value - width and precision test
#test s21_sprintf_lu_specifier_test31
   const unsigned int input_unsigned = 12;
   const char *format = "%11.2lu!%9.2lu Hello, World %7.2lu!%5.2lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - width and precision test
#test s21_sprintf_lu_specifier_test32
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.2lu!%9.2lu Hello, World %7.2lu!%5.2lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - width and precision test - zero precision
#test s21_sprintf_lu_specifier_test33
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.0lu!%9.0lu Hello, World %7.0lu!%5.0lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Regular value - width and precision test - zero precision
#test s21_sprintf_lu_specifier_test34
   const unsigned int input_unsigned = 123;
   const char *format = "%11.0lu!%9.0lu Hello, World %7.0lu!%5.0lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Regular value - width and precision test - different width and different precision
#test s21_sprintf_lu_specifier_test35
   const unsigned int input_unsigned = 12;
   const char *format = "%11.12lu!%9.10lu Hello, World %5.10lu!%10.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Negative value - width and precision test - different width and different precision
#test s21_sprintf_lu_specifier_test36
   const unsigned int input_unsigned = -12;
   const char *format = "%11.12lu!%9.10lu Hello, World %5.10lu!%10.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_lu_specifier_test37
   const unsigned int input_unsigned = 123456;
   const char *format = "%4.5lu!%7.8lu Hello, World %5.10lu!%10.5lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Sign with regular int test
#test s21_sprintf_lu_specifier_test38
   const unsigned int input_unsigned = 123456;
   const char *format = "%lu!%lu Hello, World %lu!%lu";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %lu Sing with maximum value of hexadecimal int
#test s21_sprintf_lu_specifier_test39
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with normal value of hexadecimal int
#test s21_sprintf_lu_specifier_test40
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with minimum value of hexadecimal int
#test s21_sprintf_lu_specifier_test41
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with maximum value of octal int
#test s21_sprintf_lu_specifier_test42
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with normal value of octal int
#test s21_sprintf_lu_specifier_test43
    const unsigned int input_unsigned = 034430377;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with minimum value of octal int
#test s21_sprintf_lu_specifier_test44
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with maximum int test
#test s21_sprintf_lu_specifier_test45
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Sign with minimum int test
#test s21_sprintf_lu_specifier_test46
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%lu%lu%lu Hello, World %lu%lu%lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_lu_specifier_test47
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_lu_specifier_test48
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_lu_specifier_test49
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value of octal int - left-justified with no value
#test s21_sprintf_lu_specifier_test50
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Normal value of octal int - left-justified with no value
#test s21_sprintf_lu_specifier_test51
    const unsigned int input_unsigned = 034430377;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value of octal int - left-justified with no value
#test s21_sprintf_lu_specifier_test52
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum int test - left-justified with no value
#test s21_sprintf_lu_specifier_test53
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum int test - left-justified with no value
#test s21_sprintf_lu_specifier_test54
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular int test - left-justified with no value
#test s21_sprintf_lu_specifier_test55
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-lu%-lu%-lu Hello, World %-lu%-lu%-lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_lu_specifier_test56
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-3lu%-7lu%-10lu Hello, World %-3.3lu%-7.7lu%-10.10lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_lu_specifier_test57
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-.3lu%-.7lu%-.10lu Hello, World %-3.lu%-7.lu%-10.lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Maximum value test - left-justify and empty precision
#test s21_sprintf_lu_specifier_test58
    const unsigned long int input_unsigned = 4294967295;
    const char *format = "%-.3lu%-.7lu%-.10lu Hello, World %-3.lu%-7.lu%-10.lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %lu Minimum value test - right-justify
#test s21_sprintf_lu_specifier_test59
    const unsigned long int input_unsigned = 0;
    const char *format = "%3lu%7lu%10lu Hello, World %3lu%7lu%10lu";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);




#test s21_sprintf_percent_test_width_01_0
    const char percent = '%';
    const char *format = "%2%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_percent_test_width_01_1
    const char percent = '%';
    const char *format = "%12%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_percent_test_width_left_justify_01
    const char percent = '%';
    const char *format = "%-2%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_percent_test_width_left_justify_02
    const char percent = '%';
    const char *format = "%-12%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %% Multiple percent sign test
#test s21_sprintf_percent_test02
    const char percent = 'A';
    const char *format = "%%c%%%c%%%%c%%%%%c%%%%%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent, percent, percent, percent, percent);
    const int result = sprintf(buffer, format, percent, percent, percent, percent, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);






// %% Single percent sign test
#test s21_sprintf_percent_test01
    const char percent = '%';
    const char *format = "%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %% Multiple percent sign test with string inbetween
#test s21_sprintf_percent_test03
    const char percent = '%';
    const char *format = "%%c%%%c%%%%c%%%%%c%%%%%%c Hello world %%c%%%c%%%%c%%%%%c%%%%%%c Hello world %%c%%%c%%%%c%%%%%c%%%%%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent);
    const int result = sprintf(buffer, format, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test04
    const char misc_char = '@';
    const char *format = "%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, misc_char);
    const int result = sprintf(buffer, format, misc_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// % Invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test05
    const char *format = "%@!%(%)%{%}%%==";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test06
    const char *format = "%^%$%^&$#%@%!123%{dfghjdf%±";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test07
    const char *format = "%%%@!123()[]{}{{***43dfghjdf";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test08
    const char *format = "р%%о%л%д%%@%!%%234()[вавава]{привет мир}{{***43вававаdfghjdf";
    //const char *format = "w%%q%r%t%%@%!%%234()[vavava]{privet shit}{{***43vavavadfghjdf";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);










// % Right-justify - spaces are printed if not the last in the string
#test s21_sprintf_percent_test09
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %5!";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Right-justify with sign - spaces are printed if not the last in the string
#test s21_sprintf_percent_test10
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+5!";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Right-justify with sign and another percent - spaces are printed if not the last in the string
#test s21_sprintf_percent_test11
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+5!%17";

    char s21_buffer[100];
    memset(s21_buffer, 'a', 100);
    char buffer[100];
    memset(buffer, 'a', 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Left-justify with sign and another percent and precision - spaces are printed if not the last in the string
#test s21_sprintf_percent_test12
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+-5.8!%+7.8";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Left-justify with sign and another percent with left-justify and precision - spaces are printed if not the last in the string
#test s21_sprintf_percent_test13
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+-5.8!%+-7.8";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Left-justify with sign and another percent with left-justify and precision - spaces are printed if not the last in the string
#test s21_sprintf_percent_test14
    const double input_double = 12345.098;
    const char test_char = 'f';
    const char *format = "[%5f Hello, World %+-5.8!%+-7.8c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, test_char);
    const int result = sprintf(buffer, format, input_double, test_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_s_0
    const char* input_string = "Hey";
    const char *format = "%s!%s Hello, World %s!%s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_1
    const char* input_string = "Hey";
    const char *format = "%-s!%-s Hello, World %-s!%-s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_2
    const char* input_string = "Hey";
    const char *format = "%-+-s!%-s Hello, World %-s!%-s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_width_0
    const char* input_string = "Hey";
    const char *format = "%10s!%10s Hello, World %15s!%20s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_0
    const char* input_string = "Hey";
    const char *format = "%.2s!%.1s Hello, World %.2s!%.1s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_1
    const char* input_string = "Hey";
    const char *format = "%.0s!%.0s Hello, World %.0s!%.0s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_2
    const char* input_string = "Hey";
    const char *format = "%.3s!%.3s Hello, World %.3s!%.3s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_3
    const char* input_string = "Hey";
    const char *format = "%.4s!%.5s Hello, World %.8s!%.12s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_0
    const char* input_string = "Hey";
    const char *format = "%3.2s!%3.2s Hello, World %3.1s!%3.1s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_1
    const char* input_string = "Hey";
    const char *format = "%-3.2s!%-3.2s Hello, World %-3.1s!%-3.1s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_2
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%-3.100s!%-3.200s Hello, World %-3.100s!%-3.100s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_3
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%-3.10s!%-3.20s Hello, World %-3.10s!%-3.10s";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_4
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%-300.10s!%-300.20s Hello, World %-300.10s!%-300.10s";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_s_precision_width_5
    const char* input_string = "Let me help you tie a rope around your neck!";
    const char *format = "%300.10s!%300.20s Hello, World %300.10s!%300.10s";

    char s21_buffer[10000];
    memset(s21_buffer, 'a', 10000);
    char buffer[10000];
    memset(buffer, 'a', 10000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_string, input_string, input_string, input_string);
    const int result = sprintf(buffer, format, input_string, input_string, input_string, input_string);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);


// %u Minimum value test
#test s21_sprintf_test35
    const unsigned int input_unsigned_int = 0;
    const char *format = "Hello, World %u";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Minimum value test - multiple values
#test s21_sprintf_test36
    const unsigned int input_unsigned_int = 0;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Maximum value test
#test s21_sprintf_test37
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "Hello, World %u";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Maximum value test - multiple values
#test s21_sprintf_test38
    const unsigned int input_unsigned_int = 4294967295;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Abnormal value - negative value
#test s21_sprintf_test39
    const unsigned int input_unsigned_int = -3;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %u Abnormal value - bigger than max range value
#test s21_sprintf_test40
    const long unsigned int input_unsigned_int = 8589934590;
    const char *format = "%u %u %u Hello, World %u%u%u Hello, World %u %u %u";

    char s21_buffer[200];
    memset(s21_buffer, 'a', 200);
    char buffer[200];
    memset(buffer, 'a', 200);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    const int result = sprintf(buffer, format, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int, input_unsigned_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
















#test s21_sprintf_test_u_0
    const unsigned int input_unsigned = 12;
    const char *format = "%u!%u Hello, World %u!%u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_1
    const unsigned int input_unsigned = -12;
    const char *format = "%u!%u Hello, World %u!%u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_2
    const unsigned int input_unsigned = 123456789;
    const char *format = "%u!%u Hello, World %u!%u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_3
    const unsigned int input_unsigned = -123456789;
    const char *format = "%u!%u Hello, World %u!%u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_4
    const unsigned int input_unsigned = 12;
    const char *format = "%.0u!%.0u DA FUCK %.0u!%.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%.1u!%.2u DA FUCK %.1u!%.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_6
    const unsigned int input_unsigned = -1234;
    const char *format = "%.1u!%.2u DA FUCK %.1u!%.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_u_7
    const unsigned int input_unsigned = 1234;
    const char *format = "%.5u!%.7u DA FUCK %.9u!%.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_8
    const unsigned int input_unsigned = -1234;
    const char *format = "%.13u!%.7u DA FUCK %.9u!%.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_8_1
    const unsigned int input_unsigned = -1234;
    const char *format = "%.5u!%.5u DA FUCK %.5u!%.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_9
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%.5u!%.7u DA FUCK %.9u!%.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_10
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%.5u!%.7u DA FUCK %.9u!%.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_u_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%0u!%0u DA FUCK %0u!%0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_1
    const unsigned int input_unsigned = -12;
    const char *format = "%0u!%0u DA FUCK %0u!%0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_2
    const unsigned int input_unsigned = 12;
    const char *format = "%1u!%2u DA FUCK %1u!%2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_3
    const unsigned int input_unsigned = -12;
    const char *format = "%1u!%2u DA FUCK %1u!%2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_4
    const unsigned int input_unsigned = 12;
    const char *format = "%10u!%12u DA FUCK %11u!%13u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_5
    const unsigned int input_unsigned = -12;
    const char *format = "%10u!%12u DA FUCK %11u!%13u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_u_precision_width_0
    const unsigned int input_unsigned = 12;
    const char *format = "%3.0u!%4.0u DA FUCK %4.0u!%5.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_precision_width_1
    const unsigned int input_unsigned = 12;
    const char *format = "%3.1u!%4.2u DA FUCK %4.1u!%5.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_precision_width_2
    const unsigned int input_unsigned = -12;
    const char *format = "%5.3u!%6.4u DA FUCK %6.4u!%7.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_u_width_left_justify_0
    const unsigned int input_unsigned = 12;
    const char *format = "%-0u!%-0u DA FUCK %-0u!%-0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_left_justify_1
    const unsigned int input_unsigned = 12;
    const char *format = "%-1u!%-2u DA FUCK %-1u!%-2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_width_left_justify_2
    const unsigned int input_unsigned = -12;
    const char *format = "%-0u!%-0u DA FUCK %-0u!%-0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_left_justify_3
    const unsigned int input_unsigned = -12;
    const char *format = "%-1u!%-2u DA FUCK %-1u!%-2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_width_left_justify_4
    const unsigned int input_unsigned = 12;
    const char *format = "%-3u!%-4u DA FUCK %-5u!%-6u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_left_justify_5
    const unsigned int input_unsigned = -12;
    const char *format = "%-3u!%-4u DA FUCK %-5u!%-2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_width_left_justify_6
    const unsigned int input_unsigned = 12;
    const char *format = "%-3.0u!%-4.0u DA FUCK %-5.0u!%-2.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-4.1u!%-4.2u DA FUCK %-5.1u!%-4.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_left_justify_8
    const unsigned int input_unsigned = 12;
    const char *format = "!%-4.2u DA FUCK %-5.1u!%-4.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_width_left_justify_9
    const unsigned int input_unsigned = -12;
    const char *format = "%-4.1u!%-4.2u DA FUCK %-5.1u!%-4.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_width_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "!%-4.2u DA FUCK %-5.1u!%-4.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_u_plus_0
    const unsigned int input_unsigned = 12;
    const char *format = "%+u!%+u DA FUCK %+u!%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_1
    const unsigned int input_unsigned = -12;
    const char *format = "%+u!%+u DA FUCK %+u!%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_2
    const unsigned int input_unsigned = -12;
    const char *format = "%+0.0u!%+0.0u DA FUCK %+0.0u!%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_3
    const unsigned int input_unsigned = 12;
    const char *format = "%+0.0u!%+0.0u DA FUCK %+0.0u!%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_4
    const unsigned int input_unsigned = 12;
    const char *format = "%+1.0u!%+2.0u DA FUCK %+1.0u!%+2.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_5
    const unsigned int input_unsigned = 12;
    const char *format = "%+0.1u!%+0.2u DA FUCK %+0.1u!%+0.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_6
    const unsigned int input_unsigned = -12;
    const char *format = "%+0.1u!%+0.2u DA FUCK %+0.1u!%+0.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_7
    const unsigned int input_unsigned = 12;
    const char *format = "%+6.1u!%+7.2u DA FUCK %+8.1u!%+9.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_8
    const unsigned int input_unsigned = -12;
    const char *format = "%+6.1u!%+7.2u DA FUCK %+8.1u!%+9.2u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_9
    const unsigned int input_unsigned = 12;
    const char *format = "%+8.6u!%+9.7u DA FUCK %+10.8u!%+11.9u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_9_1
    const unsigned int input_unsigned = -12;
    const char *format = "%8.6u!%9.7u DA FUCK %10.8u!%11.9u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_10
    const unsigned int input_unsigned = 12;
    const char *format = "%+6.8u!%+7.9u DA FUCK %+8.10u!%+9.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_11
    const unsigned int input_unsigned = -12;
    const char *format = "%+6.8u!%+7.9u DA FUCK %+8.10u!%+9.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_12
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%+6.8u!%+7.9u DA FUCK %+8.10u!%+9.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_13
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+6.8u!%+7.9u DA FUCK %+8.10u!%+9.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_14
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%+16.8u!%+107.9u DA FUCK %+18.10u!%+19.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_15
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+16.8u!%+17.9u DA FUCK %+18.10u!%+19.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_16
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%+16.8u!%+107.9u DA FUCK %+18.10u!%+19.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_17
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+6.18u!%+7.19u DA FUCK %+8.20u!%+9.21u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_18
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%+16.8u!%+107.9u DA FUCK %+18.10u!%+19.11u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_19
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+16.18u!%+17.19u DA FUCK %+18.20u!%+19.21u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_plus_20
    const unsigned int input_unsigned = 1234567890;
    const char *format = "%+160.80u!%+170.90u DA FUCK %+180.100u!%+190.110u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_plus_21
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+160.180u!%+170.190u DA FUCK %+180.200u!%+190.210u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_left_justify_0
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%-+160.180u!%-+170.190u DA FUCK %-+180.200u!%-+190.210u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_1
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+-160.180u!%+-170.190u DA FUCK %+-180.200u!%+-190.210u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_2
    const unsigned int input_unsigned = -1234567890;
    const char *format = "%+-16u!%+-17u DA FUCK %+-18u!%+-19u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_3
    const unsigned int input_unsigned = 1234;
    const char *format = "%-+16u!%-+17u DA FUCK %+-18u!%+-19u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_u_left_justify_4
    const unsigned int input_unsigned = -1234;
    const char *format = "%-+16u!%-+17u DA FUCK %+-18u!%+-19u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_5
    const unsigned int input_unsigned = 1234;
    const char *format = "%-16.10u!%-17.10u DA FUCK %-18.8u!%-19.8u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_6
    const unsigned int input_unsigned = 1234;
    const char *format = "%-+16.10u!%-+17.10u DA FUCK %-+18.8u!%-+19.8u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_7
    const unsigned int input_unsigned = 12;
    const char *format = "%-6.4u!%-7.5u DA FUCK %-8.4u!%-9.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_8
    const unsigned int input_unsigned = -12;
    const char *format = "%-6.4u!%-7.5u DA FUCK %-8.4u!%-9.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_9
    const unsigned int input_unsigned = 12;
    const char *format = "%-+6.4u!%-+7.5u DA FUCK %-+8.4u!%-+9.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_10
    const unsigned int input_unsigned = -12;
    const char *format = "%-+6.4u!%-+7.5u DA FUCK %-+8.4u!%-+9.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_11
    const unsigned int input_unsigned = 123;
    const char *format = "%+-6.4u!%+-7.5u DA FUCK %+-8.4u!%+-9.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_u_left_justify_12
    const unsigned int input_unsigned = -123;
    const char *format = "%+-6.4u!%+-7.5u DA FUCK %+-8.4u!%+-9.5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned,  input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_i_specifier_test10
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "+20.30%+9.5u%+-30.15u%-5.10u Hello, World %-50.25u%-50.25u%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_i_specifier_test11
    const unsigned int input_unsigned = 0x723100;
    const char *format = "+20.30%+9.5u%+-30.15u%-5.10u Hello, World %-50.25u%-50.25u%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_i_specifier_test12
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "+20.30%+9.5u%+-30.15u%-5.10u Hello, World %-50.25u%-50.25u%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_i_specifier_test13
    const unsigned int input_unsigned = 017777777777;
    const char *format = "+20.30%+9.5u%+-30.15u%-5.10u Hello, World %-50.25u%-50.25u%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_i_specifier_test14
    const unsigned int input_unsigned = 034430377;
    const char *format = "+20.30%+9.5u%+-30.15u%-5.10u Hello, World %-50.25u%-50.25u%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_i_specifier_test15
    const unsigned int input_unsigned = -017777777777;
    const char *format = "+20.30%+9.5u%+-30.15u%-5.10u Hello, World %-50.25u%-50.25u%+0.0u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular value - right-justify flag test
#test s21_sprintf_i_specifier_test16
   const unsigned int input_unsigned = 12;
   const char *format = "%5u%5u Hello, World %5u%5u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_i_specifier_test17
   const unsigned int input_unsigned = -12;
   const char *format = "%5u%5u Hello, World %5u%5u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test
#test s21_sprintf_i_specifier_test18
   const unsigned int input_unsigned = -1234567;
   const char *format = "%u%5u Hello, World %5u%5u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_i_specifier_test19
   const unsigned int input_unsigned = -1234567;
   const char *format = "%15u%5u Hello, World %51u%5u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test
#test s21_sprintf_i_specifier_test20
   const unsigned int input_unsigned = -12;
   const char *format = "%-5u%-5u Hello, World %-5u%-5u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width
#test s21_sprintf_i_specifier_test21
   const unsigned int input_unsigned = -12;
   const char *format = "%-5u%-10u%-15u Hello, World %-5u%-10u%-15u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_i_specifier_test22
   const unsigned int input_unsigned = -12;
   const char *format = "%-+3u%-+5u Hello, World %-+7u%-+10u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_i_specifier_test23
   const unsigned int input_unsigned = -123456789;
   const char *format = "%-+5u%-+5u Hello, World %-+50u%-+50u";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_i_specifier_test24
   const unsigned int input_unsigned = 123456789;
   const char *format = "%-+5u%-+5u Hello, World %-+50u%-+50u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test
#test s21_sprintf_i_specifier_test25
   const unsigned int input_unsigned = 12;
   const char *format = "%.5u!%.5u Hello, World %.5u!%.5u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test (two-digit number)
#test s21_sprintf_i_specifier_test26
   const unsigned int input_unsigned = 12345;
   const char *format = "%.15u!%.15u Hello, World %.15u!%.15u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test with different precision
#test s21_sprintf_i_specifier_test27
   const unsigned int input_unsigned = 12345;
   const char *format = "%.1u!%.3u Hello, World %.ud!%.15u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - precision test with same values
#test s21_sprintf_i_specifier_test28
   const unsigned int input_unsigned = -12345;
   const char *format = "%.7u!%.7u Hello, World %.7u!%.7u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with same values
#test s21_sprintf_i_specifier_test29
   const unsigned int input_unsigned = -123456789;
   const char *format = "%.7u!%.7u Hello, World %.7u!%.7u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with different values
#test s21_sprintf_i_specifier_test30
   const unsigned int input_unsigned = -1234567890;
   const char *format = "%.7u!%.17u Hello, World %.27u!%.37u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test
#test s21_sprintf_i_specifier_test31
   const unsigned int input_unsigned = 12;
   const char *format = "%11.2u!%9.2u Hello, World %7.2u!%5.2u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test
#test s21_sprintf_i_specifier_test32
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.2u!%9.2u Hello, World %7.2u!%5.2u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - zero precision
#test s21_sprintf_i_specifier_test33
   const unsigned int input_unsigned = -12345;
   const char *format = "%11.0u!%9.0u Hello, World %7.0u!%5.0u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - zero precision
#test s21_sprintf_i_specifier_test34
   const unsigned int input_unsigned = 123;
   const char *format = "%11.0u!%9.0u Hello, World %7.0u!%5.0u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_i_specifier_test35
   const unsigned int input_unsigned = 12;
   const char *format = "%11.12u!%9.10u Hello, World %5.10u!%10.5u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_i_specifier_test36
   const unsigned int input_unsigned = -12;
   const char *format = "%11.12u!%9.10u Hello, World %5.10u!%10.5u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_i_specifier_test37
   const unsigned int input_unsigned = 123456;
   const char *format = "%4.5u!%7.8u Hello, World %5.10u!%10.5u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sign with regular int test
#test s21_sprintf_i_specifier_test38
   const unsigned int input_unsigned = 123456;
   const char *format = "%+u!%+u Hello, World %+u!%+u";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_i_specifier_test39
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_i_specifier_test40
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_i_specifier_test41
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum value of octal int
#test s21_sprintf_i_specifier_test42
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of octal int
#test s21_sprintf_i_specifier_test43
    const unsigned int input_unsigned = 034430377;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of octal int
#test s21_sprintf_i_specifier_test44
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum int test
#test s21_sprintf_i_specifier_test45
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum int test
#test s21_sprintf_i_specifier_test46
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%+u%+u%+u Hello, World %+u%+u%+u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_i_specifier_test47
    const unsigned int input_unsigned = 0x7FFFFFFF;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_i_specifier_test48
    const unsigned int input_unsigned = 0x723100;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_i_specifier_test49
    const unsigned int input_unsigned = -0x7FFFFFFF;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_i_specifier_test50
    const unsigned int input_unsigned = 017777777777;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_i_specifier_test51
    const unsigned int input_unsigned = 034430377;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_i_specifier_test52
    const unsigned int input_unsigned = -017777777777;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test - left-justified with no value
#test s21_sprintf_i_specifier_test53
    const unsigned int input_unsigned = 2147483647;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test - left-justified with no value
#test s21_sprintf_i_specifier_test54
    const unsigned int input_unsigned = -2147483647;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - left-justified with no value
#test s21_sprintf_i_specifier_test55
    const unsigned int input_unsigned = 7483647;
    const char *format = "%-u%-u%-u Hello, World %-u%-u%-u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_i_specifier_test56
    const unsigned int input_unsigned = 7483647;
    const char *format = "%+-3u%-7u%-10u Hello, World %+-3.3u%-7.7u%-10.10u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_i_specifier_test57
    const unsigned int input_unsigned = 7483647;
    const char *format = "%+-.3u%-.7u%-.10u Hello, World %+-3.u%-7.u%-10.u";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    const int result = sprintf(buffer, format, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned, input_unsigned);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
#include <string.h>
#include "s21_string.h"

#test s21_strcat_test1
    const char *source = "Hello, I am your new coach.";
    
    char destination[100] = "Hey ";
    char s21_destination[100] = "Hey ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test2
    const char *source = "Hello, I am your new coach.";
    
    char destination[100] = "Hey ";
    char s21_destination[100] = "Hey ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test3
    const char *source = "Hello, I am your new coach.";
    
    char destination[100] = "Hey ";
    char s21_destination[100] = "Hey ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test4
    const char *source = "Hello, I am your new coach.";
    
    char destination[100] = "Hey, this is the first part. ";
    char s21_destination[100] = "Hey, this is the first part. ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test5
    const char *source = "Hello, I am your new coach.";
    
    char destination[100] = "Hey, this is the first part. ";
    char s21_destination[100] = "Hey, this is the first part. ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test6
    const char *source = "Hello, I am your new coach.";
    
    char destination[100] = "Hey, this is the first part. That one was crazy. ";
    char s21_destination[100] = "Hey, this is the first part. That one was crazy. ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test7
    const char *source = "";
    
    char destination[100] = "Hey, this is the first part. That one was crazy. ";
    char s21_destination[100] = "Hey, this is the first part. That one was crazy. ";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test8
    const char *source = "";
    
    char destination[100] = "";
    char s21_destination[100] = "";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test9
    const char *source = "Holy cocksuckers!!!";
    
    char destination[100] = "";
    char s21_destination[100] = "";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));


#test s21_strcat_test10
    const char *source = "Holy cocksuckers!!!";
 
   
    char destination[100] = "UUUURRGH DA FUUUUUUCK!!!!";
    char s21_destination[100] = "UUUURRGH DA FUUUUUUCK!!!!";

    ck_assert_pstr_eq(s21_strcat(s21_destination, source), strcat(destination, source));
#include <string.h>
#include "s21_string.h"

#test s21_strcmp_test1
    const char *input1 = "Hello, I am your new coach.";
    const char *input2 = "Hello, I am your new coach.";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test2
    const char *input1 = "Hello, I am your new coach. Hey";
    const char *input2 = "Hello, I am your new coach.";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test3
    const char *input1 = "Hello, I am your new coach?";
    const char *input2 = "Hello, I am your new coach.";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test4
    const char *input1 = "Hello, I am your new coach.";
    const char *input2 = "Hello, I am your new coach?";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test5
    const char *input1 = "Hello, I am your new coach.";
    const char *input2 = "Hello, I am your new coach.";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test6
    const char *input1 = "Hello, I am your new coach!!";
    const char *input2 = "Hello, I am your new coach??";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test7
    const char *input1 = "";
    const char *input2 = "Hello, I am your new coach??";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test8
    const char *input1 = "Hello, I am your new coach!!";
    const char *input2 = "";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test9
    const char *input1 = "";
    const char *input2 = "";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test10
    const char *input1 = "wow";
    const char *input2 = "";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test11
    const char *input1 = "";
    const char *input2 = "WOW!";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test12
    const char *input1 = "!@#4567\0456";
    const char *input2 = "!\0";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test13
    const char *input1 = "!@#4567\0456";
    const char *input2 = "!@#4567\0456";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test14
    const char *input1 = "That was fucking amazing!";
    const char *input2 = "Exactly!";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));

#test s21_strcmp_test15
    const char *input1 = "Exactly!";
    const char *input2 = "That was fucking amazing!";
    ck_assert_int_eq(s21_strcmp(input1, input2), strcmp(input1, input2));
#include <string.h>
#include "s21_string.h"

#test s21_strcpy_test1
    const char *source = "Hello, I am your new coach. Surprised?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);

#test s21_strcpy_test2
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);

#test s21_strcpy_test3
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);

#test s21_strcpy_test4
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);

#test s21_strcpy_test5
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);

#test s21_strcpy_test6
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);


#test s21_strcpy_test7
    const char *source = "Wo\0w";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);


#test s21_strcpy_test8
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    char destination[100];
    memset(destination, 'a', 100);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);


#test s21_strcpy_test9
    const char *source = "";
    
    char s21_destination[1];
    memset(s21_destination, 'a', 1);
    char destination[1];
    memset(destination, 'a', 1);
    
    s21_strcpy(s21_destination, source);
    strcpy(destination, source);

    ck_assert_str_eq(s21_destination, destination);


#include <string.h>
#include "s21_string.h"

#test s21_strcspn_test1
    const char *string = "Hey, yo, bitch!";
    const char *symbols = " ,!";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test2
    const char *string = "abcde312$#@";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test3
    const char *string = "@abcde312$#@";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test4
    const char *string = "aaabcdefghfdgdfgdg312$#@";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test5
    const char *string = "aaabcdefghfdgdfgdg312$#@";
    const char *symbols = "";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test6
    const char *string = "";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test7
    const char *string = "";
    const char *symbols = "";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test8
    const char *string = "Wow! This is amazing!!";
    const char *symbols = "T!Wis ohw";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test9
    const char *string = "Wow! This is amazing!!";
    const char *symbols = "T!Wis ohwma";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));


#test s21_strcspn_test10
    const char *string = "Wow! This is amazing!!";
    const char *symbols = "T!Wis ohwmagz";

    ck_assert_uint_eq(s21_strcspn(string, symbols), strcspn(string, symbols));

#include <string.h>
#include "s21_string.h"

#test s21_strerror_test0
    ck_assert_pstr_eq(s21_strerror(0), strerror(0));
#test s21_strerror_test1
    ck_assert_pstr_eq(s21_strerror(1), strerror(1));
#test s21_strerror_test2
    ck_assert_pstr_eq(s21_strerror(2), strerror(2));
#test s21_strerror_test3
    ck_assert_pstr_eq(s21_strerror(3), strerror(3));
#test s21_strerror_test4
    ck_assert_pstr_eq(s21_strerror(4), strerror(4));
#test s21_strerror_test5
    ck_assert_pstr_eq(s21_strerror(5), strerror(5));
#test s21_strerror_test6
    ck_assert_pstr_eq(s21_strerror(6), strerror(6));
#test s21_strerror_test7
    ck_assert_pstr_eq(s21_strerror(7), strerror(7));
#test s21_strerror_test8
    ck_assert_pstr_eq(s21_strerror(8), strerror(8));
#test s21_strerror_test9
    ck_assert_pstr_eq(s21_strerror(9), strerror(9));

#test s21_strerror_test10
    ck_assert_pstr_eq(s21_strerror(10), strerror(10));
#test s21_strerror_test11
    ck_assert_pstr_eq(s21_strerror(11), strerror(11));
#test s21_strerror_test12
    ck_assert_pstr_eq(s21_strerror(12), strerror(12));
#test s21_strerror_test13
    ck_assert_pstr_eq(s21_strerror(13), strerror(13));
#test s21_strerror_test14
    ck_assert_pstr_eq(s21_strerror(14), strerror(14));
#test s21_strerror_test15
    ck_assert_pstr_eq(s21_strerror(15), strerror(15));
#test s21_strerror_test16
    ck_assert_pstr_eq(s21_strerror(16), strerror(16));
#test s21_strerror_test17
    ck_assert_pstr_eq(s21_strerror(17), strerror(17));
#test s21_strerror_test18
    ck_assert_pstr_eq(s21_strerror(18), strerror(18));
#test s21_strerror_test19
    ck_assert_pstr_eq(s21_strerror(19), strerror(19));

#test s21_strerror_test20
    ck_assert_pstr_eq(s21_strerror(20), strerror(20));
#test s21_strerror_test21
    ck_assert_pstr_eq(s21_strerror(21), strerror(21));
#test s21_strerror_test22
    ck_assert_pstr_eq(s21_strerror(22), strerror(22));
#test s21_strerror_test23
    ck_assert_pstr_eq(s21_strerror(23), strerror(23));
#test s21_strerror_test24
    ck_assert_pstr_eq(s21_strerror(24), strerror(24));
#test s21_strerror_test25
    ck_assert_pstr_eq(s21_strerror(25), strerror(25));
#test s21_strerror_test26
    ck_assert_pstr_eq(s21_strerror(26), strerror(26));
#test s21_strerror_test27
    ck_assert_pstr_eq(s21_strerror(27), strerror(27));
#test s21_strerror_test28
    ck_assert_pstr_eq(s21_strerror(28), strerror(28));
#test s21_strerror_test29
    ck_assert_pstr_eq(s21_strerror(29), strerror(29));

#test s21_strerror_test30
    ck_assert_pstr_eq(s21_strerror(30), strerror(30));
#test s21_strerror_test31
    ck_assert_pstr_eq(s21_strerror(31), strerror(31));
#test s21_strerror_test32
    ck_assert_pstr_eq(s21_strerror(32), strerror(32));
#test s21_strerror_test33
    ck_assert_pstr_eq(s21_strerror(33), strerror(33));
#test s21_strerror_test34
    ck_assert_pstr_eq(s21_strerror(34), strerror(34));
#test s21_strerror_test35
    ck_assert_pstr_eq(s21_strerror(35), strerror(35));
#test s21_strerror_test36
    ck_assert_pstr_eq(s21_strerror(36), strerror(36));
#test s21_strerror_test37
    ck_assert_pstr_eq(s21_strerror(37), strerror(37));
#test s21_strerror_test38
    ck_assert_pstr_eq(s21_strerror(38), strerror(38));
#test s21_strerror_test39
    ck_assert_pstr_eq(s21_strerror(39), strerror(39));

#test s21_strerror_test40
    ck_assert_pstr_eq(s21_strerror(-5), strerror(-5));
#test s21_strerror_test41
    ck_assert_pstr_eq(s21_strerror(1489), strerror(1489));
#test s21_strerror_test42
    ck_assert_pstr_eq(s21_strerror(-1489), strerror(-1489));
#test s21_strerror_test43
    ck_assert_pstr_eq(s21_strerror(12345678), strerror(12345678));
#test s21_strerror_test44
    ck_assert_pstr_eq(s21_strerror(92345678), strerror(92345678));


#include <string.h>
#include "s21_string.h"

#test s21_strlen_test1
    const char *input = "Hello, I am your new coach.";    
    ck_assert_uint_eq(s21_strlen(input), strlen(input));

#test s21_strlen_test2
    const char *input = "";    
    ck_assert_uint_eq(s21_strlen(input), strlen(input));

#test s21_strlen_test3
    const char *input = "Hey\0 yo";    
    ck_assert_uint_eq(s21_strlen(input), strlen(input));

#test s21_strlen_test4
    const char *input = "Right honourable gentlemen are drinking a tea with a specific conversation.";    
    ck_assert_uint_eq(s21_strlen(input), strlen(input));
#include <string.h>
#include "s21_string.h"
#include <stdio.h>

#test s21_strncat_test1
    const char *source = "Hello, I am your new coach.";
    const s21_size_t size = 7;
    
    char destination[100] = "Hey ";
    char s21_destination[100] = "Hey ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));
    //printf("%s\n", s21_destination);
    //printf("%s\n", destination);


#test s21_strncat_test2
    const char *source = "Hello, I am your new coach.";
    const s21_size_t size = 5;
    
    char destination[100] = "Hey ";
    char s21_destination[100] = "Hey ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test3
    const char *source = "Hello, I am your new coach.";
    const s21_size_t size = 5;
    
    char destination[100] = "Hey ";
    char s21_destination[100] = "Hey ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test4
    const char *source = "Hello, I am your new coach.";
    const s21_size_t size = 15;
    
    char destination[100] = "Hey, this is the first part. ";
    char s21_destination[100] = "Hey, this is the first part. ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test5
    const char *source = "Hello, I am your new coach.";
    const s21_size_t size = s21_strlen(source);
    
    char destination[100] = "Hey, this is the first part. ";
    char s21_destination[100] = "Hey, this is the first part. ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test6
    const char *source = "Hello, I am your new coach.";
    const s21_size_t size = s21_strlen(source);
    
    char destination[100] = "Hey, this is the first part. That one was crazy. ";
    char s21_destination[100] = "Hey, this is the first part. That one was crazy. ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test7
    const char *source = "";
    const s21_size_t size = s21_strlen(source);
    
    char destination[100] = "Hey, this is the first part. That one was crazy. ";
    char s21_destination[100] = "Hey, this is the first part. That one was crazy. ";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test8
    const char *source = "";
    const s21_size_t size = s21_strlen(source);
    
    char destination[100] = "";
    char s21_destination[100] = "";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test9
    const char *source = "Holy cocksuckers!!!";
    const s21_size_t size = s21_strlen(source);
    
    char destination[100] = "";
    char s21_destination[100] = "";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));


#test s21_strncat_test10
    const char *source = "Holy cocksuckers!!!";
    const s21_size_t size = s21_strlen(source);
    
    char destination[100] = "UUUURRGH DA FUUUUUUCK!!!!";
    char s21_destination[100] = "UUUURRGH DA FUUUUUUCK!!!!";

    ck_assert_pstr_eq(s21_strncat(s21_destination, source, size), strncat(destination, source, size));
#include <string.h>
#include "s21_string.h"

#test s21_strncmp_test1
    const char *input1 = "Hello, I am your new coach.";    
    const char *input2 = "Hello, I am your new coach.";
    const s21_size_t size = s21_strlen(input1);

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test2
    const char *input1 = "Hello, I am your new coach!.";    
    const char *input2 = "Hello, I am your new coach?.";
    const s21_size_t size = s21_strlen(input1);

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test3
    const char *input1 = "Hello, I am your new coach!.";    
    const char *input2 = "Hello, I am your new coach?.";
    const s21_size_t size = s21_strlen(input1) / 2ul;

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test4
    const char *input1 = "Hello, I am your new coach!.";    
    const char *input2 = "Hi, I am your new coach?.";
    const s21_size_t size = s21_strlen(input1) / 2ul;

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test5
    const char *input1 = "Hello, I am your new coach!.";    
    const char *input2 = "";
    const s21_size_t size = s21_strlen(input1) / 2ul;

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test6
    const char *input1 = "";    
    const char *input2 = "Wow";
    const s21_size_t size = 0ul;

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test7
    const char *input1 = "Wow";    
    const char *input2 = "";
    const s21_size_t size = 0ul;

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test8
    const char *input1 = "";    
    const char *input2 = "";
    const s21_size_t size = s21_strlen(input1);

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));


#test s21_strncmp_test9
    const char *input1 = "";    
    const char *input2 = "";
    const s21_size_t size = 0;

    ck_assert_int_eq(s21_strncmp(input1, input2, size), strncmp(input1, input2, size));
#include <string.h>
#include "s21_string.h"

#test s21_strncpy_test1
    const char *source = "Hello, I am your new coach. Surprised?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 96ul;  //  if size > 96 valgrinds reports 'conditional jump depends on uninitialized value' error (memory has 100)

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test2
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';
    
    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 0ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test3
    const char *source = "Hello, I am your new coach. Surprised? Stunned?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 50ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test4
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 95ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test5
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = s21_strlen(source);

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test6
    const char *source = "Wow";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';

    const s21_size_t size = 0ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);



// TESTS WITHOUT OVERLAPPING SOURCE AND DESTINATION

#test s21_strncpy_test7
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 2;

    s21_strncpy(s21_destination, s21_source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test8
    char s21_source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char source[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_destination = s21_source + 3;    
    char *destination = source + 3;
    
    const s21_size_t size = 3;

    s21_strncpy(s21_destination, s21_source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test9
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    
    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;
    
    const s21_size_t size = 2;

    s21_strncpy(s21_destination, s21_source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test10
    char s21_destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};
    char destination[] = { 'H', 'e', 'l', 'l', 'o', ',', 'w', 'o', 'w', '!', '\0'};

    char *s21_source = s21_destination + 3;    
    char *source = destination + 3;

    const s21_size_t size = 3;

    s21_strncpy(s21_destination, s21_source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test11
    const char *source = "HOLY\0 PPFFFFFF SHEEEAAATT!!!";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';
    
    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';

    const s21_size_t size = 96ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test12
    const char *source = "HOLY PPFFFFFF SHEE\0EAAATT!!!";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 96ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test13
    const char *source = "HOLY PPFFFFFF SHEE\0EAAATT!!!";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 5ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test14
    const char *source = "Hello, I am your new coach. Surprised?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';

    const s21_size_t size = 4ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test15
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 5ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test16
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 5ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test17
    const char *source = "";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';
    
    const s21_size_t size = 95ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);


#test s21_strncpy_test18
    const char *source = "Hello, I am your new coach. Surprised?";
    
    char s21_destination[100];
    memset(s21_destination, 'a', 100);
    s21_destination[99] = '\0';

    char destination[100];
    memset(destination, 'a', 100);
    destination[99] = '\0';

    const s21_size_t size = 8ul;

    s21_strncpy(s21_destination, source, size);
    strncpy(destination, source, size);

    ck_assert_pstr_eq(s21_destination, destination);
    ck_assert_mem_eq(s21_destination, destination, size);
#include <string.h>
#include "s21_string.h"

#test s21_strpbrk_test1
    const char *string = "Hey, yo, bitch!";
    const char *symbols = " ,!";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test2
    const char *string = "!Hey, yo, bitch!";
    const char *symbols = " ,!";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test3
    const char *string = "yo, bitch!";
    const char *symbols = " ,!";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test4
    const char *string = " yo, bitch!";
    const char *symbols = " ,!";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test5
    const char *string = " yo, bitch!";
    const char *symbols = "";

    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test6
    const char *string = "";
    const char *symbols = " ,!";

    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test7
    const char *string = "";
    const char *symbols = "";

    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test8
    const char *string = "Hey, yo, daemon's little sister!";
    const char *symbols = "";

    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test9
    const char *string = "Hey, yo, daemon's little sister!";
    const char *symbols = " ";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test10
    const char *string = "Hey, yo, daemon's little sister!";
    const char *symbols = "cocksucker";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));


#test s21_strpbrk_test11
    const char *string = "Hey, yo, daemon's little sister!" 
    "Holy sheeaatt!! Holy cocksuckers!! Wow!";
    const char *symbols = "cocksucker";

    ck_assert_str_eq(s21_strpbrk(string, symbols), strpbrk(string, symbols));

#include <string.h>
#include "s21_string.h"

#test s21_strchr_test1
    const char *string = "Hello, I am your new coach.";
    const char symbol = 'y';
    ck_assert_ptr_eq(s21_strchr(string, symbol), strchr(string, symbol));

#test s21_strchr_test2
    const char *string = "Hello, I am your new coach.";
    const char symbol = 'f';
    ck_assert_ptr_eq(s21_strchr(string, symbol), strchr(string, symbol));

#test s21_strchr_test3
    const char *string = "You fucking cocksucker!";
    const char symbol = 'f';
    ck_assert_ptr_eq(s21_strchr(string, symbol), strchr(string, symbol));

#test s21_strchr_test4
    const char *string = "You fucking cocksucker, holy fuck!";
    const char symbol = 'f';
    ck_assert_ptr_eq(s21_strchr(string, symbol), strchr(string, symbol));

#test s21_strchr_test5
    const char *string = "";
    const char symbol = 'f';
    ck_assert_ptr_eq(s21_strchr(string, symbol), strchr(string, symbol));

#test s21_strchr_test6
    const char *string = "UUURRRGGGGGHHHH DAAAAAA FUUUUUUCK!!!!!";
    const char symbol = 'F';
    ck_assert_ptr_eq(s21_strchr(string, symbol), strchr(string, symbol));

#include <string.h>
#include "s21_string.h"

#test s21_strspn_test1
    const char *string = "Hey, yo, bitch!";
    const char *symbols = " ,!";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test2
    const char *string = "abcde312$#@";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test3
    const char *string = "@abcde312$#@";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test4
    const char *string = "aaabcdefghfdgdfgdg312$#@";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test5
    const char *string = "aaabcdefghfdgdfgdg312$#@";
    const char *symbols = "";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test6
    const char *string = "";
    const char *symbols = "qwertyuiopasdfghjklzxcvbnm";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test7
    const char *string = "";
    const char *symbols = "";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test8
    const char *string = "Wow! This is amazing!!";
    const char *symbols = "T!Wis ohw";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test9
    const char *string = "Wow! This is amazing!!";
    const char *symbols = "T!Wis ohwma";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));


#test s21_strspn_test10
    const char *string = "Wow! This is amazing!!";
    const char *symbols = "T!Wis ohwmagz";

    ck_assert_uint_eq(s21_strspn(string, symbols), strspn(string, symbols));
#include <string.h>
#include "s21_string.h"

#test s21_strstr_test1
    const char *string = "Hello, I am your new coach.";
    const char *substring = "coach";

    ck_assert_str_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test2
    const char *string = "You fucking cocksucker!";
    const char *substring = "fucking";
    
    ck_assert_str_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test3
    const char *string = "UUURRRGGGGGHHHH DAAAAAA FUUUUUUCK!!!!! SHEEEEEAAAAT!!!! FUUUUUUCK!!!";
    const char *substring = "FUUUUUUCK";
    
    ck_assert_str_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test4
    const char *string = "Hello, I am your new coach.";
    const char *substring = "interlocutor";
    
    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test5
    const char *string = "You fucking cocksucker, holy fuck!";
    const char *substring = "You fucking cocksucker!!!";
    
    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test6
    const char *string = "UUURRRGGGGGHHHH DAAAAAA FUUUUUUCK!!!!!";
    const char *substring = "da fuck";

    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test7
    const char *string = "";
    const char *substring = ""; // IMPORTANT CASE
    
    ck_assert_str_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test8
    const char *string = "Hey";
    const char *substring = ""; // IMPORTANT CASE
    
    ck_assert_str_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test9
    const char *string = "Hey";
    const char *substring = "Hey yo"; // IMPORTANT CASE
    
    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strstr(string, substring), strstr(string, substring));


#test s21_strstr_test10
    const char *string = "";
    const char *substring = "Hey yo"; // IMPORTANT CASE
    
    // ck_assert_str_eq(null, null) returns failed test
    // that's why ck_assert_ptr_eq instead of ck_assert_str_eq
    ck_assert_ptr_eq(s21_strstr(string, substring), strstr(string, substring));

#include <string.h>
#include "s21_string.h"

#test s21_strtok_test1
    char string[] = "URGH DA FUCK!";
    char s21_string[] = "URGH DA FUCK!";
    const char *delimiters = " ";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_string, string, size);
    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test2
    char string[] = "   Hey, yo, hey";
    char s21_string[] = "   Hey, yo, hey";
    const char *delimiters = ", ";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }
    /*
    printf("Contents of the input string now: '");
    for(size_t n = 0; n < size + 1; ++n)
        string[n] ? putchar(string[n]) : fputs("\\0", stdout);
    puts("'");
    printf("Contents of the input string now: '");
    for(size_t n = 0; n < size + 1; ++n)
        s21_string[n] ? putchar(s21_string[n]) : fputs("\\0", stdout);
    puts("'");
    */
    ck_assert_mem_eq(s21_string, string, size);
   

    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test3
    char string[] = "  URGH DA FUCK!";
    char s21_string[] = "  URGH DA FUCK!";
    const char *delimiters = " ";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_string, string, size);
    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test4
    char string[] = "URGH DA FUCK!";
    char s21_string[] = "URGH DA FUCK!";
    const char *delimiters = " ";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_string, string, size);
    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test5
    char string[] = "Hey,yo,bitch,wow";
    char s21_string[] = "Hey,yo,bitch,wow";
    const char *delimiters = ",";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_string, string, size);
    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test6
    char string[] = "HEEEEY, Hey, yo, bitch";
    char s21_string[] = "HEEEEY, Hey, yo, bitch";
    const char *delimiters = ", ";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_string, string, size);
    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test7
    //char source[]     = "On the streets, please, drive safely and responsibly! You should care!\01234567\0\0\0\0"; //-
    //char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!\01234567\0\0\0\0"; //-
    //char source[]     = "On the streets, please, drive safely and responsibly! You should care!\0\0\0\0\0\0\0\0\0"; //+
    //char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!\0\0\0\0\0\0\0\0\0"; //+
    //char source[]     = "On the streets, please, drive safely and responsibly! You should care!123456789"; //+ 83+terminator
    //char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!123456789"; //+ 83+terminator
    //char source[]     = "On the streets, please, drive safely and responsibly! You should care!1234567890"; //+ 84+terminator
    //char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!1234567890"; //+ 84+terminator
    //char source[]     = "On the streets, please, drive safely and responsibly! You should care!12345678901"; //- 85+terminator
    //char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!12345678901"; //- 85+terminator
    //char source[]     = "On the streets, please, drive safely and responsibly! You should care!12345678901234567890123"; //+- 99+terminator
    //char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!12345678901234567890123"; //+- 99+terminator
    char source[]     = "On the streets, please, drive safely and responsibly! You should care!1234567890123456789012345"; //+ 101+terminator
    char s21_source[] = "On the streets, please, drive safely and responsibly! You should care!1234567890123456789012345"; //+ 101+terminator
    //char source[]     = "On the streets, p"; //+
    //char s21_source[] = "On the streets, p"; //+

    const char *delimiters = "!, ";

    const size_t size = strlen(source);
    
    char *token = strtok(source, delimiters);
    char *s21_token = s21_strtok(s21_source, delimiters);
    
    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_source, source, size);  //  this function make valgrind report an error: conditional jump depends on uninitialized value
    ck_assert_pstr_eq(s21_token, token);


#test s21_strtok_test8
    char string[] =      "Did you see? That explosion was as huge"
                        " as hell, holy fuck! Amazing!12345678901";  //  length is chosen for valgrind
    char s21_string[] = "Did you see? That explosion was as huge"
                        " as hell, holy fuck! Amazing!12345678901";  //  length is chosen for valgrind
    const char *delimiters = ",! ?";

    const size_t size = strlen(string);

    char *token = strtok(string, delimiters);
    char *s21_token = s21_strtok(s21_string, delimiters);

    ck_assert_pstr_eq(s21_token, token);
    while(token) {
        token = strtok(NULL, delimiters);
        s21_token = s21_strtok(s21_NULL, delimiters);

        ck_assert_pstr_eq(s21_token, token);
    }

    ck_assert_mem_eq(s21_string, string, size);
    ck_assert_pstr_eq(s21_token, token);

#include <string.h>
#include <stdlib.h>
#include "s21_string.h"

#test s21_to_lower_test1
    const char *string   = "URGH DA FUCK!";
    const char *expected = "urgh da fuck!";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test2
    const char *string   = "URGH DA FUCK! NOOO!!!";
    const char *expected = "urgh da fuck! nooo!!!";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test3
    const char *string   = "12345";
    const char *expected = "12345";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test4
    const char *string   = "holy sheeeaaattt";
    const char *expected = "holy sheeeaaattt";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test5
    const char *string   = "HOLY COCKSUCKERS BITCHES!";
    const char *expected = "holy cocksuckers bitches!";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test6
    const char *string   = "";
    const char *expected = "";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test7
    const char *string   = "That was perfect endurance DURING THE ENTIRE FIGHT! CONGRATULATIONS!";
    const char *expected = "that was perfect endurance during the entire fight! congratulations!";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test8
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!+";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvxyz!+";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test9
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!@#$%^&*()_+hey";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvxyz!@#$%^&*()_+hey";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test10
    const char *string   = "@#$%^&*()_+hey";
    const char *expected = "@#$%^&*()_+hey";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test11
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!@#$%^&*()_+hey";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvxyz!@#$%^&*()_+hey";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test12
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!@#$%";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvxyz!@#$%";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test13
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvxyz";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test14
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrst";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmnopqrst";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test15
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmn";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghijklmn";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test16
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghi";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzabcdefghi";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test17
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZab";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzab";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_lower_test18
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZab123";
    const char *expected = "0123456789abcdefghijklmnopqrstuvxyzab123";
    
    char *actual = s21_to_lower(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);
#include <string.h>
#include <stdlib.h>
#include "s21_string.h"

#test s21_to_upper_test1
    const char *string   = "urgh da fuck!";
    const char *expected = "URGH DA FUCK!";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test2
    const char *string   = "urgh da fuck! nooo!!!";
    const char *expected = "URGH DA FUCK! NOOO!!!";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test3
    const char *string   = "12345";
    const char *expected = "12345";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test4
    const char *string   = "holy sheeeaaattt";
    const char *expected = "HOLY SHEEEAAATTT";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test5
    const char *string   = "holy cocksuckers bitches!";
    const char *expected = "HOLY COCKSUCKERS BITCHES!";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test6
    const char *string   = "";
    const char *expected = "";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test7
    const char *string   = "That was perfect endurance DURING THE ENTIRE FIGHT! CONGRATULATIONS!";
    const char *expected = "THAT WAS PERFECT ENDURANCE DURING THE ENTIRE FIGHT! CONGRATULATIONS!";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test8
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!+";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVXYZ!+";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test9
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!@#$%^&*()_+hey";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVXYZ!@#$%^&*()_+HEY";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test10
    const char *string   = "@#$%^&*()_+hey";
    const char *expected = "@#$%^&*()_+HEY";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test11
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!@#$%^&*()_+hey";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVXYZ!@#$%^&*()_+HEY";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test12
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz!@#$%";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVXYZ!@#$%";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test13
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVXYZ";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test14
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrst";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRST";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test15
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmn";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMN";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test16
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghi";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHI";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test17
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZab";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZAB";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);


#test s21_to_upper_test18
    const char *string   = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZab123";
    const char *expected = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZAB123";
    
    char *actual = s21_to_upper(string);
    ck_assert_pstr_eq(actual, expected);

    free(actual);
#include <string.h>
#include <stdlib.h>
#include "s21_string.h"

#test s21_to_trim_test1
    const char *string = "----URGH DA FUCK!+++++";
    const char *symbols_to_remove = "+-";
    const char *expected = "URGH DA FUCK!";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test2
    const char *string = "--/.. --URGH DA FUCK!+++++/... ";
    const char *symbols_to_remove = "/+.- ";
    const char *expected = "URGH DA FUCK!";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test3
    const char *string = "--/.. --URGH../ DA../+- FUCK!+++++/... ";
    const char *symbols_to_remove = "/+.- ";
    const char *expected = "URGH../ DA../+- FUCK!";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test4
    const char *string = "--/.. &*--URGH../ DA../+- FUCK!+++&*++/... ";
    const char *symbols_to_remove = "/+.- *&";
    const char *expected = "URGH../ DA../+- FUCK!";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test5
    const char *string = "1-2-3/4.5.6 7&8*9-0-URGH../ DA1234567890./+- FUCK!+++&*++/... 123456789";
    const char *symbols_to_remove = "67890/+.- *&12345";
    const char *expected = "URGH../ DA1234567890./+- FUCK!";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test6
    const char *string = "1-2-3/4.5.6 7&8*9-0-URGH../ DA1234567890./+- FUCK!+++&*++/... 123456789";
    const char *symbols_to_remove = "";
    const char *expected = "1-2-3/4.5.6 7&8*9-0-URGH../ DA1234567890./+- FUCK!+++&*++/... 123456789";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test7
    const char *string = "";
    const char *symbols_to_remove = "+- ";
    const char *expected = "";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test8
    const char *string = "";
    const char *symbols_to_remove = "";
    const char *expected = "";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test9
    const char *string = "0000102030405060708090000";
    const char *symbols_to_remove = "0";
    const char *expected = "10203040506070809";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);

#test s21_to_trim_test10
    const char *string = "000 0102030405060708090 000";
    const char *symbols_to_remove = "0";
    const char *expected = " 0102030405060708090 ";
    
    char *actual = s21_trim(string, symbols_to_remove);
    ck_assert_pstr_eq(actual, expected);

    free(actual);



