
#include <string.h>
#include <stdio.h>
//#include "s21_string.h"
#include "../s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);

#test s21_sprintf_test_ldi_0
    const long int input_int = 12;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_1
    const long int input_int = -12;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_2
    const long int input_int = 123456789;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_3
    const long int input_int = -123456789;
    const char *format = "%ld!%ld Hello, World %ld!%ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_4
    const long int input_int = 12;
    const char *format = "%.0ld!%.0ld DA FUCK %.0ld!%.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_5
    const long int input_int = 1234;
    const char *format = "%.1ld!%.2ld DA FUCK %.1ld!%.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_6
    const long int input_int = -1234;
    const char *format = "%.1ld!%.2ld DA FUCK %.1ld!%.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



////////////////////////////////////////////////////////////


#test s21_sprintf_test_ldi_7
    const long int input_int = 1234;
    const char *format = "%.5ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_8
    const long int input_int = -1234;
    const char *format = "%.13ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_8_1
    const long int input_int = -1234;
    const char *format = "%.5ld!%.5ld DA FUCK %.5ld!%.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_9
    const long int input_int = 1234567890;
    const char *format = "%.5ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_10
    const long int input_int = -1234567890;
    const char *format = "%.5ld!%.7ld DA FUCK %.9ld!%.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



///////////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_ldi_width_0
    const long int input_int = 12;
    const char *format = "%0ld!%0ld DA FUCK %0ld!%0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_1
    const long int input_int = -12;
    const char *format = "%0ld!%0ld DA FUCK %0ld!%0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_2
    const long int input_int = 12;
    const char *format = "%1ld!%2ld DA FUCK %1ld!%2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_3
    const long int input_int = -12;
    const char *format = "%1ld!%2ld DA FUCK %1ld!%2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_4
    const long int input_int = 12;
    const char *format = "%10ld!%12ld DA FUCK %11ld!%13ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_5
    const long int input_int = -12;
    const char *format = "%10ld!%12ld DA FUCK %11ld!%13ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


///////////////////////////////////////////////////////////////////////


#test s21_sprintf_test_ldi_precision_width_0
    const long int input_int = 12;
    const char *format = "%3.0ld!%4.0ld DA FUCK %4.0ld!%5.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_precision_width_1
    const long int input_int = 12;
    const char *format = "%3.1ld!%4.2ld DA FUCK %4.1ld!%5.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_precision_width_2
    const long int input_int = -12;
    const char *format = "%5.3ld!%6.4ld DA FUCK %6.4ld!%7.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


//////////////////////////////////////////////////////////////////////



#test s21_sprintf_test_ldi_width_left_justify_0
    const long int input_int = 12;
    const char *format = "%-0ld!%-0ld DA FUCK %-0ld!%-0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_1
    const long int input_int = 12;
    const char *format = "%-1ld!%-2ld DA FUCK %-1ld!%-2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_2
    const long int input_int = -12;
    const char *format = "%-0ld!%-0ld DA FUCK %-0ld!%-0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_3
    const long int input_int = -12;
    const char *format = "%-1ld!%-2ld DA FUCK %-1ld!%-2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_4
    const long int input_int = 12;
    const char *format = "%-3ld!%-4ld DA FUCK %-5ld!%-6ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_5
    const long int input_int = -12;
    const char *format = "%-3ld!%-4ld DA FUCK %-5ld!%-2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_6
    const long int input_int = 12;
    const char *format = "%-3.0ld!%-4.0ld DA FUCK %-5.0ld!%-2.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_7
    const long int input_int = 12;
    const char *format = "%-4.1ld!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_8
    const long int input_int = 12;
    const char *format = "!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_width_left_justify_9
    const long int input_int = -12;
    const char *format = "%-4.1ld!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_width_left_justify_10
    const long int input_int = -12;
    const char *format = "!%-4.2ld DA FUCK %-5.1ld!%-4.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


////////////////////////////////////////////////////////

#test s21_sprintf_test_ldi_plus_0
    const long int input_int = 12;
    const char *format = "%+ld!%+ld DA FUCK %+ld!%+ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_1
    const long int input_int = -12;
    const char *format = "%+ld!%+ld DA FUCK %+ld!%+ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_2
    const long int input_int = -12;
    const char *format = "%+0.0ld!%+0.0ld DA FUCK %+0.0ld!%+0.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_3
    const long int input_int = 12;
    const char *format = "%+0.0ld!%+0.0ld DA FUCK %+0.0ld!%+0.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_4
    const long int input_int = 12;
    const char *format = "%+1.0ld!%+2.0ld DA FUCK %+1.0ld!%+2.0ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_5
    const long int input_int = 12;
    const char *format = "%+0.1ld!%+0.2ld DA FUCK %+0.1ld!%+0.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_6
    const long int input_int = -12;
    const char *format = "%+0.1ld!%+0.2ld DA FUCK %+0.1ld!%+0.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_7
    const long int input_int = 12;
    const char *format = "%+6.1ld!%+7.2ld DA FUCK %+8.1ld!%+9.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_8
    const long int input_int = -12;
    const char *format = "%+6.1ld!%+7.2ld DA FUCK %+8.1ld!%+9.2ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_9
    const long int input_int = 12;
    const char *format = "%+8.6ld!%+9.7ld DA FUCK %+10.8ld!%+11.9ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_9_1
    const long int input_int = -12;
    const char *format = "%8.6ld!%9.7ld DA FUCK %10.8ld!%11.9ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_10
    const long int input_int = 12;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_11
    const long int input_int = -12;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_12
    const long int input_int = 1234567890;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_13
    const long int input_int = -1234567890;
    const char *format = "%+6.8ld!%+7.9ld DA FUCK %+8.10ld!%+9.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_14
    const long int input_int = 1234567890;
    const char *format = "%+16.8ld!%+107.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_15
    const long int input_int = -1234567890;
    const char *format = "%+16.8ld!%+17.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_16
    const long int input_int = 1234567890;
    const char *format = "%+16.8ld!%+107.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_17
    const long int input_int = -1234567890;
    const char *format = "%+6.18ld!%+7.19ld DA FUCK %+8.20ld!%+9.21ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_18
    const long int input_int = 1234567890;
    const char *format = "%+16.8ld!%+107.9ld DA FUCK %+18.10ld!%+19.11ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_19
    const long int input_int = -1234567890;
    const char *format = "%+16.18ld!%+17.19ld DA FUCK %+18.20ld!%+19.21ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_plus_20
    const long int input_int = 1234567890;
    const char *format = "%+160.80ld!%+170.90ld DA FUCK %+180.100ld!%+190.110ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_plus_21
    const long int input_int = -1234567890;
    const char *format = "%+160.180ld!%+170.190ld DA FUCK %+180.200ld!%+190.210ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_left_justify_0
    const long int input_int = -1234567890;
    const char *format = "%-+160.180ld!%-+170.190ld DA FUCK %-+180.200ld!%-+190.210ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_1
    const long int input_int = -1234567890;
    const char *format = "%+-160.180ld!%+-170.190ld DA FUCK %+-180.200ld!%+-190.210ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_2
    const long int input_int = -1234567890;
    const char *format = "%+-16ld!%+-17ld DA FUCK %+-18ld!%+-19ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_3
    const long int input_int = 1234;
    const char *format = "%-+16ld!%-+17ld DA FUCK %+-18ld!%+-19ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



#test s21_sprintf_test_ldi_left_justify_4
    const long int input_int = -1234;
    const char *format = "%-+16ld!%-+17ld DA FUCK %+-18ld!%+-19ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_5
    const long int input_int = 1234;
    const char *format = "%-16.10ld!%-17.10ld DA FUCK %-18.8ld!%-19.8ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_6
    const long int input_int = 1234;
    const char *format = "%-+16.10ld!%-+17.10ld DA FUCK %-+18.8ld!%-+19.8ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_7
    const long int input_int = 12;
    const char *format = "%-6.4ld!%-7.5ld DA FUCK %-8.4ld!%-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_8
    const long int input_int = -12;
    const char *format = "%-6.4ld!%-7.5ld DA FUCK %-8.4ld!%-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_9
    const long int input_int = 12;
    const char *format = "%-+6.4ld!%-+7.5ld DA FUCK %-+8.4ld!%-+9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_10
    const long int input_int = -12;
    const char *format = "%-+6.4ld!%-+7.5ld DA FUCK %-+8.4ld!%-+9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_11
    const long int input_int = 123;
    const char *format = "%+-6.4ld!%+-7.5ld DA FUCK %+-8.4ld!%+-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_test_ldi_left_justify_12
    const long int input_int = -123;
    const char *format = "%+-6.4ld!%+-7.5ld DA FUCK %+-8.4ld!%+-9.5ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int,  input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %i Maximum value of hexadecimal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test10
    const long int input_int = 0x7FFFFFFF;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test11
    const long int input_int = 0x723100;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test12
    const long int input_int = -0x7FFFFFFF;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test13
    const long int input_int = 017777777777;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test14
    const long int input_int = 034430377;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int with sign, width and precision
#test s21_sprintf_ldi_specifier_test15
    const long int input_int = -017777777777;
    const char *format = "+20.30%+9.5li%+-30.15li%-5.10li Hello, World %-50.25li%-50.25li%+0.0li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular value - right-justify flag test
#test s21_sprintf_ldi_specifier_test16
   const long int input_int = 12;
   const char *format = "%5li%5li Hello, World %5li%5li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);



// %i Negative value - right-justify flag test
#test s21_sprintf_ldi_specifier_test17
   const long int input_int = -12;
   const char *format = "%5li%5li Hello, World %5li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test
#test s21_sprintf_ldi_specifier_test18
   const long int input_int = -1234567;
   const char *format = "%li%5li Hello, World %5li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - right-justify flag test with different width
#test s21_sprintf_ldi_specifier_test19
   const long int input_int = -1234567;
   const char *format = "%15li%5li Hello, World %51li%5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test
#test s21_sprintf_ldi_specifier_test20
   const long int input_int = -12;
   const char *format = "%-5li%-5li Hello, World %-5li%-5li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width
#test s21_sprintf_ldi_specifier_test21
   const long int input_int = -12;
   const char *format = "%-5ld%-10ld%-15ld Hello, World %-5ld%-10ld%-15ld";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_ldi_specifier_test22
   const long int input_int = -12;
   const char *format = "%-+3li%-+5li Hello, World %-+7li%-+10li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - left-justify flag test with different width and singed flag
#test s21_sprintf_ldi_specifier_test23
   const long int input_int = -123456789;
   const char *format = "%-+5li%-+5li Hello, World %-+50li%-+50li";

   char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big positive value - left-justify flag test with different width and singed flag
#test s21_sprintf_ldi_specifier_test24
   const long int input_int = 123456789;
   const char *format = "%-+5li%-+5li Hello, World %-+50li%-+50li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test
#test s21_sprintf_ldi_specifier_test25
   const long int input_int = 12;
   const char *format = "%.5li!%.5li Hello, World %.5li!%.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test (two-digit number)
#test s21_sprintf_ldi_specifier_test26
   const long int input_int = 12345;
   const char *format = "%.15li!%.15li Hello, World %.15li!%.15li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Normal value - precision test with different precision
#test s21_sprintf_ldi_specifier_test27
   const long int input_int = 12345;
   const char *format = "%.1li!%.3li Hello, World %.lid!%.15li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - precision test with same values
#test s21_sprintf_ldi_specifier_test28
   const long int input_int = -12345;
   const char *format = "%.7li!%.7li Hello, World %.7li!%.7li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with same values
#test s21_sprintf_ldi_specifier_test29
   const long int input_int = -123456789;
   const char *format = "%.7li!%.7li Hello, World %.7li!%.7li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big negative value - precision test with different values
#test s21_sprintf_ldi_specifier_test30
   const long int input_int = -1234567890;
   const char *format = "%.7li!%.17li Hello, World %.27li!%.37li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test
#test s21_sprintf_ldi_specifier_test31
   const long int input_int = 12;
   const char *format = "%11.2li!%9.2li Hello, World %7.2li!%5.2li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test
#test s21_sprintf_ldi_specifier_test32
   const long int input_int = -12345;
   const char *format = "%11.2li!%9.2li Hello, World %7.2li!%5.2li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - zero precision
#test s21_sprintf_ldi_specifier_test33
   const long int input_int = -12345;
   const char *format = "%11.0li!%9.0li Hello, World %7.0li!%5.0li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - zero precision
#test s21_sprintf_ldi_specifier_test34
   const long int input_int = 123;
   const char *format = "%11.0li!%9.0li Hello, World %7.0li!%5.0li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Regular value - width and precision test - different width and different precision
#test s21_sprintf_ldi_specifier_test35
   const long int input_int = 12;
   const char *format = "%11.12li!%9.10li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Negative value - width and precision test - different width and different precision
#test s21_sprintf_ldi_specifier_test36
   const long int input_int = -12;
   const char *format = "%11.12li!%9.10li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Big regualr value - width and precision test - different width and different precision
#test s21_sprintf_ldi_specifier_test37
   const long int input_int = 123456;
   const char *format = "%4.5li!%7.8li Hello, World %5.10li!%10.5li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sign with regular int test
#test s21_sprintf_ldi_specifier_test38
   const long int input_int = 123456;
   const char *format = "%+li!%+li Hello, World %+li!%+li";

   char s21_buffer[1000];
   memset(s21_buffer, 'a', 1000);
   char buffer[1000];
   memset(buffer, 'a', 1000);

   const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int);
   const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int);
   
   ck_assert_str_eq(s21_buffer, buffer);
   ck_assert_int_eq(s21_result, result);

// %i Sing with maximum value of hexadecimal int
#test s21_sprintf_ldi_specifier_test39
    const long int input_int = 0x7FFFFFFF;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of hexadecimal int
#test s21_sprintf_ldi_specifier_test40
    const long int input_int = 0x723100;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of hexadecimal int
#test s21_sprintf_ldi_specifier_test41
    const long int input_int = -0x7FFFFFFF;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum value of octal int
#test s21_sprintf_ldi_specifier_test42
    const long int input_int = 017777777777;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with normal value of octal int
#test s21_sprintf_ldi_specifier_test43
    const long int input_int = 034430377;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum value of octal int
#test s21_sprintf_ldi_specifier_test44
    const long int input_int = -017777777777;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with maximum int test
#test s21_sprintf_ldi_specifier_test45
    const long int input_int = 2147483647;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Sign with minimum int test
#test s21_sprintf_ldi_specifier_test46
    const long int input_int = -2147483647;
    const char *format = "%+li%+li%+li Hello, World %+li%+li%+li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of hexadecimal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test47
    const long int input_int = 0x7FFFFFFF;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of hexadecimal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test48
    const long int input_int = 0x723100;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of hexadecimal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test49
    const long int input_int = -0x7FFFFFFF;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum value of octal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test50
    const long int input_int = 017777777777;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Normal value of octal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test51
    const long int input_int = 034430377;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum value of octal int - left-justified with no value
#test s21_sprintf_ldi_specifier_test52
    const long int input_int = -017777777777;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Maximum int test - left-justified with no value
#test s21_sprintf_ldi_specifier_test53
    const long int input_int = 2147483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Minimum int test - left-justified with no value
#test s21_sprintf_ldi_specifier_test54
    const long int input_int = -2147483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - left-justified with no value
#test s21_sprintf_ldi_specifier_test55
    const long int input_int = 7483647;
    const char *format = "%-li%-li%-li Hello, World %-li%-li%-li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than)
#test s21_sprintf_ldi_specifier_test56
    const long int input_int = 7483647;
    const char *format = "%+-3li%-7li%-10li Hello, World %+-3.3li%-7.7li%-10.10li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %i Regular int test - signed with different left-justify (min, equal, more than) and precision (min, equal, more than) - one of the values is not set
#test s21_sprintf_ldi_specifier_test57
    const long int input_int = 7483647;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %li Maximum value test - 9223372036854775807
#test s21_sprintf_ldi_specifier_test58
    const long int input_int = 9223372036854775807;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %li Minimum value test - -922337203685477580
#test s21_sprintf_ldi_specifier_test59
    const long int input_int = -922337203685477580;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %li More than minimum value test - -922337203685477589
#test s21_sprintf_ldi_specifier_test60
    const long int input_int = -922337203685477589;
    const char *format = "%+-.3li%-.7li%-.10li Hello, World %+-3.li%-7.li%-10.li";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %ld Maximum value test - 9223372036854775807
#test s21_sprintf_ldi_specifier_test61
    const long int input_int = 9223372036854775807;
    const char *format = "%+-.3ld%-.7ld%-.10ld Hello, World %+-3.ld%-7.ld%-10.ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %ld Minimum value test - -922337203685477580
#test s21_sprintf_ldi_specifier_test62
    const long int input_int = -922337203685477580;
    const char *format = "%+-.3ld%-.7ld%-.10ld Hello, World %+-3.ld%-7.ld%-10.ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// %ld More than minimum value test - -922337203685477589
#test s21_sprintf_ldi_specifier_test63
    const long int input_int = -922337203685477589;
    const char *format = "%+-.3ld%-.7ld%-.10ld Hello, World %+-3.ld%-7.ld%-10.ld";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    const int result = sprintf(buffer, format, input_int, input_int, input_int, input_int, input_int, input_int);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);
