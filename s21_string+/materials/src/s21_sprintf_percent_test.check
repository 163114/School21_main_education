#include <string.h>
#include <stdio.h>
#include "s21_string.h"

// Used here to remove the following warning - "warning: implicit declaration of function s21_sprintf"
int s21_sprintf(char *buffer, const char *format, ...);




#test s21_sprintf_percent_test_width_01_0
    const char percent = '%';
    const char *format = "%2%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

#test s21_sprintf_percent_test_width_01_1
    const char percent = '%';
    const char *format = "%12%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_percent_test_width_left_justify_01
    const char percent = '%';
    const char *format = "%-2%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


#test s21_sprintf_percent_test_width_left_justify_02
    const char percent = '%';
    const char *format = "%-12%25c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %% Multiple percent sign test
#test s21_sprintf_percent_test02
    const char percent = 'A';
    const char *format = "%%c%%%c%%%%c%%%%%c%%%%%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent, percent, percent, percent, percent);
    const int result = sprintf(buffer, format, percent, percent, percent, percent, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);






// %% Single percent sign test
#test s21_sprintf_percent_test01
    const char percent = '%';
    const char *format = "%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent);
    const int result = sprintf(buffer, format, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);




// %% Multiple percent sign test with string inbetween
#test s21_sprintf_percent_test03
    const char percent = '%';
    const char *format = "%%c%%%c%%%%c%%%%%c%%%%%%c Hello world %%c%%%c%%%%c%%%%%c%%%%%%c Hello world %%c%%%c%%%%c%%%%%c%%%%%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent);
    const int result = sprintf(buffer, format, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent, percent);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test04
    const char misc_char = '@';
    const char *format = "%%c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, misc_char);
    const int result = sprintf(buffer, format, misc_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// % Invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test05
    const char *format = "%@!%(%)%{%}%%==";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test06
    const char *format = "%^%$%^&$#%@%!123%{dfghjdf%±";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);


// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test07
    const char *format = "%%%@!123()[]{}{{***43dfghjdf";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);



// % More invalid chars after the percent
// If a percent sign (%) is followed by a character that has no meaning as a format field, the character is simply copied to the buffer
#test s21_sprintf_percent_test08
    const char *format = "р%%о%л%д%%@%!%%234()[вавава]{привет мир}{{***43вававаdfghjdf";
    //const char *format = "w%%q%r%t%%@%!%%234()[vavava]{privet shit}{{***43vavavadfghjdf";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format);
    const int result = sprintf(buffer, format);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);










// % Right-justify - spaces are printed if not the last in the string
#test s21_sprintf_percent_test09
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %5!";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Right-justify with sign - spaces are printed if not the last in the string
#test s21_sprintf_percent_test10
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+5!";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Right-justify with sign and another percent - spaces are printed if not the last in the string
#test s21_sprintf_percent_test11
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+5!%17";

    char s21_buffer[100];
    memset(s21_buffer, 'a', 100);
    char buffer[100];
    memset(buffer, 'a', 100);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Left-justify with sign and another percent and precision - spaces are printed if not the last in the string
#test s21_sprintf_percent_test12
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+-5.8!%+7.8";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Left-justify with sign and another percent with left-justify and precision - spaces are printed if not the last in the string
#test s21_sprintf_percent_test13
    const double input_double = 12345.098;
    const char *format = "[%5f Hello, World %+-5.8!%+-7.8";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double);
    const int result = sprintf(buffer, format, input_double);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

// % Left-justify with sign and another percent with left-justify and precision - spaces are printed if not the last in the string
#test s21_sprintf_percent_test14
    const double input_double = 12345.098;
    const char test_char = 'f';
    const char *format = "[%5f Hello, World %+-5.8!%+-7.8c";

    char s21_buffer[1000];
    memset(s21_buffer, 'a', 1000);
    char buffer[1000];
    memset(buffer, 'a', 1000);

    const int s21_result = s21_sprintf(s21_buffer, format, input_double, test_char);
    const int result = sprintf(buffer, format, input_double, test_char);
    
    ck_assert_str_eq(s21_buffer, buffer);
    ck_assert_int_eq(s21_result, result);

